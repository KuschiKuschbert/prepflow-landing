'use client';

import { supabase } from '@/lib/supabase';
import { useEffect, useState, useMemo } from 'react';

interface Ingredient {
  id: string;
  ingredient_name: string;
  brand?: string;
  pack_size?: number;
  unit?: string;
  cost_per_unit: number;
  cost_per_unit_as_purchased: number;
  cost_per_unit_incl_trim: number;
  trim_peel_waste_percentage?: number;
  yield_percentage?: number;
  supplier?: string;
  product_code?: string;
  storage_location?: string;
}

export default function IngredientsPage() {
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [filteredIngredients, setFilteredIngredients] = useState<Ingredient[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingIngredient, setEditingIngredient] = useState<Ingredient | null>(null);
  const [showCSVImport, setShowCSVImport] = useState(false);
  const [csvData, setCsvData] = useState<string>('');
  const [parsedIngredients, setParsedIngredients] = useState<Partial<Ingredient>[]>([]);
  const [importing, setImporting] = useState(false);
  const [selectedIngredients, setSelectedIngredients] = useState<Set<string>>(new Set());

  // Available units for dropdown
  const availableUnits = [
    'GM', 'KG', 'L', 'ML', 'PC', 'BOX', 'PACK', 'BAG', 'BOTTLE', 'CAN', 'JAR', 'TUBE', 'SACHET', 'POUCH'
  ];
  
  // Search and filter states
  const [searchTerm, setSearchTerm] = useState('');
  const [supplierFilter, setSupplierFilter] = useState('');
  const [storageFilter, setStorageFilter] = useState('');
  const [sortBy, setSortBy] = useState<'name' | 'cost_asc' | 'cost_desc' | 'supplier'>('name');
  const [newIngredient, setNewIngredient] = useState<Partial<Ingredient>>({
    ingredient_name: '',
    brand: '',
    pack_size: 1,
    unit: 'GM',
    cost_per_unit: 0,
    cost_per_unit_as_purchased: 0,
    cost_per_unit_incl_trim: 0,
    trim_peel_waste_percentage: 0,
    yield_percentage: 100,
    supplier: '',
    product_code: '',
    storage_location: '',
  });


  useEffect(() => {
    fetchIngredients();
  }, []);

  // Filter and sort ingredients
  useEffect(() => {
    let filtered = [...ingredients];

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(ingredient =>
        ingredient.ingredient_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        ingredient.brand?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        ingredient.product_code?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Supplier filter
    if (supplierFilter) {
      filtered = filtered.filter(ingredient => ingredient.supplier === supplierFilter);
    }

    // Storage filter
    if (storageFilter) {
      filtered = filtered.filter(ingredient => ingredient.storage_location === storageFilter);
    }

    // Sort
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.ingredient_name.localeCompare(b.ingredient_name);
        case 'cost_asc':
          return a.cost_per_unit_as_purchased - b.cost_per_unit_as_purchased;
        case 'cost_desc':
          return b.cost_per_unit_as_purchased - a.cost_per_unit_as_purchased;
        case 'supplier':
          return (a.supplier || '').localeCompare(b.supplier || '');
        default:
          return 0;
      }
    });

    setFilteredIngredients(filtered);
  }, [ingredients, searchTerm, supplierFilter, storageFilter, sortBy]);

  const fetchIngredients = async () => {
    try {
      console.log('Fetching ingredients via Supabase...');
      const { data, error } = await supabase
        .from('ingredients')
        .select('*')
        .order('ingredient_name');

      console.log('Supabase response:', { data, error });

      if (error) {
        console.error('Supabase error:', error);
        setError(error.message);
      } else {
        console.log('Ingredients loaded:', data?.length);
        setIngredients(data || []);
      }
    } catch (err) {
      console.error('Fetch error:', err);
      setError('Failed to fetch ingredients');
    } finally {
      setLoading(false);
    }
  };

  // AI-powered CSV parsing function
  const parseCSVWithAI = async (csvText: string) => {
    try {
      setImporting(true);
      
      // Parse CSV rows
      const lines = csvText.trim().split('\n');
      const headers = lines[0].split(',').map(h => h.trim().toLowerCase());
      
      const parsedData: Partial<Ingredient>[] = [];
      
      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',').map(v => v.trim());
        if (values.length < 2) continue; // Skip empty rows
        
        // AI-powered field mapping
        const ingredient: Partial<Ingredient> = {};
        
        headers.forEach((header, index) => {
          const value = values[index] || '';
          
          // Smart field mapping based on common CSV headers
          if (header.includes('name') || header.includes('ingredient')) {
            ingredient.ingredient_name = value;
          } else if (header.includes('brand') || header.includes('manufacturer')) {
            ingredient.brand = value;
          } else if (header.includes('cost') && header.includes('unit')) {
            ingredient.cost_per_unit = parseFloat(value) || 0;
          } else if (header.includes('cost') && header.includes('purchased')) {
            ingredient.cost_per_unit_as_purchased = parseFloat(value) || 0;
          } else if (header.includes('cost') && header.includes('trim')) {
            ingredient.cost_per_unit_incl_trim = parseFloat(value) || 0;
          } else if (header.includes('waste') || header.includes('trim')) {
            ingredient.trim_peel_waste_percentage = parseFloat(value) || 0;
          } else if (header.includes('yield')) {
            ingredient.yield_percentage = parseFloat(value) || 100;
          } else if (header.includes('supplier') || header.includes('vendor')) {
            ingredient.supplier = value;
          } else if (header.includes('code') || header.includes('sku')) {
            ingredient.product_code = value;
          } else if (header.includes('storage') || header.includes('location')) {
            ingredient.storage_location = value;
          } else if (header.includes('unit') && !header.includes('cost')) {
            ingredient.unit = value.toUpperCase();
          } else if (header.includes('pack') || header.includes('size')) {
            ingredient.pack_size = parseFloat(value) || 1;
          }
        });
        
        // Set defaults for required fields
        if (!ingredient.ingredient_name) continue; // Skip rows without ingredient name
        if (!ingredient.cost_per_unit) ingredient.cost_per_unit = 0;
        if (!ingredient.cost_per_unit_as_purchased) ingredient.cost_per_unit_as_purchased = ingredient.cost_per_unit || 0;
        if (!ingredient.cost_per_unit_incl_trim) ingredient.cost_per_unit_incl_trim = ingredient.cost_per_unit || 0;
        if (!ingredient.trim_peel_waste_percentage) ingredient.trim_peel_waste_percentage = 0;
        if (!ingredient.yield_percentage) ingredient.yield_percentage = 100;
        if (!ingredient.unit) ingredient.unit = 'GM';
        if (!ingredient.pack_size) ingredient.pack_size = 1;
        
        parsedData.push(ingredient);
      }
      
      setParsedIngredients(parsedData);
      setError(null);
    } catch (err) {
      setError('Failed to parse CSV data');
    } finally {
      setImporting(false);
    }
  };

  // Handle CSV file upload
  const handleCSVUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = (e) => {
      const csvText = e.target?.result as string;
      setCsvData(csvText);
      parseCSVWithAI(csvText);
    };
    reader.readAsText(file);
  };

  // Import selected ingredients
  const importSelectedIngredients = async () => {
    try {
      setImporting(true);
      const ingredientsToImport = parsedIngredients.filter((_, index) => 
        selectedIngredients.has(index.toString())
      );
      
      const { error } = await supabase
        .from('ingredients')
        .insert(ingredientsToImport);
      
      if (error) {
        setError(error.message);
      } else {
        setError(null);
        setShowCSVImport(false);
        setCsvData('');
        setParsedIngredients([]);
        setSelectedIngredients(new Set());
        fetchIngredients(); // Refresh the list
      }
    } catch (err) {
      setError('Failed to import ingredients');
    } finally {
      setImporting(false);
    }
  };

  // CSV Export functionality
  const exportToCSV = () => {
    const headers = [
      'INGREDIENT NAME',
      'PACK SIZE',
      'UNIT',
      'COST PER PACK',
      'TRIM/ PEEL/ WASTE',
      'YIELD',
      'SUPPLIER',
      'STORAGE',
      'PRODUCT CODE',
      'COST PER UNIT AS PURCHASED',
      'COST PER UNIT INCL TRIM'
    ];

    const csvData = filteredIngredients.map(ingredient => [
      ingredient.ingredient_name,
      ingredient.pack_size,
      ingredient.unit,
      (ingredient.cost_per_unit_as_purchased * ingredient.pack_size).toFixed(2),
      `${ingredient.trim_peel_waste_percentage}%`,
      `${ingredient.yield_percentage}%`,
      ingredient.supplier || '',
      ingredient.storage_location || '',
      ingredient.product_code || '',
      ingredient.cost_per_unit_as_purchased.toFixed(4),
      ingredient.cost_per_unit_incl_trim.toFixed(4)
    ]);

    const csvContent = [headers, ...csvData]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `ingredients_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleAddIngredient = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { error } = await supabase
        .from('ingredients')
        .insert([newIngredient]);

      if (error) {
        setError(error.message);
      } else {
        setShowAddForm(false);
        setNewIngredient({
          ingredient_name: '',
          brand: '',
          pack_size: 1,
          unit: 'GM',
          cost_per_unit: 0,
          cost_per_unit_as_purchased: 0,
          cost_per_unit_incl_trim: 0,
          trim_peel_waste_percentage: 0,
          yield_percentage: 100,
          supplier: '',
          product_code: '',
          storage_location: '',
        });
        fetchIngredients();
      }
    } catch (err) {
      setError('Failed to add ingredient');
    }
  };

  const handleUpdateIngredient = async (id: string, updates: Partial<Ingredient>) => {
    try {
      const { error } = await supabase
        .from('ingredients')
        .update(updates)
        .eq('id', id);

      if (error) {
        setError(error.message);
      } else {
        fetchIngredients();
      }
    } catch (err) {
      setError('Failed to update ingredient');
    }
  };

  const handleQuickEdit = (ingredient: Ingredient) => {
    setEditingIngredient(ingredient);
  };

  const handleSaveEdit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingIngredient) return;

    try {
      const { error } = await supabase
        .from('ingredients')
        .update(editingIngredient)
        .eq('id', editingIngredient.id);

      if (error) {
        setError(error.message);
      } else {
        setEditingIngredient(null);
        fetchIngredients();
      }
    } catch (err) {
      setError('Failed to update ingredient');
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="bg-[#1f1f1f] p-4 rounded-lg shadow">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-8">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 sm:mb-8 gap-4">
        <h1 className="text-2xl sm:text-3xl font-bold text-white">Ingredients Management</h1>
        <div className="flex flex-col sm:flex-row gap-3 w-full sm:w-auto">
          <button
            onClick={() => setShowCSVImport(true)}
            className="bg-gradient-to-r from-[#D925C7] to-[#29E7CD] text-white px-4 py-2 rounded-lg hover:from-[#D925C7]/80 hover:to-[#29E7CD]/80 transition-all duration-200 shadow-lg hover:shadow-xl flex items-center space-x-2"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
            </svg>
            <span>Import CSV</span>
          </button>
          <button
            onClick={exportToCSV}
            className="bg-gradient-to-r from-[#3B82F6] to-[#29E7CD] text-white px-4 py-2 rounded-lg hover:from-[#3B82F6]/80 hover:to-[#29E7CD]/80 transition-all duration-200 shadow-lg hover:shadow-xl flex items-center space-x-2"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <span>Export CSV</span>
          </button>
          <button
            onClick={() => setShowAddForm(!showAddForm)}
            className="bg-gradient-to-r from-[#29E7CD] to-[#D925C7] text-white px-4 py-2 rounded-lg hover:from-[#29E7CD]/80 hover:to-[#D925C7]/80 transition-all duration-200 shadow-lg hover:shadow-xl"
          >
            {showAddForm ? 'Cancel' : 'Add Ingredient'}
          </button>
        </div>
      </div>

      {/* Search and Filter Controls */}
      <div className="bg-[#1f1f1f] p-4 sm:p-6 rounded-xl shadow-sm border border-[#2a2a2a] mb-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {/* Search Bar */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Search Ingredients
            </label>
            <input
              type="text"
              placeholder="Search by name, brand, or product code..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
            />
          </div>

          {/* Supplier Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Filter by Supplier
            </label>
            <select
              value={supplierFilter}
              onChange={(e) => setSupplierFilter(e.target.value)}
              className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
            >
              <option value="">All Suppliers</option>
              {Array.from(new Set(ingredients.map(i => i.supplier).filter(Boolean))).map(supplier => (
                <option key={supplier} value={supplier}>{supplier}</option>
              ))}
            </select>
          </div>

          {/* Storage Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Filter by Storage
            </label>
            <select
              value={storageFilter}
              onChange={(e) => setStorageFilter(e.target.value)}
              className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
            >
              <option value="">All Storage</option>
              {Array.from(new Set(ingredients.map(i => i.storage_location).filter(Boolean))).map(storage => (
                <option key={storage} value={storage}>{storage}</option>
              ))}
            </select>
          </div>

          {/* Sort Options */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Sort By
            </label>
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
            >
              <option value="name">Name (A-Z)</option>
              <option value="cost_asc">Cost (Low to High)</option>
              <option value="cost_desc">Cost (High to Low)</option>
              <option value="supplier">Supplier</option>
            </select>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
          {error}
        </div>
      )}

      {/* CSV Import Modal */}
      {showCSVImport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-[#1f1f1f] rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-[#2a2a2a]">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-white">🤖 AI-Powered CSV Import</h2>
                <button
                  onClick={() => {
                    setShowCSVImport(false);
                    setCsvData('');
                    setParsedIngredients([]);
                    setSelectedIngredients(new Set());
                  }}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <p className="text-gray-400 mt-2">
                Upload a CSV file and our AI will automatically map the columns to ingredient fields
              </p>
            </div>

            <div className="p-6 space-y-6">
              {/* File Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  📁 Upload CSV File
                </label>
                <div className="border-2 border-dashed border-[#2a2a2a] rounded-xl p-6 text-center hover:border-[#29E7CD] transition-colors">
                  <input
                    type="file"
                    accept=".csv"
                    onChange={handleCSVUpload}
                    className="hidden"
                    id="csv-upload"
                  />
                  <label htmlFor="csv-upload" className="cursor-pointer">
                    <svg className="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                    </svg>
                    <p className="text-gray-300 mb-2">Click to upload CSV file</p>
                    <p className="text-sm text-gray-500">Supports: ingredient_name, brand, cost_per_unit, supplier, etc.</p>
                  </label>
                </div>
              </div>

              {/* Parsed Ingredients Preview */}
              {parsedIngredients.length > 0 && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-white">
                      ✨ AI-Parsed Ingredients ({parsedIngredients.length} found)
                    </h3>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setSelectedIngredients(new Set(parsedIngredients.map((_, i) => i.toString())))}
                        className="text-sm text-[#29E7CD] hover:text-[#29E7CD]/80 transition-colors"
                      >
                        Select All
                      </button>
                      <button
                        onClick={() => setSelectedIngredients(new Set())}
                        className="text-sm text-gray-400 hover:text-white transition-colors"
                      >
                        Clear All
                      </button>
                    </div>
                  </div>

                  <div className="bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg overflow-hidden">
                    <div className="max-h-96 overflow-y-auto">
                      {parsedIngredients.map((ingredient, index) => (
                        <div key={index} className="border-b border-[#2a2a2a] last:border-b-0">
                          <label className="flex items-center p-4 hover:bg-[#1f1f1f] transition-colors cursor-pointer">
                            <input
                              type="checkbox"
                              checked={selectedIngredients.has(index.toString())}
                              onChange={(e) => {
                                const newSelected = new Set(selectedIngredients);
                                if (e.target.checked) {
                                  newSelected.add(index.toString());
                                } else {
                                  newSelected.delete(index.toString());
                                }
                                setSelectedIngredients(newSelected);
                              }}
                              className="mr-4 w-4 h-4 text-[#29E7CD] bg-[#0a0a0a] border-[#2a2a2a] rounded focus:ring-[#29E7CD]"
                            />
                            <div className="flex-1 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                              <div>
                                <span className="text-gray-400">Name:</span>
                                <p className="text-white font-medium">{ingredient.ingredient_name}</p>
                              </div>
                              <div>
                                <span className="text-gray-400">Brand:</span>
                                <p className="text-white">{ingredient.brand || 'N/A'}</p>
                              </div>
                              <div>
                                <span className="text-gray-400">Cost:</span>
                                <p className="text-white">${ingredient.cost_per_unit?.toFixed(2) || '0.00'}</p>
                              </div>
                              <div>
                                <span className="text-gray-400">Unit:</span>
                                <p className="text-white">{ingredient.unit || 'GM'}</p>
                              </div>
                            </div>
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Import Actions */}
                  <div className="flex justify-between items-center pt-4 border-t border-[#2a2a2a]">
                    <div className="text-sm text-gray-400">
                      {selectedIngredients.size} of {parsedIngredients.length} ingredients selected
                    </div>
                    <div className="flex space-x-3">
                      <button
                        onClick={() => {
                          setShowCSVImport(false);
                          setCsvData('');
                          setParsedIngredients([]);
                          setSelectedIngredients(new Set());
                        }}
                        className="px-4 py-2 text-gray-400 hover:text-white transition-colors"
                      >
                        Cancel
                      </button>
                      <button
                        onClick={importSelectedIngredients}
                        disabled={selectedIngredients.size === 0 || importing}
                        className="bg-gradient-to-r from-[#29E7CD] to-[#3B82F6] text-white px-6 py-2 rounded-lg hover:from-[#29E7CD]/80 hover:to-[#3B82F6]/80 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                      >
                        {importing ? (
                          <>
                            <svg className="animate-spin w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            <span>Importing...</span>
                          </>
                        ) : (
                          <>
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            <span>Import Selected</span>
                          </>
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {showAddForm && (
        <div className="bg-[#1f1f1f] p-4 sm:p-6 rounded-lg shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Add New Ingredient</h2>
          <form onSubmit={handleAddIngredient} className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Name *
              </label>
              <input
                type="text"
                required
                value={newIngredient.ingredient_name}
                onChange={(e) => setNewIngredient({ ...newIngredient, ingredient_name: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Brand
              </label>
              <input
                type="text"
                value={newIngredient.brand}
                onChange={(e) => setNewIngredient({ ...newIngredient, brand: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Pack Size
              </label>
              <input
                type="number"
                step="0.01"
                value={newIngredient.pack_size}
                onChange={(e) => setNewIngredient({ ...newIngredient, pack_size: parseFloat(e.target.value) })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Unit
              </label>
              <select
                value={newIngredient.unit}
                onChange={(e) => setNewIngredient({ ...newIngredient, unit: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              >
                {availableUnits.map(unit => (
                  <option key={unit} value={unit}>{unit}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Cost per Unit ($)
              </label>
              <input
                type="number"
                step="0.01"
                value={newIngredient.cost_per_unit}
                onChange={(e) => setNewIngredient({ ...newIngredient, cost_per_unit: parseFloat(e.target.value) })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Cost per Unit (As Purchased) ($)
              </label>
              <input
                type="number"
                step="0.01"
                value={newIngredient.cost_per_unit_as_purchased}
                onChange={(e) => setNewIngredient({ ...newIngredient, cost_per_unit_as_purchased: parseFloat(e.target.value) })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Cost per Unit (Incl. Trim) ($)
              </label>
              <input
                type="number"
                step="0.01"
                value={newIngredient.cost_per_unit_incl_trim}
                onChange={(e) => setNewIngredient({ ...newIngredient, cost_per_unit_incl_trim: parseFloat(e.target.value) })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Trim/Peel Waste (%)
              </label>
              <input
                type="number"
                step="0.01"
                value={newIngredient.trim_peel_waste_percentage}
                onChange={(e) => setNewIngredient({ ...newIngredient, trim_peel_waste_percentage: parseFloat(e.target.value) })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Yield (%)
              </label>
              <input
                type="number"
                step="0.01"
                value={newIngredient.yield_percentage}
                onChange={(e) => setNewIngredient({ ...newIngredient, yield_percentage: parseFloat(e.target.value) })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Supplier
              </label>
              <input
                type="text"
                value={newIngredient.supplier}
                onChange={(e) => setNewIngredient({ ...newIngredient, supplier: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Product Code
              </label>
              <input
                type="text"
                value={newIngredient.product_code}
                onChange={(e) => setNewIngredient({ ...newIngredient, product_code: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Storage Location
              </label>
              <input
                type="text"
                value={newIngredient.storage_location}
                onChange={(e) => setNewIngredient({ ...newIngredient, storage_location: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div className="sm:col-span-2">
              <button
                type="submit"
                className="bg-gradient-to-r from-[#29E7CD] to-[#D925C7] text-white px-4 py-2 rounded-lg hover:from-[#29E7CD]/80 hover:to-[#D925C7]/80 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                Add Ingredient
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Ingredients List */}
      <div className="bg-[#1f1f1f] rounded-lg shadow overflow-hidden">
        <div className="px-4 sm:px-6 py-4 border-b border-[#2a2a2a]">
          <h2 className="text-lg font-semibold text-white">
            📋 Ingredients ({filteredIngredients.length} of {ingredients.length})
          </h2>
        </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Trim/Peel Waste (%)
              </label>
              <div className="flex items-center space-x-2">
                <button
                  type="button"
                  onClick={() => {
                    const current = newIngredient.trim_peel_waste_percentage || 0;
                    const newValue = Math.max(0, Math.floor(current) - 1);
                    setNewIngredient({ 
                      ...newIngredient, 
                      trim_peel_waste_percentage: newValue,
                      yield_percentage: 100 - newValue
                    });
                  }}
                  className="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors"
                >
                  -
                </button>
                <input
                  type="number"
                  step="1"
                  min="0"
                  max="50"
                  value={Math.floor(newIngredient.trim_peel_waste_percentage || 0)}
                  onChange={(e) => {
                    const wasteValue = parseInt(e.target.value) || 0;
                    setNewIngredient({ 
                      ...newIngredient, 
                      trim_peel_waste_percentage: wasteValue,
                      yield_percentage: 100 - wasteValue
                    });
                  }}
                  className="flex-1 px-3 py-2 border border-[#2a2a2a] rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD] text-center"
                />
                <button
                  type="button"
                  onClick={() => {
                    const current = newIngredient.trim_peel_waste_percentage || 0;
                    const newValue = Math.min(50, Math.floor(current) + 1);
                    setNewIngredient({ 
                      ...newIngredient, 
                      trim_peel_waste_percentage: newValue,
                      yield_percentage: 100 - newValue
                    });
                  }}
                  className="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors"
                >
                  +
                </button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Yield (%) - Auto Calculated
              </label>
              <input
                type="number"
                step="1"
                value={Math.floor(newIngredient.yield_percentage || 100)}
                readOnly
                className="w-full px-3 py-2 border border-[#2a2a2a] rounded-md bg-gray-50 text-gray-400"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Supplier
              </label>
              <input
                type="text"
                value={newIngredient.supplier}
                onChange={(e) => setNewIngredient({ ...newIngredient, supplier: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Product Code
              </label>
              <input
                type="text"
                value={newIngredient.product_code}
                onChange={(e) => setNewIngredient({ ...newIngredient, product_code: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Storage
              </label>
              <select
                value={newIngredient.storage_location}
                onChange={(e) => setNewIngredient({ ...newIngredient, storage_location: e.target.value })}
                className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
              >
                <option value="">Select storage</option>
                <option value="COLDROOM">Cold Room</option>
                <option value="FROZEN">Frozen</option>
                <option value="DRYSTORE">Dry Store</option>
                <option value="PANTRY">Pantry</option>
              </select>
            </div>
            <div className="sm:col-span-2">
              <button
                type="submit"
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors"
              >
                Add Ingredient
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="bg-[#1f1f1f] rounded-lg shadow overflow-hidden">
        <div className="px-4 sm:px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-white">
            Ingredients ({filteredIngredients.length} of {ingredients.length})
          </h2>
        </div>
        
        {/* Mobile Card Layout */}
        <div className="block md:hidden">
          <div className="divide-y divide-gray-200">
            {filteredIngredients.map((ingredient) => (
              <div key={ingredient.id} className="p-4 hover:bg-gray-50">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex-1">
                    <h3 className="text-sm font-medium text-white mb-1">
                      {ingredient.ingredient_name}
                    </h3>
                    <p className="text-xs text-gray-500">
                      {ingredient.brand && `${ingredient.brand} • `}
                      {ingredient.pack_size} {ingredient.unit}
                    </p>
                  </div>
                  <button
                    onClick={() => handleQuickEdit(ingredient)}
                    className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700 transition-colors ml-2"
                  >
                    Edit
                  </button>
                </div>
                
                <div className="grid grid-cols-2 gap-3 text-xs">
                  <div>
                    <span className="text-gray-500">Cost per Pack:</span>
                    <span className="ml-1 font-medium">
                      ${(ingredient.cost_per_unit_as_purchased * ingredient.pack_size).toFixed(2)}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500">Waste:</span>
                    <span className="ml-1 font-medium">
                      {Math.floor(ingredient.trim_peel_waste_percentage || 0)}%
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500">Yield:</span>
                    <span className="ml-1 font-medium text-gray-400">
                      {Math.floor(ingredient.yield_percentage || 100)}%
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500">Supplier:</span>
                    <span className="ml-1 font-medium">
                      {ingredient.supplier || '-'}
                    </span>
                  </div>
                </div>
                
                {(ingredient.storage_location || ingredient.product_code) && (
                  <div className="mt-3 pt-3 border-t border-gray-100">
                    <div className="grid grid-cols-2 gap-3 text-xs">
                      {ingredient.storage_location && (
                        <div>
                          <span className="text-gray-500">Storage:</span>
                          <span className="ml-1 font-medium">{ingredient.storage_location}</span>
                        </div>
                      )}
                      {ingredient.product_code && (
                        <div>
                          <span className="text-gray-500">Code:</span>
                          <span className="ml-1 font-medium">{ingredient.product_code}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Desktop Table Layout */}
        <div className="hidden md:block overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  INGREDIENT NAME
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  PACK SIZE
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  UNIT
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  COST PER PACK
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  TRIM/ PEEL/ WASTE
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  YIELD
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  SUPPLIER
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  STORAGE
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  PRODUCT CODE
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  COST PER UNIT AS PURCHASED
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  COST PER UNIT INCL TRIM
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ACTIONS
                </th>
              </tr>
            </thead>
            <tbody className="bg-[#1f1f1f] divide-y divide-gray-200">
              {filteredIngredients.map((ingredient) => (
                <tr key={ingredient.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">
                    {ingredient.ingredient_name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {ingredient.pack_size}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {ingredient.unit}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${(ingredient.cost_per_unit_as_purchased * ingredient.pack_size).toFixed(2)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {Math.floor(ingredient.trim_peel_waste_percentage || 0)}%
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <span className="text-gray-400">
                      {Math.floor(ingredient.yield_percentage || 100)}% (auto)
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {ingredient.supplier || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {ingredient.storage_location || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {ingredient.product_code || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${ingredient.cost_per_unit_as_purchased.toFixed(4)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${ingredient.cost_per_unit_incl_trim.toFixed(4)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <button
                      onClick={() => handleQuickEdit(ingredient)}
                      className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700 transition-colors"
                    >
                      Quick Edit
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Quick Edit Modal */}
      {editingIngredient && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-0 sm:p-4">
          <div className="bg-[#1f1f1f] rounded-none sm:rounded-lg shadow-xl max-w-2xl w-full h-full sm:h-auto mx-0 sm:mx-4 max-h-full sm:max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold">Quick Edit Ingredient</h2>
                <button
                  onClick={() => setEditingIngredient(null)}
                  className="text-gray-400 hover:text-gray-400"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <form onSubmit={handleSaveEdit} className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Name *
                  </label>
                  <input
                    type="text"
                    required
                    value={editingIngredient.ingredient_name}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, ingredient_name: e.target.value })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Brand
                  </label>
                  <input
                    type="text"
                    value={editingIngredient.brand || ''}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, brand: e.target.value })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Pack Size
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={editingIngredient.pack_size || 1}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, pack_size: parseFloat(e.target.value) })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Unit
                  </label>
                  <select
                    value={editingIngredient.unit || 'GM'}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, unit: e.target.value })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  >
                    {availableUnits.map(unit => (
                      <option key={unit} value={unit}>{unit}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Cost per Unit ($)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={editingIngredient.cost_per_unit || 0}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, cost_per_unit: parseFloat(e.target.value) })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Trim/Peel Waste (%)
                  </label>
                  <div className="flex items-center space-x-2">
                    <button
                      type="button"
                      onClick={() => {
                        const current = editingIngredient.trim_peel_waste_percentage || 0;
                        const newValue = Math.max(0, Math.floor(current) - 1);
                        setEditingIngredient({ 
                          ...editingIngredient, 
                          trim_peel_waste_percentage: newValue,
                          yield_percentage: 100 - newValue
                        });
                      }}
                      className="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors"
                    >
                      -
                    </button>
                    <input
                      type="number"
                      step="1"
                      min="0"
                      max="50"
                      value={Math.floor(editingIngredient.trim_peel_waste_percentage || 0)}
                      onChange={(e) => {
                        const wasteValue = parseInt(e.target.value) || 0;
                        setEditingIngredient({ 
                          ...editingIngredient, 
                          trim_peel_waste_percentage: wasteValue,
                          yield_percentage: 100 - wasteValue
                        });
                      }}
                      className="flex-1 px-3 py-2 border border-[#2a2a2a] rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD] text-center"
                    />
                    <button
                      type="button"
                      onClick={() => {
                        const current = editingIngredient.trim_peel_waste_percentage || 0;
                        const newValue = Math.min(50, Math.floor(current) + 1);
                        setEditingIngredient({ 
                          ...editingIngredient, 
                          trim_peel_waste_percentage: newValue,
                          yield_percentage: 100 - newValue
                        });
                      }}
                      className="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors"
                    >
                      +
                    </button>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Yield (%) - Auto Calculated
                  </label>
                  <input
                    type="number"
                    step="1"
                    value={Math.floor(editingIngredient.yield_percentage || 100)}
                    readOnly
                    className="w-full px-3 py-2 border border-[#2a2a2a] rounded-md bg-gray-50 text-gray-400"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Supplier
                  </label>
                  <input
                    type="text"
                    value={editingIngredient.supplier || ''}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, supplier: e.target.value })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Product Code
                  </label>
                  <input
                    type="text"
                    value={editingIngredient.product_code || ''}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, product_code: e.target.value })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Storage
                  </label>
                  <select
                    value={editingIngredient.storage_location || ''}
                    onChange={(e) => setEditingIngredient({ ...editingIngredient, storage_location: e.target.value })}
                    className="w-full px-3 py-2 border border-[#2a2a2a] bg-[#0a0a0a] text-white rounded-md focus:outline-none focus:ring-2 focus:ring-[#29E7CD]"
                  >
                    <option value="">Select storage</option>
                    <option value="COLDROOM">Cold Room</option>
                    <option value="FROZEN">Frozen</option>
                    <option value="DRYSTORE">Dry Store</option>
                    <option value="PANTRY">Pantry</option>
                  </select>
                </div>
                <div className="sm:col-span-2 flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setEditingIngredient(null)}
                    className="px-4 py-2 text-gray-400 border border-[#2a2a2a] rounded-md hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                  >
                    Save Changes
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
