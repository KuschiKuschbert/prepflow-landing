name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

env:
  NODE_VERSION: '22'

# Default permissions for all jobs (principle of least privilege)
permissions:
  contents: read

jobs:
  # 🔍 Quality Checks
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🎨 Check formatting
        run: npm run format:check

      - name: 🔍 TypeScript check
        run: npm run type-check

      - name: 🧪 Run tests
        run: npm run test
        continue-on-error: true

  # 🏗️ Build & Test
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
    # actionlint: disable=expr
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Build size analysis
        run: |
          echo "📊 Build size analysis:"
          du -sh .next/static/chunks/ || echo "No chunks directory found"
          find .next/static -name "*.js" -exec ls -lh {} \; | head -10 || echo "No JS files found"

  # 🚀 Deploy to Vercel
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    # actionlint: disable=expr
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ env.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # 📊 Performance Monitoring
  # Disabled: Lighthouse requires a running server which isn't available in CI
  # Performance monitoring is handled by Vercel Analytics and Core Web Vitals
  # performance-check:
  #   name: 📊 Performance Check
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: github.ref == 'refs/heads/main'
  #   permissions:
  #     contents: read
  #
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: 🔧 Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #
  #     - name: 📦 Install dependencies
  #       run: npm ci
  #
  #     - name: 🏗️ Build application
  #       run: npm run build
  #
  #     - name: 📊 Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         urls: |
  #           http://localhost:3000
  #         configPath: './lighthouse.config.js'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true

  # 🔒 Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 📈 Notify on Success/Failure
  notify:
    name: 📈 Notify
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test, deploy]
    if: always()
    permissions:
      contents: read

    steps:
      - name: 📈 Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🚀 PrepFlow deployed to production"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "❌ Deployment failed!"
            echo "🔧 Check the logs for issues"
          elif [ "${{ needs.deploy.result }}" == "skipped" ] || [ -z "${{ needs.deploy.result }}" ]; then
            echo "⏳ Deployment skipped (not on main branch or deploy job not executed)"
          else
            echo "⚠️ Deployment status: ${{ needs.deploy.result }}"
          fi
