{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/compliance-records/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const typeId = searchParams.get('type_id');\n    const status = searchParams.get('status');\n\n    let query = supabaseAdmin\n      .from('compliance_records')\n      .select(`\n        *,\n        compliance_types (\n          id,\n          name,\n          description,\n          renewal_frequency_days\n        )\n      `)\n      .order('expiry_date', { ascending: true });\n\n    if (typeId) {\n      query = query.eq('compliance_type_id', typeId);\n    }\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error fetching compliance records:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch compliance records',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Compliance records fetch error:', error);\n    return NextResponse.json({ \n      error: 'Failed to fetch compliance records',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { \n      compliance_type_id, \n      document_name, \n      issue_date, \n      expiry_date, \n      document_url, \n      photo_url, \n      notes, \n      reminder_enabled, \n      reminder_days_before \n    } = body;\n\n    if (!compliance_type_id || !document_name) {\n      return NextResponse.json({ \n        error: 'Required fields missing',\n        message: 'Please provide compliance_type_id and document_name'\n      }, { status: 400 });\n    }\n\n    // Determine status based on expiry date\n    let status = 'active';\n    if (expiry_date) {\n      const today = new Date();\n      const expiry = new Date(expiry_date);\n      if (expiry < today) {\n        status = 'expired';\n      } else if (reminder_days_before) {\n        const reminderDate = new Date(expiry);\n        reminderDate.setDate(reminderDate.getDate() - reminder_days_before);\n        if (today >= reminderDate) {\n          status = 'pending_renewal';\n        }\n      }\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('compliance_records')\n      .insert({\n        compliance_type_id,\n        document_name,\n        issue_date: issue_date || null,\n        expiry_date: expiry_date || null,\n        status,\n        document_url: document_url || null,\n        photo_url: photo_url || null,\n        notes: notes || null,\n        reminder_enabled: reminder_enabled !== undefined ? reminder_enabled : true,\n        reminder_days_before: reminder_days_before || 30\n      })\n      .select(`\n        *,\n        compliance_types (\n          id,\n          name,\n          description,\n          renewal_frequency_days\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error creating compliance record:', error);\n      return NextResponse.json({ \n        error: 'Failed to create compliance record',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Compliance record created successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Compliance record creation error:', error);\n    return NextResponse.json({ \n      error: 'Failed to create compliance record',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { \n      id, \n      document_name, \n      issue_date, \n      expiry_date, \n      document_url, \n      photo_url, \n      notes, \n      reminder_enabled, \n      reminder_days_before \n    } = body;\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the compliance record to update'\n      }, { status: 400 });\n    }\n\n    const updateData: any = {};\n    if (document_name !== undefined) updateData.document_name = document_name;\n    if (issue_date !== undefined) updateData.issue_date = issue_date;\n    if (expiry_date !== undefined) updateData.expiry_date = expiry_date;\n    if (document_url !== undefined) updateData.document_url = document_url;\n    if (photo_url !== undefined) updateData.photo_url = photo_url;\n    if (notes !== undefined) updateData.notes = notes;\n    if (reminder_enabled !== undefined) updateData.reminder_enabled = reminder_enabled;\n    if (reminder_days_before !== undefined) updateData.reminder_days_before = reminder_days_before;\n\n    // Recalculate status if expiry_date changed\n    if (expiry_date !== undefined) {\n      const today = new Date();\n      const expiry = new Date(expiry_date);\n      if (expiry < today) {\n        updateData.status = 'expired';\n      } else if (reminder_days_before !== undefined) {\n        const reminderDate = new Date(expiry);\n        reminderDate.setDate(reminderDate.getDate() - reminder_days_before);\n        if (today >= reminderDate) {\n          updateData.status = 'pending_renewal';\n        } else {\n          updateData.status = 'active';\n        }\n      }\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('compliance_records')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        *,\n        compliance_types (\n          id,\n          name,\n          description,\n          renewal_frequency_days\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error updating compliance record:', error);\n      return NextResponse.json({ \n        error: 'Failed to update compliance record',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Compliance record updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Compliance record update error:', error);\n    return NextResponse.json({ \n      error: 'Failed to update compliance record',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the compliance record to delete'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { error } = await supabaseAdmin\n      .from('compliance_records')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting compliance record:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete compliance record',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Compliance record deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Compliance record deletion error:', error);\n    return NextResponse.json({ \n      error: 'Failed to delete compliance record',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}