{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/supplier-price-lists/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const supplierId = searchParams.get('supplier_id');\n    const current = searchParams.get('current');\n\n    let query = supabaseAdmin\n      .from('supplier_price_lists')\n      .select(`\n        *,\n        suppliers (\n          id,\n          name,\n          contact_person,\n          email,\n          phone\n        )\n      `)\n      .order('effective_date', { ascending: false });\n\n    if (supplierId) {\n      query = query.eq('supplier_id', supplierId);\n    }\n    if (current !== null) {\n      query = query.eq('is_current', current === 'true');\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error fetching supplier price lists:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch supplier price lists',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Supplier price lists fetch error:', error);\n    return NextResponse.json({ \n      error: 'Failed to fetch supplier price lists',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { \n      supplier_id, \n      document_name, \n      document_url, \n      effective_date, \n      expiry_date, \n      notes \n    } = body;\n\n    if (!supplier_id || !document_name || !document_url) {\n      return NextResponse.json({ \n        error: 'Required fields missing',\n        message: 'Please provide supplier_id, document_name, and document_url'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // If this is marked as current, set all other price lists for this supplier as not current\n    if (body.is_current !== false) {\n      await supabaseAdmin\n        .from('supplier_price_lists')\n        .update({ is_current: false })\n        .eq('supplier_id', supplier_id);\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('supplier_price_lists')\n      .insert({\n        supplier_id: parseInt(supplier_id),\n        document_name,\n        document_url,\n        effective_date: effective_date || null,\n        expiry_date: expiry_date || null,\n        is_current: body.is_current !== false,\n        notes: notes || null\n      })\n      .select(`\n        *,\n        suppliers (\n          id,\n          name,\n          contact_person,\n          email,\n          phone\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error creating supplier price list:', error);\n      return NextResponse.json({ \n        error: 'Failed to create supplier price list',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Supplier price list created successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Supplier price list creation error:', error);\n    return NextResponse.json({ \n      error: 'Failed to create supplier price list',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { \n      id, \n      document_name, \n      document_url, \n      effective_date, \n      expiry_date, \n      notes, \n      is_current \n    } = body;\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the supplier price list to update'\n      }, { status: 400 });\n    }\n\n    const updateData: any = {};\n    if (document_name !== undefined) updateData.document_name = document_name;\n    if (document_url !== undefined) updateData.document_url = document_url;\n    if (effective_date !== undefined) updateData.effective_date = effective_date;\n    if (expiry_date !== undefined) updateData.expiry_date = expiry_date;\n    if (notes !== undefined) updateData.notes = notes;\n    if (is_current !== undefined) updateData.is_current = is_current;\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // If this is being set as current, set all other price lists for this supplier as not current\n    if (is_current === true) {\n      const { data: currentRecord } = await supabaseAdmin\n        .from('supplier_price_lists')\n        .select('supplier_id')\n        .eq('id', id)\n        .single();\n\n      if (currentRecord) {\n        await supabaseAdmin\n          .from('supplier_price_lists')\n          .update({ is_current: false })\n          .eq('supplier_id', currentRecord.supplier_id)\n          .neq('id', id);\n      }\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('supplier_price_lists')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        *,\n        suppliers (\n          id,\n          name,\n          contact_person,\n          email,\n          phone\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error updating supplier price list:', error);\n      return NextResponse.json({ \n        error: 'Failed to update supplier price list',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Supplier price list updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Supplier price list update error:', error);\n    return NextResponse.json({ \n      error: 'Failed to update supplier price list',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the supplier price list to delete'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { error } = await supabaseAdmin\n      .from('supplier_price_lists')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting supplier price list:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete supplier price list',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Supplier price list deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Supplier price list deletion error:', error);\n    return NextResponse.json({ \n      error: 'Failed to delete supplier price list',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}