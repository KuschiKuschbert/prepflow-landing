{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/create-tables-auto/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createSupabaseAdmin } from '@/lib/supabase';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabaseAdmin = createSupabaseAdmin();\n    \n    // SQL script to create all tables\n    const createTablesSQL = `\n      -- Create ingredients table\n      CREATE TABLE IF NOT EXISTS ingredients (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        brand VARCHAR(255),\n        pack_size DECIMAL(10,2),\n        unit VARCHAR(50),\n        cost_per_unit DECIMAL(10,4),\n        trim_peel_waste_percent DECIMAL(5,2),\n        yield_percent DECIMAL(5,2),\n        supplier VARCHAR(255),\n        storage VARCHAR(100),\n        product_code VARCHAR(100),\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create recipes table\n      CREATE TABLE IF NOT EXISTS recipes (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        description TEXT,\n        yield_servings INTEGER,\n        instructions TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create recipe_ingredients table\n      CREATE TABLE IF NOT EXISTS recipe_ingredients (\n        id SERIAL PRIMARY KEY,\n        recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,\n        ingredient_id INTEGER REFERENCES ingredients(id) ON DELETE CASCADE,\n        quantity DECIMAL(10,3) NOT NULL,\n        unit VARCHAR(50) NOT NULL,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create menu_dishes table\n      CREATE TABLE IF NOT EXISTS menu_dishes (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        description TEXT,\n        recipe_id INTEGER REFERENCES recipes(id),\n        selling_price DECIMAL(10,2),\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create users table\n      CREATE TABLE IF NOT EXISTS users (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password_hash VARCHAR(255),\n        first_name VARCHAR(100),\n        last_name VARCHAR(100),\n        business_name VARCHAR(255),\n        subscription_status VARCHAR(50) DEFAULT 'trial',\n        subscription_expires TIMESTAMP WITH TIME ZONE,\n        stripe_customer_id VARCHAR(255),\n        email_verified BOOLEAN DEFAULT FALSE,\n        email_verification_token VARCHAR(255),\n        email_verification_expires TIMESTAMP WITH TIME ZONE,\n        password_reset_token VARCHAR(255),\n        password_reset_expires TIMESTAMP WITH TIME ZONE,\n        failed_login_attempts INTEGER DEFAULT 0,\n        locked_until TIMESTAMP WITH TIME ZONE,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n    `;\n\n    // Create tables one by one using Supabase REST API\n    const tables = [\n      {\n        name: 'ingredients',\n        sql: `CREATE TABLE IF NOT EXISTS ingredients (\n          id SERIAL PRIMARY KEY,\n          name VARCHAR(255) NOT NULL,\n          brand VARCHAR(255),\n          pack_size DECIMAL(10,2),\n          unit VARCHAR(50),\n          cost_per_unit DECIMAL(10,4),\n          trim_peel_waste_percent DECIMAL(5,2),\n          yield_percent DECIMAL(5,2),\n          supplier VARCHAR(255),\n          storage VARCHAR(100),\n          product_code VARCHAR(100),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );`\n      },\n      {\n        name: 'recipes',\n        sql: `CREATE TABLE IF NOT EXISTS recipes (\n          id SERIAL PRIMARY KEY,\n          name VARCHAR(255) NOT NULL,\n          description TEXT,\n          yield_servings INTEGER,\n          instructions TEXT,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );`\n      },\n      {\n        name: 'recipe_ingredients',\n        sql: `CREATE TABLE IF NOT EXISTS recipe_ingredients (\n          id SERIAL PRIMARY KEY,\n          recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,\n          ingredient_id INTEGER REFERENCES ingredients(id) ON DELETE CASCADE,\n          quantity DECIMAL(10,3) NOT NULL,\n          unit VARCHAR(50) NOT NULL,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );`\n      },\n      {\n        name: 'menu_dishes',\n        sql: `CREATE TABLE IF NOT EXISTS menu_dishes (\n          id SERIAL PRIMARY KEY,\n          name VARCHAR(255) NOT NULL,\n          description TEXT,\n          recipe_id INTEGER REFERENCES recipes(id),\n          selling_price DECIMAL(10,2),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );`\n      },\n      {\n        name: 'users',\n        sql: `CREATE TABLE IF NOT EXISTS users (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          email VARCHAR(255) UNIQUE NOT NULL,\n          password_hash VARCHAR(255),\n          first_name VARCHAR(100),\n          last_name VARCHAR(100),\n          business_name VARCHAR(255),\n          subscription_status VARCHAR(50) DEFAULT 'trial',\n          subscription_expires TIMESTAMP WITH TIME ZONE,\n          stripe_customer_id VARCHAR(255),\n          email_verified BOOLEAN DEFAULT FALSE,\n          email_verification_token VARCHAR(255),\n          email_verification_expires TIMESTAMP WITH TIME ZONE,\n          password_reset_token VARCHAR(255),\n          password_reset_expires TIMESTAMP WITH TIME ZONE,\n          failed_login_attempts INTEGER DEFAULT 0,\n          locked_until TIMESTAMP WITH TIME ZONE,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );`\n      }\n    ];\n\n    const results = [];\n    \n    for (const table of tables) {\n      try {\n        // Check if table already exists\n        const { data: existingTable, error: checkError } = await supabaseAdmin\n          .from(table.name)\n          .select('id')\n          .limit(1);\n\n        if (checkError && checkError.code === 'PGRST204') {\n          // Table doesn't exist, try to create it using a simple approach\n          console.log(`Table ${table.name} doesn't exist, attempting to create...`);\n          \n          // For now, we'll return instructions for manual creation\n          results.push({ \n            table: table.name, \n            status: 'needs_manual_creation',\n            message: 'Please create this table manually in Supabase dashboard'\n          });\n        } else if (!checkError) {\n          results.push({ table: table.name, status: 'already_exists' });\n        } else {\n          results.push({ table: table.name, status: 'error', error: checkError.message });\n        }\n      } catch (err) {\n        console.error(`Error checking table ${table.name}:`, err);\n        results.push({ table: table.name, status: 'error', error: err instanceof Error ? err.message : 'Unknown error' });\n      }\n    }\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Table status checked. Some tables may need manual creation.',\n      results: results,\n      instructions: 'Visit Supabase dashboard to create missing tables using the SQL script from /api/create-tables'\n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iHAAA,CAAA,sBAAmB,AAAD;QAExC,kCAAkC;QAClC,MAAM,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwEzB,CAAC;QAED,mDAAmD;QACnD,MAAM,SAAS;YACb;gBACE,MAAM;gBACN,KAAK,CAAC;;;;;;;;;;;;;;UAcJ,CAAC;YACL;YACA;gBACE,MAAM;gBACN,KAAK,CAAC;;;;;;;;UAQJ,CAAC;YACL;YACA;gBACE,MAAM;gBACN,KAAK,CAAC;;;;;;;;UAQJ,CAAC;YACL;YACA;gBACE,MAAM;gBACN,KAAK,CAAC;;;;;;;;UAQJ,CAAC;YACL;YACA;gBACE,MAAM;gBACN,KAAK,CAAC;;;;;;;;;;;;;;;;;;;UAmBJ,CAAC;YACL;SACD;QAED,MAAM,UAAU,EAAE;QAElB,KAAK,MAAM,SAAS,OAAQ;YAC1B,IAAI;gBACF,gCAAgC;gBAChC,MAAM,EAAE,MAAM,aAAa,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,cACtD,IAAI,CAAC,MAAM,IAAI,EACf,MAAM,CAAC,MACP,KAAK,CAAC;gBAET,IAAI,cAAc,WAAW,IAAI,KAAK,YAAY;oBAChD,gEAAgE;oBAChE,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,uCAAuC,CAAC;oBAExE,yDAAyD;oBACzD,QAAQ,IAAI,CAAC;wBACX,OAAO,MAAM,IAAI;wBACjB,QAAQ;wBACR,SAAS;oBACX;gBACF,OAAO,IAAI,CAAC,YAAY;oBACtB,QAAQ,IAAI,CAAC;wBAAE,OAAO,MAAM,IAAI;wBAAE,QAAQ;oBAAiB;gBAC7D,OAAO;oBACL,QAAQ,IAAI,CAAC;wBAAE,OAAO,MAAM,IAAI;wBAAE,QAAQ;wBAAS,OAAO,WAAW,OAAO;oBAAC;gBAC/E;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,CAAC,qBAAqB,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE;gBACrD,QAAQ,IAAI,CAAC;oBAAE,OAAO,MAAM,IAAI;oBAAE,QAAQ;oBAAS,OAAO,eAAe,QAAQ,IAAI,OAAO,GAAG;gBAAgB;YACjH;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,SAAS;YACT,cAAc;QAChB;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}