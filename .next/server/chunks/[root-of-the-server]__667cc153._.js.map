{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/create-missing-tables/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // Create ingredients table first\n    const createIngredientsSQL = `\n      CREATE TABLE IF NOT EXISTS ingredients (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        ingredient_name VARCHAR(255) NOT NULL,\n        brand VARCHAR(255),\n        pack_size VARCHAR(100),\n        unit VARCHAR(50) NOT NULL,\n        cost_per_unit DECIMAL(10,4) NOT NULL,\n        cost_per_unit_as_purchased DECIMAL(10,4),\n        cost_per_unit_incl_trim DECIMAL(10,4),\n        trim_peel_waste_percentage DECIMAL(5,2) DEFAULT 0,\n        yield_percentage DECIMAL(5,2) DEFAULT 100,\n        supplier VARCHAR(255),\n        storage VARCHAR(255),\n        product_code VARCHAR(100),\n        category VARCHAR(100),\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n    `;\n\n    // Try to create ingredients table\n    const { error: ingredientsError } = await supabaseAdmin\n      .from('ingredients')\n      .select('id')\n      .limit(1);\n\n    if (ingredientsError && ingredientsError.code === 'PGRST205') {\n      // Table doesn't exist, create it\n      console.log('Creating ingredients table...');\n      \n      // Use a different approach - insert a dummy record to create the table\n      try {\n        await supabaseAdmin.rpc('exec', { sql: createIngredientsSQL });\n      } catch (rpcError) {\n        console.log('RPC failed, trying alternative approach...');\n        \n        // Alternative: Use the REST API to create the table\n        // This won't work directly, so we'll return instructions\n        return NextResponse.json({\n          success: false,\n          message: 'Please create tables manually in Supabase dashboard',\n          instructions: {\n            step1: 'Go to your Supabase dashboard',\n            step2: 'Navigate to SQL Editor',\n            step3: 'Run the provided SQL script',\n            step4: 'Then test the API endpoints again'\n          },\n          sqlScript: createIngredientsSQL + `\n-- Create recipes table\nCREATE TABLE IF NOT EXISTS recipes (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  recipe_name VARCHAR(255) NOT NULL,\n  description TEXT,\n  yield INTEGER NOT NULL DEFAULT 1,\n  yield_unit VARCHAR(50) NOT NULL DEFAULT 'servings',\n  instructions TEXT,\n  prep_time_minutes INTEGER,\n  cook_time_minutes INTEGER,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create recipe_ingredients junction table\nCREATE TABLE IF NOT EXISTS recipe_ingredients (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,\n  ingredient_id UUID REFERENCES ingredients(id) ON DELETE CASCADE,\n  quantity DECIMAL(10,3) NOT NULL,\n  unit VARCHAR(50) NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create temperature_equipment table\nCREATE TABLE IF NOT EXISTS temperature_equipment (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  equipment_type VARCHAR(50) NOT NULL,\n  location VARCHAR(255),\n  min_temp_celsius DECIMAL(5,2),\n  max_temp_celsius DECIMAL(5,2),\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create temperature_logs table\nCREATE TABLE IF NOT EXISTS temperature_logs (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  equipment_id UUID REFERENCES temperature_equipment(id) ON DELETE CASCADE,\n  temperature_celsius DECIMAL(5,2) NOT NULL,\n  recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  recorded_by VARCHAR(255),\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create cleaning_areas table\nCREATE TABLE IF NOT EXISTS cleaning_areas (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  area_name VARCHAR(255) NOT NULL,\n  description TEXT,\n  cleaning_frequency VARCHAR(50),\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create cleaning_tasks table\nCREATE TABLE IF NOT EXISTS cleaning_tasks (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  area_id UUID REFERENCES cleaning_areas(id) ON DELETE CASCADE,\n  task_name VARCHAR(255) NOT NULL,\n  description TEXT,\n  frequency VARCHAR(50),\n  estimated_duration_minutes INTEGER,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create suppliers table\nCREATE TABLE IF NOT EXISTS suppliers (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  supplier_name VARCHAR(255) NOT NULL,\n  contact_person VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(50),\n  address TEXT,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create compliance_types table\nCREATE TABLE IF NOT EXISTS compliance_types (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  type_name VARCHAR(255) NOT NULL,\n  description TEXT,\n  frequency VARCHAR(50),\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create compliance_records table\nCREATE TABLE IF NOT EXISTS compliance_records (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  compliance_type_id UUID REFERENCES compliance_types(id) ON DELETE CASCADE,\n  record_date DATE NOT NULL,\n  status VARCHAR(50) NOT NULL,\n  notes TEXT,\n  recorded_by VARCHAR(255),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create par_levels table\nCREATE TABLE IF NOT EXISTS par_levels (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  ingredient_id UUID REFERENCES ingredients(id) ON DELETE CASCADE,\n  minimum_level DECIMAL(10,3) NOT NULL,\n  maximum_level DECIMAL(10,3) NOT NULL,\n  current_stock DECIMAL(10,3) DEFAULT 0,\n  unit VARCHAR(50) NOT NULL,\n  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create order_lists table\nCREATE TABLE IF NOT EXISTS order_lists (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  order_date DATE NOT NULL DEFAULT CURRENT_DATE,\n  supplier_id UUID REFERENCES suppliers(id),\n  status VARCHAR(50) DEFAULT 'pending',\n  total_amount DECIMAL(10,2),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create order_items table (not order_list_items)\nCREATE TABLE IF NOT EXISTS order_items (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  order_list_id UUID REFERENCES order_lists(id) ON DELETE CASCADE,\n  ingredient_id UUID REFERENCES ingredients(id) ON DELETE CASCADE,\n  quantity_ordered DECIMAL(10,3) NOT NULL,\n  unit VARCHAR(50) NOT NULL,\n  unit_price DECIMAL(10,4),\n  total_price DECIMAL(10,2),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create kitchen_sections table\nCREATE TABLE IF NOT EXISTS kitchen_sections (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  section_name VARCHAR(255) NOT NULL,\n  description TEXT,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create prep_lists table\nCREATE TABLE IF NOT EXISTS prep_lists (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  prep_date DATE NOT NULL DEFAULT CURRENT_DATE,\n  section_id UUID REFERENCES kitchen_sections(id),\n  status VARCHAR(50) DEFAULT 'pending',\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create prep_list_items table\nCREATE TABLE IF NOT EXISTS prep_list_items (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  prep_list_id UUID REFERENCES prep_lists(id) ON DELETE CASCADE,\n  ingredient_id UUID REFERENCES ingredients(id) ON DELETE CASCADE,\n  quantity_needed DECIMAL(10,3) NOT NULL,\n  unit VARCHAR(50) NOT NULL,\n  is_completed BOOLEAN DEFAULT false,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create ai_specials table\nCREATE TABLE IF NOT EXISTS ai_specials (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  special_name VARCHAR(255) NOT NULL,\n  description TEXT,\n  suggested_price DECIMAL(10,2),\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create ai_specials_ingredients table\nCREATE TABLE IF NOT EXISTS ai_specials_ingredients (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  ai_special_id UUID REFERENCES ai_specials(id) ON DELETE CASCADE,\n  ingredient_id UUID REFERENCES ingredients(id) ON DELETE CASCADE,\n  quantity DECIMAL(10,3) NOT NULL,\n  unit VARCHAR(50) NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n          `\n        });\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Database setup completed',\n      details: 'All required tables should now exist'\n    });\n\n  } catch (error) {\n    console.error('Database setup error:', error);\n    return NextResponse.json({\n      error: 'Failed to setup database',\n      message: 'Could not create missing tables',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,IAAI,CAAC,kIAAa,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,iCAAiC;QACjC,MAAM,uBAAuB,CAAC;;;;;;;;;;;;;;;;;;;IAmB9B,CAAC;QAED,kCAAkC;QAClC,MAAM,EAAE,OAAO,gBAAgB,EAAE,GAAG,MAAM,kIAAa,CACpD,IAAI,CAAC,eACL,MAAM,CAAC,MACP,KAAK,CAAC;QAET,IAAI,oBAAoB,iBAAiB,IAAI,KAAK,YAAY;YAC5D,iCAAiC;YACjC,QAAQ,GAAG,CAAC;YAEZ,uEAAuE;YACvE,IAAI;gBACF,MAAM,kIAAa,CAAC,GAAG,CAAC,QAAQ;oBAAE,KAAK;gBAAqB;YAC9D,EAAE,OAAO,UAAU;gBACjB,QAAQ,GAAG,CAAC;gBAEZ,oDAAoD;gBACpD,yDAAyD;gBACzD,OAAO,gJAAY,CAAC,IAAI,CAAC;oBACvB,SAAS;oBACT,SAAS;oBACT,cAAc;wBACZ,OAAO;wBACP,OAAO;wBACP,OAAO;wBACP,OAAO;oBACT;oBACA,WAAW,uBAAuB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAwMnC,CAAC;gBACH;YACF;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;YACT,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}