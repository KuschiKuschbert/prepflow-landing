{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/webapp/setup/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\n\nexport default function SetupPage() {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const populateIngredients = async () => {\n    setLoading(true);\n    setError(null);\n    setResult(null);\n\n    try {\n      const response = await fetch('/api/setup-database', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setResult(data.message);\n      } else {\n        setError(data.error || 'Failed to populate ingredients');\n      }\n    } catch (err) {\n      setError('Network error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">Database Setup</h1>\n      \n      <div className=\"bg-white p-6 rounded-lg shadow max-w-2xl\">\n        <h2 className=\"text-xl font-semibold mb-4\">Populate Sample Ingredients</h2>\n        <p className=\"text-gray-600 mb-6\">\n          This will add sample ingredients to your database to get you started with testing the COGS calculator.\n        </p>\n        \n        <button\n          onClick={populateIngredients}\n          disabled={loading}\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors\"\n        >\n          {loading ? 'Populating...' : 'Populate Ingredients'}\n        </button>\n\n        {result && (\n          <div className=\"mt-4 p-4 bg-green-50 border border-green-200 text-green-700 rounded\">\n            ✅ {result}\n          </div>\n        )}\n\n        {error && (\n          <div className=\"mt-4 p-4 bg-red-50 border border-red-200 text-red-700 rounded\">\n            ❌ {error}\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded\">\n          <h3 className=\"font-semibold text-blue-900 mb-2\">What this does:</h3>\n          <ul className=\"text-blue-700 text-sm space-y-1\">\n            <li>• Adds 10 sample ingredients to your database</li>\n            <li>• Includes realistic cost data and waste percentages</li>\n            <li>• Sets up proper storage and supplier information</li>\n            <li>• Ready for immediate COGS calculation testing</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,sBAAsB;QAC1B,WAAW;QACX,SAAS;QACT,UAAU;QAEV,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,uBAAuB;gBAClD,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,SAAS,EAAE,EAAE;gBACf,UAAU,KAAK,OAAO;YACxB,OAAO;gBACL,SAAS,KAAK,KAAK,IAAI;YACzB;QACF,EAAE,OAAO,KAAK;YACZ,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAwC;;;;;;0BAEtD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC;wBAAE,WAAU;kCAAqB;;;;;;kCAIlC,8OAAC;wBACC,SAAS;wBACT,UAAU;wBACV,WAAU;kCAET,UAAU,kBAAkB;;;;;;oBAG9B,wBACC,8OAAC;wBAAI,WAAU;;4BAAsE;4BAChF;;;;;;;oBAIN,uBACC,8OAAC;wBAAI,WAAU;;4BAAgE;4BAC1E;;;;;;;kCAIP,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAmC;;;;;;0CACjD,8OAAC;gCAAG,WAAU;;kDACZ,8OAAC;kDAAG;;;;;;kDACJ,8OAAC;kDAAG;;;;;;kDACJ,8OAAC;kDAAG;;;;;;kDACJ,8OAAC;kDAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMhB","debugId":null}}]
}