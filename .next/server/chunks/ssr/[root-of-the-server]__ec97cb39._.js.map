{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/components/GoogleAnalytics.tsx"],"sourcesContent":["'use client';\n\nimport Script from 'next/script';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useEffect, Suspense, useRef } from 'react';\n\ndeclare global {\n  interface Window {\n    gtag: (...args: any[]) => void;\n    dataLayer: any[];\n  }\n}\n\ninterface GoogleAnalyticsProps {\n  measurementId: string;\n}\n\nfunction GoogleAnalyticsInner({ measurementId }: GoogleAnalyticsProps) {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const hasInitialized = useRef(false);\n\n  // Initialize gtag function\n  const initializeGtag = () => {\n    if (typeof window !== 'undefined' && !window.gtag) {\n      window.dataLayer = window.dataLayer || [];\n      window.gtag = function() {\n        window.dataLayer.push(arguments);\n      };\n      \n      // Initialize with current date\n      window.gtag('js', new Date());\n      \n      // Configure with measurement ID\n      window.gtag('config', measurementId, {\n        page_title: document.title,\n        page_location: window.location.href,\n        send_page_view: false, // We'll handle page views manually\n      });\n      \n      hasInitialized.current = true;\n      console.log('‚úÖ Google Analytics initialized with ID:', measurementId);\n    }\n  };\n\n  // Track page views\n  useEffect(() => {\n    if (pathname && window.gtag && hasInitialized.current) {\n      // Track page view\n      window.gtag('event', 'page_view', {\n        page_title: document.title,\n        page_location: window.location.href,\n        page_path: pathname + (searchParams.toString() ? `?${searchParams.toString()}` : ''),\n      });\n      \n      console.log('üìä GA4 Page View tracked:', pathname);\n    }\n  }, [pathname, searchParams]);\n\n  // Initialize when component mounts\n  useEffect(() => {\n    // Wait for scripts to load\n    const checkGtag = () => {\n      if (typeof window !== 'undefined' && typeof window.gtag === 'function') {\n        initializeGtag();\n      } else {\n        // Retry after a short delay\n        setTimeout(checkGtag, 100);\n      }\n    };\n    \n    checkGtag();\n  }, [measurementId]);\n\n  return (\n    <>\n      {/* Load Google Analytics script */}\n      <Script\n        strategy=\"afterInteractive\"\n        src={`https://www.googletagmanager.com/gtag/js?id=${measurementId}`}\n        onLoad={() => {\n          console.log('üì• Google Analytics script loaded');\n          initializeGtag();\n        }}\n        onError={() => {\n          console.error('‚ùå Failed to load Google Analytics script');\n        }}\n      />\n      \n      {/* Initialize gtag function */}\n      <Script\n        id=\"google-analytics-init\"\n        strategy=\"afterInteractive\"\n        dangerouslySetInnerHTML={{\n          __html: `\n            window.dataLayer = window.dataLayer || [];\n            function gtag(){dataLayer.push(arguments);}\n            gtag('js', new Date());\n            gtag('config', '${measurementId}', {\n              page_title: document.title,\n              page_location: window.location.href,\n              send_page_view: false,\n            });\n            console.log('üîß Google Analytics gtag function initialized');\n          `,\n        }}\n        onLoad={() => {\n          console.log('‚úÖ Google Analytics initialization script loaded');\n          initializeGtag();\n        }}\n      />\n    </>\n  );\n}\n\nexport default function GoogleAnalytics({ measurementId }: GoogleAnalyticsProps) {\n  return (\n    <Suspense fallback={null}>\n      <GoogleAnalyticsInner measurementId={measurementId} />\n    </Suspense>\n  );\n}\n\n// Default export with your correct measurement ID\nexport { default as GoogleAnalyticsDefault } from './GoogleAnalytics';\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAuHA,kDAAkD;AAClD;AA5HA;;;;;AAiBA,SAAS,qBAAqB,EAAE,aAAa,EAAwB;IACnE,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE9B,2BAA2B;IAC3B,MAAM,iBAAiB;QACrB;;IAmBF;IAEA,mBAAmB;IACnB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,YAAY,OAAO,IAAI,IAAI,eAAe,OAAO,EAAE;YACrD,kBAAkB;YAClB,OAAO,IAAI,CAAC,SAAS,aAAa;gBAChC,YAAY,SAAS,KAAK;gBAC1B,eAAe,OAAO,QAAQ,CAAC,IAAI;gBACnC,WAAW,WAAW,CAAC,aAAa,QAAQ,KAAK,CAAC,CAAC,EAAE,aAAa,QAAQ,IAAI,GAAG,EAAE;YACrF;YAEA,QAAQ,GAAG,CAAC,6BAA6B;QAC3C;IACF,GAAG;QAAC;QAAU;KAAa;IAE3B,mCAAmC;IACnC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,2BAA2B;QAC3B,MAAM,YAAY;YAChB;;iBAEO;gBACL,4BAA4B;gBAC5B,WAAW,WAAW;YACxB;QACF;QAEA;IACF,GAAG;QAAC;KAAc;IAElB,qBACE;;0BAEE,8OAAC,8HAAA,CAAA,UAAM;gBACL,UAAS;gBACT,KAAK,CAAC,4CAA4C,EAAE,eAAe;gBACnE,QAAQ;oBACN,QAAQ,GAAG,CAAC;oBACZ;gBACF;gBACA,SAAS;oBACP,QAAQ,KAAK,CAAC;gBAChB;;;;;;0BAIF,8OAAC,8HAAA,CAAA,UAAM;gBACL,IAAG;gBACH,UAAS;gBACT,yBAAyB;oBACvB,QAAQ,CAAC;;;;4BAIS,EAAE,cAAc;;;;;;UAMlC,CAAC;gBACH;gBACA,QAAQ;oBACN,QAAQ,GAAG,CAAC;oBACZ;gBACF;;;;;;;;AAIR;AAEe,SAAS,gBAAgB,EAAE,aAAa,EAAwB;IAC7E,qBACE,8OAAC,qMAAA,CAAA,WAAQ;QAAC,UAAU;kBAClB,cAAA,8OAAC;YAAqB,eAAe;;;;;;;;;;;AAG3C","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/components/GoogleAnalyticsTest.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport default function GoogleAnalyticsTest() {\n  const [isGtagAvailable, setIsGtagAvailable] = useState(false);\n  const [testEventSent, setTestEventSent] = useState(false);\n\n  useEffect(() => {\n    // Check if gtag is available\n    const checkGtag = () => {\n      if (typeof window !== 'undefined' && typeof window.gtag === 'function') {\n        setIsGtagAvailable(true);\n        console.log('‚úÖ gtag function is available');\n      } else {\n        console.log('‚è≥ Waiting for gtag function...');\n        setTimeout(checkGtag, 500);\n      }\n    };\n    \n    checkGtag();\n  }, []);\n\n  const sendTestEvent = () => {\n    if (window.gtag) {\n      window.gtag('event', 'test_event', {\n        event_category: 'testing',\n        event_label: 'ga4_integration_test',\n        value: 1,\n        custom_parameter_test: 'true',\n        custom_parameter_timestamp: Date.now(),\n      });\n      \n      setTestEventSent(true);\n      console.log('üß™ Test event sent to Google Analytics');\n      \n      // Also test our analytics service\n      if (typeof window !== 'undefined' && window.gtag) {\n        window.gtag('event', 'analytics_test', {\n          event_category: 'testing',\n          event_label: 'analytics_service_test',\n          value: 1,\n        });\n        console.log('üß™ Analytics service test event sent');\n      }\n    }\n  };\n\n  if (process.env.NODE_ENV !== 'development') {\n    return null; // Only show in development\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-gray-900 border border-gray-700 rounded-lg p-4 text-white text-sm z-50 max-w-xs\">\n      <h4 className=\"font-semibold mb-2\">üîç GA4 Test Panel</h4>\n      \n      <div className=\"space-y-2 text-xs\">\n        <div className=\"flex items-center gap-2\">\n          <span>gtag Available:</span>\n          <span className={isGtagAvailable ? 'text-green-400' : 'text-red-400'}>\n            {isGtagAvailable ? '‚úÖ' : '‚ùå'}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <span>Test Event:</span>\n          <span className={testEventSent ? 'text-green-400' : 'text-gray-400'}>\n            {testEventSent ? '‚úÖ Sent' : '‚è≥ Pending'}\n          </span>\n        </div>\n        \n        <button\n          onClick={sendTestEvent}\n          disabled={!isGtagAvailable}\n          className=\"w-full mt-2 px-3 py-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded text-xs transition-colors\"\n        >\n          Send Test Event\n        </button>\n        \n        <div className=\"text-xs text-gray-400 mt-2\">\n          Check console for detailed logs\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,6BAA6B;QAC7B,MAAM,YAAY;YAChB;;iBAGO;gBACL,QAAQ,GAAG,CAAC;gBACZ,WAAW,WAAW;YACxB;QACF;QAEA;IACF,GAAG,EAAE;IAEL,MAAM,gBAAgB;QACpB,IAAI,OAAO,IAAI,EAAE;YACf,OAAO,IAAI,CAAC,SAAS,cAAc;gBACjC,gBAAgB;gBAChB,aAAa;gBACb,OAAO;gBACP,uBAAuB;gBACvB,4BAA4B,KAAK,GAAG;YACtC;YAEA,iBAAiB;YACjB,QAAQ,GAAG,CAAC;YAEZ,kCAAkC;YAClC;;QAQF;IACF;IAEA;;IAIA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAqB;;;;;;0BAEnC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCAAK,WAAW,kBAAkB,mBAAmB;0CACnD,kBAAkB,MAAM;;;;;;;;;;;;kCAI7B,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCAAK,WAAW,gBAAgB,mBAAmB;0CACjD,gBAAgB,WAAW;;;;;;;;;;;;kCAIhC,8OAAC;wBACC,SAAS;wBACT,UAAU,CAAC;wBACX,WAAU;kCACX;;;;;;kCAID,8OAAC;wBAAI,WAAU;kCAA6B;;;;;;;;;;;;;;;;;;AAMpD","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/components/GoogleTagManager.tsx"],"sourcesContent":["'use client';\n\nimport Script from 'next/script';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useEffect, useRef, Suspense } from 'react';\n\ndeclare global {\n  interface Window {\n    dataLayer: any[];\n    gtag: (...args: any[]) => void;\n  }\n}\n\ninterface GoogleTagManagerProps {\n  gtmId: string;\n  ga4MeasurementId?: string;\n}\n\nfunction GoogleTagManagerInner({ gtmId, ga4MeasurementId }: GoogleTagManagerProps) {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const hasInitialized = useRef(false);\n\n  // Initialize data layer\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      window.dataLayer = window.dataLayer || [];\n      \n      // Initialize data layer with page info\n      if (!hasInitialized.current) {\n        window.dataLayer.push({\n          'gtm.start': new Date().getTime(),\n          event: 'gtm.js',\n          page_title: document.title,\n          page_location: window.location.href,\n          page_path: pathname,\n        });\n        \n        hasInitialized.current = true;\n        console.log('‚úÖ GTM Data Layer initialized');\n      }\n    }\n  }, []);\n\n  // Track page views\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.dataLayer && hasInitialized.current) {\n      // Push page view to data layer\n      window.dataLayer.push({\n        event: 'page_view',\n        page_title: document.title,\n        page_location: window.location.href,\n        page_path: pathname + (searchParams.toString() ? `?${searchParams.toString()}` : ''),\n        page_referrer: document.referrer,\n        timestamp: Date.now(),\n      });\n      \n      console.log('üìä GTM Page View tracked:', pathname);\n    }\n  }, [pathname, searchParams]);\n\n  return (\n    <>\n      {/* Google Tag Manager (noscript) */}\n      <noscript>\n        <iframe\n          src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}\n          height=\"0\"\n          width=\"0\"\n          style={{ display: 'none', visibility: 'hidden' }}\n        />\n      </noscript>\n\n      {/* Google Tag Manager */}\n      <Script\n        id=\"gtm-script\"\n        strategy=\"afterInteractive\"\n        dangerouslySetInnerHTML={{\n          __html: `\n            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n            })(window,document,'script','dataLayer','${gtmId}');\n          `,\n        }}\n        onLoad={() => {\n          console.log('üì• Google Tag Manager loaded');\n          \n          // Initialize gtag function for backward compatibility\n          if (typeof window !== 'undefined' && !window.gtag) {\n            window.gtag = function() {\n              window.dataLayer.push(arguments);\n            };\n            console.log('üîß gtag function initialized for GTM compatibility');\n          }\n        }}\n        onError={() => {\n          console.error('‚ùå Failed to load Google Tag Manager');\n        }}\n      />\n    </>\n  );\n}\n\nexport default function GoogleTagManager({ gtmId, ga4MeasurementId }: GoogleTagManagerProps) {\n  return (\n    <Suspense fallback={null}>\n      <GoogleTagManagerInner gtmId={gtmId} ga4MeasurementId={ga4MeasurementId} />\n    </Suspense>\n  );\n}\n\n// Helper function to push events to GTM data layer\nexport function pushToDataLayer(data: any) {\n  if (typeof window !== 'undefined' && window.dataLayer) {\n    window.dataLayer.push(data);\n    console.log('üì§ Data pushed to GTM:', data);\n  }\n}\n\n// Helper function to track custom events\nexport function trackGTMEvent(eventName: string, parameters: Record<string, any> = {}) {\n  pushToDataLayer({\n    event: eventName,\n    ...parameters,\n    timestamp: Date.now(),\n  });\n}\n\n// Helper function to track conversions\nexport function trackGTMConversion(conversionType: string, value?: number, parameters: Record<string, any> = {}) {\n  pushToDataLayer({\n    event: 'conversion',\n    conversion_type: conversionType,\n    value: value,\n    ...parameters,\n    timestamp: Date.now(),\n  });\n}\n\n// Helper function to track user engagement\nexport function trackGTMEngagement(engagementType: string, parameters: Record<string, any> = {}) {\n  pushToDataLayer({\n    event: 'engagement',\n    engagement_type: engagementType,\n    ...parameters,\n    timestamp: Date.now(),\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;AAJA;;;;;AAkBA,SAAS,sBAAsB,EAAE,KAAK,EAAE,gBAAgB,EAAyB;IAC/E,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE9B,wBAAwB;IACxB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;;IAiBF,GAAG,EAAE;IAEL,mBAAmB;IACnB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;;IAaF,GAAG;QAAC;QAAU;KAAa;IAE3B,qBACE;;0BAEE,8OAAC;0BACC,cAAA,8OAAC;oBACC,KAAK,CAAC,4CAA4C,EAAE,OAAO;oBAC3D,QAAO;oBACP,OAAM;oBACN,OAAO;wBAAE,SAAS;wBAAQ,YAAY;oBAAS;;;;;;;;;;;0BAKnD,8OAAC,8HAAA,CAAA,UAAM;gBACL,IAAG;gBACH,UAAS;gBACT,yBAAyB;oBACvB,QAAQ,CAAC;;;;;qDAKkC,EAAE,MAAM;UACnD,CAAC;gBACH;gBACA,QAAQ;oBACN,QAAQ,GAAG,CAAC;oBAEZ,sDAAsD;oBACtD;;gBAMF;gBACA,SAAS;oBACP,QAAQ,KAAK,CAAC;gBAChB;;;;;;;;AAIR;AAEe,SAAS,iBAAiB,EAAE,KAAK,EAAE,gBAAgB,EAAyB;IACzF,qBACE,8OAAC,qMAAA,CAAA,WAAQ;QAAC,UAAU;kBAClB,cAAA,8OAAC;YAAsB,OAAO;YAAO,kBAAkB;;;;;;;;;;;AAG7D;AAGO,SAAS,gBAAgB,IAAS;IACvC;;AAIF;AAGO,SAAS,cAAc,SAAiB,EAAE,aAAkC,CAAC,CAAC;IACnF,gBAAgB;QACd,OAAO;QACP,GAAG,UAAU;QACb,WAAW,KAAK,GAAG;IACrB;AACF;AAGO,SAAS,mBAAmB,cAAsB,EAAE,KAAc,EAAE,aAAkC,CAAC,CAAC;IAC7G,gBAAgB;QACd,OAAO;QACP,iBAAiB;QACjB,OAAO;QACP,GAAG,UAAU;QACb,WAAW,KAAK,GAAG;IACrB;AACF;AAGO,SAAS,mBAAmB,cAAsB,EAAE,aAAkC,CAAC,CAAC;IAC7F,gBAAgB;QACd,OAAO;QACP,iBAAiB;QACjB,GAAG,UAAU;QACb,WAAW,KAAK,GAAG;IACrB;AACF","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/ab-testing-analytics.ts"],"sourcesContent":["// PrepFlow A/B Testing Analytics\n// Tracks variant performance, user behavior, and statistical significance\n\nexport interface ABTestVariant {\n  id: string;\n  name: string;\n  description: string;\n  trafficSplit: number; // Percentage of traffic (0-100)\n  isControl: boolean;\n}\n\nexport interface ABTestEvent {\n  testId: string;\n  variantId: string;\n  userId: string;\n  sessionId: string;\n  eventType: 'variant_assigned' | 'page_view' | 'conversion' | 'engagement';\n  eventValue?: number;\n  timestamp: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface ABTestResult {\n  testId: string;\n  variantId: string;\n  totalUsers: number;\n  conversions: number;\n  conversionRate: number;\n  averageOrderValue?: number;\n  revenue?: number;\n  statisticalSignificance?: number;\n}\n\nclass ABTestingAnalytics {\n  private tests: Map<string, ABTestVariant[]> = new Map();\n  private events: ABTestEvent[] = [];\n  private userVariants: Map<string, string> = new Map(); // userId -> variantId\n\n  constructor() {\n    this.initializeDefaultTests();\n  }\n\n  private initializeDefaultTests(): void {\n    // Define your A/B test variants\n    this.addTest('landing_page_variants', [\n      { id: 'control', name: 'Control', description: 'Original landing page', trafficSplit: 25, isControl: true },\n      { id: 'variant_a', name: 'Variant A', description: 'Alternative hero section', trafficSplit: 25, isControl: false },\n      { id: 'variant_b', name: 'Variant B', description: 'Different pricing layout', trafficSplit: 25, isControl: false },\n      { id: 'variant_c', name: 'Variant C', description: 'New CTA positioning', trafficSplit: 25, isControl: false },\n    ]);\n  }\n\n  public addTest(testId: string, variants: ABTestVariant[]): void {\n    this.tests.set(testId, variants);\n  }\n\n  public assignVariant(testId: string, userId: string): string {\n    console.log('üéØ Assigning variant for:', { testId, userId });\n    \n    const variants = this.tests.get(testId);\n    if (!variants) {\n      console.warn(`AB test ${testId} not found`);\n      return 'control';\n    }\n\n    // Check for existing persistent variant assignment\n    const persistentVariant = this.getPersistentVariant(userId);\n    if (persistentVariant) {\n      console.log('üéØ Returning existing persistent variant:', persistentVariant);\n      return persistentVariant;\n    }\n\n    // Assign new persistent variant based on traffic split\n    const assignedVariant = this.assignNewPersistentVariant(testId, userId, variants);\n    console.log('üéØ Assigned new persistent variant:', assignedVariant);\n    \n    // Track variant assignment\n    this.trackEvent({\n      testId,\n      variantId: assignedVariant,\n      userId,\n      sessionId: this.getSessionId(),\n      eventType: 'variant_assigned',\n      timestamp: Date.now(),\n      metadata: { \n        variant_name: variants.find(v => v.id === assignedVariant)?.name || assignedVariant, \n        is_control: assignedVariant === 'control',\n        assignment_type: 'persistent',\n        rotation_period: '1_month'\n      }\n    });\n\n    return assignedVariant;\n  }\n\n  private getPersistentVariant(userId: string): string | null {\n    if (typeof window === 'undefined') return null;\n    \n    try {\n      const stored = localStorage.getItem(`prepflow_variant_${userId}`);\n      if (!stored) {\n        console.log('üîç No persistent variant found for user:', userId);\n        return null;\n      }\n      \n      const variantData = JSON.parse(stored);\n      const assignmentDate = new Date(variantData.assignedAt);\n      const currentDate = new Date();\n      const daysSinceAssignment = (currentDate.getTime() - assignmentDate.getTime()) / (1000 * 60 * 60 * 24);\n      \n      console.log('üîç Persistent variant check:', {\n        userId,\n        variantId: variantData.variantId,\n        assignedAt: variantData.assignedAt,\n        daysSinceAssignment: Math.round(daysSinceAssignment),\n        isExpired: daysSinceAssignment >= 30\n      });\n      \n      // If less than 30 days, return the assigned variant\n      if (daysSinceAssignment < 30) {\n        console.log('‚úÖ Returning persistent variant:', variantData.variantId);\n        return variantData.variantId;\n      }\n      \n      // If more than 30 days, clear the assignment for rotation\n      console.log('üîÑ Variant expired, clearing for rotation');\n      localStorage.removeItem(`prepflow_variant_${userId}`);\n      return null;\n    } catch (error) {\n      console.warn('Error reading persistent variant:', error);\n      return null;\n    }\n  }\n\n  private assignNewPersistentVariant(testId: string, userId: string, variants: ABTestVariant[]): string {\n    // Assign variant based on traffic split\n    const random = Math.random() * 100;\n    let cumulativeSplit = 0;\n    \n    for (const variant of variants) {\n      cumulativeSplit += variant.trafficSplit;\n      if (random <= cumulativeSplit) {\n        const assignedVariant = variant.id;\n        \n        // Store persistent assignment\n        this.storePersistentVariant(userId, assignedVariant);\n        \n        return assignedVariant;\n      }\n    }\n\n    // Fallback to control\n    const assignedVariant = 'control';\n    this.storePersistentVariant(userId, assignedVariant);\n    return assignedVariant;\n  }\n\n  private storePersistentVariant(userId: string, variantId: string): void {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      const variantData = {\n        variantId,\n        assignedAt: new Date().toISOString(),\n        testId: 'landing_page_variants'\n      };\n      \n      localStorage.setItem(`prepflow_variant_${userId}`, JSON.stringify(variantData));\n      console.log('üíæ Stored persistent variant:', {\n        userId,\n        variantId,\n        assignedAt: variantData.assignedAt,\n        storageKey: `prepflow_variant_${userId}`\n      });\n    } catch (error) {\n      console.warn('Error storing persistent variant:', error);\n    }\n  }\n\n  public getCurrentVariant(testId: string, userId: string): string {\n    return this.assignVariant(testId, userId);\n  }\n\n  public trackEvent(event: ABTestEvent): void {\n    this.events.push(event);\n    \n    // Send to Google Analytics with variant context\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', event.eventType, {\n        event_category: 'ab_testing',\n        event_label: `${event.testId}_${event.variantId}`,\n        value: event.eventValue,\n        custom_parameter_test_id: event.testId,\n        custom_parameter_variant_id: event.variantId,\n        custom_parameter_user_id: event.userId,\n        custom_parameter_session_id: event.sessionId,\n        custom_parameter_metadata: JSON.stringify(event.metadata),\n      });\n    }\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('üß™ AB Test Event:', event);\n    }\n  }\n\n  public trackConversion(testId: string, userId: string, value?: number, metadata?: Record<string, any>): void {\n    const variantId = this.getCurrentVariant(testId, userId);\n    \n    this.trackEvent({\n      testId,\n      variantId,\n      userId,\n      sessionId: this.getSessionId(),\n      eventType: 'conversion',\n      eventValue: value,\n      timestamp: Date.now(),\n      metadata\n    });\n  }\n\n  public trackEngagement(testId: string, userId: string, engagementType: string, metadata?: Record<string, any>): void {\n    const variantId = this.getCurrentVariant(testId, userId);\n    \n    this.trackEvent({\n      testId,\n      variantId,\n      userId,\n      sessionId: this.getSessionId(),\n      eventType: 'engagement',\n      timestamp: Date.now(),\n      metadata: { engagement_type: engagementType, ...metadata }\n    });\n  }\n\n  public getTestResults(testId: string): ABTestResult[] {\n    const variants = this.tests.get(testId);\n    if (!variants) return [];\n\n    const results: ABTestResult[] = [];\n    \n    for (const variant of variants) {\n      const variantEvents = this.events.filter(e => \n        e.testId === testId && e.variantId === variant.id\n      );\n      \n      const totalUsers = new Set(variantEvents.map(e => e.userId)).size;\n      const conversions = variantEvents.filter(e => e.eventType === 'conversion').length;\n      const conversionRate = totalUsers > 0 ? (conversions / totalUsers) * 100 : 0;\n      \n      const conversionEvents = variantEvents.filter(e => e.eventType === 'conversion');\n      const totalValue = conversionEvents.reduce((sum, e) => sum + (e.eventValue || 0), 0);\n      const averageOrderValue = conversions > 0 ? totalValue / conversions : 0;\n      \n      results.push({\n        testId,\n        variantId: variant.id,\n        totalUsers,\n        conversions,\n        conversionRate,\n        averageOrderValue,\n        revenue: totalValue,\n        statisticalSignificance: this.calculateStatisticalSignificance(testId, variant.id)\n      });\n    }\n\n    return results.sort((a, b) => b.conversionRate - a.conversionRate);\n  }\n\n  private calculateStatisticalSignificance(testId: string, variantId: string): number {\n    // Simplified statistical significance calculation\n    // In production, you'd want to use a proper statistical library\n    const variantEvents = this.events.filter(e => \n      e.testId === testId && e.variantId === variantId\n    );\n    const controlEvents = this.events.filter(e => \n      e.testId === testId && e.variantId === 'control'\n    );\n    \n    const variantConversions = variantEvents.filter(e => e.eventType === 'conversion').length;\n    const variantTotal = variantEvents.length;\n    const controlConversions = controlEvents.filter(e => e.eventType === 'conversion').length;\n    const controlTotal = controlEvents.length;\n    \n    if (variantTotal === 0 || controlTotal === 0) return 0;\n    \n    const variantRate = variantConversions / variantTotal;\n    const controlRate = controlConversions / controlTotal;\n    \n    // Basic significance calculation (simplified)\n    const difference = Math.abs(variantRate - controlRate);\n    const significance = Math.min(difference * 100, 100); // 0-100 scale\n    \n    return Math.round(significance);\n  }\n\n  private getSessionId(): string {\n    // Generate or retrieve session ID\n    if (typeof window !== 'undefined') {\n      return sessionStorage.getItem('prepflow_session_id') || \n             'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    return 'server_session_' + Date.now();\n  }\n\n  public exportData(): {\n    tests: Map<string, ABTestVariant[]>;\n    events: ABTestEvent[];\n    userVariants: Map<string, string>;\n  } {\n    return {\n      tests: this.tests,\n      events: this.events,\n      userVariants: this.userVariants\n    };\n  }\n\n  public getActiveTests(): string[] {\n    return Array.from(this.tests.keys());\n  }\n\n  public getVariantInfo(testId: string, variantId: string): ABTestVariant | undefined {\n    const variants = this.tests.get(testId);\n    return variants?.find(v => v.id === variantId);\n  }\n\n  public getVariantAssignmentInfo(userId: string): {\n    variantId: string;\n    assignedAt: string;\n    daysRemaining: number;\n    isPersistent: boolean;\n  } | null {\n    if (typeof window === 'undefined') return null;\n    \n    try {\n      const stored = localStorage.getItem(`prepflow_variant_${userId}`);\n      if (!stored) return null;\n      \n      const variantData = JSON.parse(stored);\n      const assignmentDate = new Date(variantData.assignedAt);\n      const currentDate = new Date();\n      const daysSinceAssignment = (currentDate.getTime() - assignmentDate.getTime()) / (1000 * 60 * 60 * 24);\n      const daysRemaining = Math.max(0, 30 - daysSinceAssignment);\n      \n      return {\n        variantId: variantData.variantId,\n        assignedAt: variantData.assignedAt,\n        daysRemaining: Math.round(daysRemaining),\n        isPersistent: daysRemaining > 0\n      };\n    } catch (error) {\n      console.warn('Error reading variant assignment info:', error);\n      return null;\n    }\n  }\n}\n\n// Create singleton instance\nexport const abTestingAnalytics = new ABTestingAnalytics();\n\n// Export individual functions for easy use\nexport const assignVariant = abTestingAnalytics.assignVariant.bind(abTestingAnalytics);\nexport const getCurrentVariant = abTestingAnalytics.getCurrentVariant.bind(abTestingAnalytics);\nexport const trackConversion = abTestingAnalytics.trackConversion.bind(abTestingAnalytics);\nexport const trackEngagement = abTestingAnalytics.trackEngagement.bind(abTestingAnalytics);\nexport const getTestResults = abTestingAnalytics.getTestResults.bind(abTestingAnalytics);\nexport const getActiveTests = abTestingAnalytics.getActiveTests.bind(abTestingAnalytics);\nexport const getVariantInfo = abTestingAnalytics.getVariantInfo.bind(abTestingAnalytics);\nexport const getVariantAssignmentInfo = abTestingAnalytics.getVariantAssignmentInfo.bind(abTestingAnalytics);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 699, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/analytics.ts"],"sourcesContent":["// PrepFlow Analytics Service\n// Tracks conversions, user behavior, and performance metrics\n\nexport interface AnalyticsEvent {\n  action: string;\n  category: string;\n  label?: string;\n  value?: number;\n  timestamp: number;\n  sessionId: string;\n  userId?: string;\n  page: string;\n  referrer?: string;\n  userAgent?: string;\n}\n\nexport interface ConversionEvent {\n  type: 'cta_click' | 'demo_watch' | 'pricing_view' | 'signup_start' | 'purchase_complete' | 'exit_intent' | 'section_view' | 'scroll_milestone';\n  element: string;\n  page: string;\n  timestamp: number;\n  sessionId: string;\n  userId?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface PerformanceMetrics {\n  pageLoadTime: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  firstInputDelay: number;\n  cumulativeLayoutShift: number;\n  timestamp: number;\n  page: string;\n  sessionId: string;\n}\n\nclass PrepFlowAnalytics {\n  private sessionId: string;\n  private userId?: string;\n  private events: AnalyticsEvent[] = [];\n  private conversions: ConversionEvent[] = [];\n  private performance: PerformanceMetrics[] = [];\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.loadUserId();\n    this.initializeAnalytics();\n  }\n\n  private generateSessionId(): string {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  private loadUserId(): void {\n    if (typeof window !== 'undefined') {\n      const storedUserId = localStorage.getItem('prepflow_user_id');\n      this.userId = storedUserId || undefined;\n      \n      // Generate and store a stable user ID if none exists\n      if (!this.userId) {\n        this.userId = this.generateStableUserId();\n        localStorage.setItem('prepflow_user_id', this.userId);\n      }\n    }\n  }\n\n  private generateStableUserId(): string {\n    // Generate a stable user ID that persists across sessions\n    return 'user_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now().toString(36);\n  }\n\n  private initializeAnalytics(): void {\n    if (typeof window !== 'undefined') {\n      // Track page views\n      this.trackPageView();\n      \n      // Track performance metrics\n      this.trackPerformance();\n      \n      // Track user interactions\n      this.trackUserInteractions();\n      \n      // Track conversions\n      this.trackConversions();\n    }\n  }\n\n  private trackPageView(): void {\n    const event: AnalyticsEvent = {\n      action: 'page_view',\n      category: 'navigation',\n      timestamp: Date.now(),\n      sessionId: this.sessionId,\n      userId: this.userId,\n      page: window.location.pathname,\n      referrer: document.referrer,\n      userAgent: navigator.userAgent\n    };\n    \n    this.events.push(event);\n    this.sendToAnalytics(event);\n  }\n\n  private trackPerformance(): void {\n    if ('performance' in window) {\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (entry.entryType === 'navigation') {\n            const navEntry = entry as PerformanceNavigationTiming;\n            const metrics: PerformanceMetrics = {\n              pageLoadTime: navEntry.loadEventEnd - navEntry.loadEventStart,\n              firstContentfulPaint: 0,\n              largestContentfulPaint: 0,\n              firstInputDelay: 0,\n              cumulativeLayoutShift: 0,\n              timestamp: Date.now(),\n              page: window.location.pathname,\n              sessionId: this.sessionId\n            };\n            \n            this.performance.push(metrics);\n            this.sendPerformanceMetrics(metrics);\n          }\n        }\n      });\n      \n      observer.observe({ entryTypes: ['navigation'] });\n    }\n  }\n\n  private trackUserInteractions(): void {\n    // Track CTA clicks\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      const cta = target.closest('a, button');\n      \n      if (cta) {\n        const text = cta.textContent?.trim() || '';\n        const href = (cta as HTMLAnchorElement).href;\n        \n        // Track Gumroad purchase links\n        if (href && href.includes('gumroad.com/l/prepflow')) {\n          this.trackConversion({\n            type: 'cta_click',\n            element: 'gumroad_purchase',\n            page: window.location.pathname,\n            timestamp: Date.now(),\n            sessionId: this.sessionId,\n            userId: this.userId,\n            metadata: { href, text, action: 'purchase_start' }\n          });\n          \n          // Send enhanced GA4 event\n          if (typeof window !== 'undefined' && window.gtag) {\n            window.gtag('event', 'begin_checkout', {\n              currency: 'AUD',\n              value: 29.00,\n              items: [{\n                item_id: 'prepflow_app',\n                item_name: 'PrepFlow App',\n                price: 29.00,\n                quantity: 1\n              }]\n            });\n          }\n        }\n        \n        // Track demo/watch buttons\n        if (text.includes('Watch Demo') || text.includes('Demo')) {\n          this.trackConversion({\n            type: 'demo_watch',\n            element: text,\n            page: window.location.pathname,\n            timestamp: Date.now(),\n            sessionId: this.sessionId,\n            userId: this.userId,\n            metadata: { href, text, action: 'demo_start' }\n          });\n        }\n        \n        // Track general CTA clicks\n        if (text.includes('Get Started') || text.includes('Start')) {\n          this.trackConversion({\n            type: 'cta_click',\n            element: text,\n            page: window.location.pathname,\n            timestamp: Date.now(),\n            sessionId: this.sessionId,\n            userId: this.userId,\n            metadata: { href, text, action: 'cta_click' }\n          });\n        }\n      }\n    });\n\n    // Track scroll depth and key sections\n    let maxScrollDepth = 0;\n    const keySections = ['#features', '#demo', '#pricing', '#faq'];\n    \n    window.addEventListener('scroll', () => {\n      const scrollDepth = Math.round((window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100);\n      if (scrollDepth > maxScrollDepth) {\n        maxScrollDepth = scrollDepth;\n        if (maxScrollDepth % 25 === 0) { // Track every 25%\n          this.trackEvent('scroll_depth', 'engagement', `${maxScrollDepth}%`);\n        }\n      }\n      \n      // Track key section visibility\n      keySections.forEach(sectionId => {\n        const section = document.querySelector(sectionId);\n        if (section) {\n          const rect = section.getBoundingClientRect();\n          const isVisible = rect.top < window.innerHeight && rect.bottom > 0;\n          \n          if (isVisible && !section.hasAttribute('data-tracked')) {\n            section.setAttribute('data-tracked', 'true');\n            const sectionName = sectionId.replace('#', '');\n            \n            this.trackEvent('section_view', 'engagement', sectionName);\n            \n            // Send enhanced GA4 event for key sections\n            if (typeof window !== 'undefined' && window.gtag) {\n              if (sectionName === 'pricing') {\n                window.gtag('event', 'view_item_list', {\n                  item_list_id: 'pricing_section',\n                  item_list_name: 'Pricing Options'\n                });\n              } else if (sectionName === 'demo') {\n                window.gtag('event', 'view_item', {\n                  item_id: 'demo_video',\n                  item_name: 'PrepFlow Demo Video'\n                });\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n\n  private trackConversions(): void {\n    // Track demo video views\n    const demoVideo = document.querySelector('iframe[src*=\"youtube\"]');\n    if (demoVideo) {\n      // YouTube iframe tracking would require YouTube API integration\n      // For now, we'll track when the demo section comes into view\n      const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.trackConversion({\n              type: 'demo_watch',\n              element: 'demo_section',\n              page: window.location.pathname,\n              timestamp: Date.now(),\n              sessionId: this.sessionId,\n              userId: this.userId,\n              metadata: { section: 'demo' }\n            });\n            observer.disconnect();\n          }\n        });\n      });\n      observer.observe(demoVideo);\n    }\n  }\n\n  public trackEvent(action: string, category: string, label?: string, value?: number): void {\n    const event: AnalyticsEvent = {\n      action,\n      category,\n      label,\n      value,\n      timestamp: Date.now(),\n      sessionId: this.sessionId,\n      userId: this.userId,\n      page: typeof window !== 'undefined' ? window.location.pathname : '/',\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n      userAgent: typeof window !== 'undefined' ? navigator.userAgent : undefined\n    };\n    \n    this.events.push(event);\n    this.sendToAnalytics(event);\n  }\n\n  public trackConversion(conversion: ConversionEvent): void {\n    this.conversions.push(conversion);\n    this.sendConversionData(conversion);\n    \n    // Also track as a regular event\n    this.trackEvent('conversion', 'business', conversion.type, 1);\n  }\n\n  public trackPerformanceMetrics(metrics: Partial<PerformanceMetrics>): void {\n    const fullMetrics: PerformanceMetrics = {\n      pageLoadTime: 0,\n      firstContentfulPaint: 0,\n      largestContentfulPaint: 0,\n      firstInputDelay: 0,\n      cumulativeLayoutShift: 0,\n      timestamp: Date.now(),\n      page: typeof window !== 'undefined' ? window.location.pathname : '/',\n      sessionId: this.sessionId,\n      ...metrics\n    };\n    \n    this.performance.push(fullMetrics);\n    this.sendPerformanceMetrics(fullMetrics);\n  }\n\n  private sendToAnalytics(event: AnalyticsEvent): void {\n    // Send to Vercel Analytics (automatic)\n    // Send to custom analytics endpoint if needed\n    if (process.env.NODE_ENV === 'development') {\n      console.log('üìä Analytics Event:', event);\n    }\n    \n    // Send to Google Analytics 4\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', event.action, {\n        event_category: event.category,\n        event_label: event.label,\n        value: event.value,\n        custom_parameter_session_id: event.sessionId,\n        custom_parameter_user_id: event.userId,\n        custom_parameter_page: event.page,\n        custom_parameter_referrer: event.referrer,\n      });\n    }\n  }\n\n  private sendConversionData(conversion: ConversionEvent): void {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('üéØ Conversion Event:', conversion);\n    }\n    \n    // Send to Google Analytics 4\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'conversion', {\n        event_category: 'conversion',\n        event_label: conversion.type,\n        value: 1,\n        custom_parameter_element: conversion.element,\n        custom_parameter_page: conversion.page,\n        custom_parameter_session_id: conversion.sessionId,\n        custom_parameter_user_id: conversion.userId,\n        custom_parameter_metadata: JSON.stringify(conversion.metadata),\n      });\n    }\n    \n    // Send to conversion tracking endpoints\n    // Example: Facebook Pixel, Google Ads, etc.\n  }\n\n  private sendPerformanceMetrics(metrics: PerformanceMetrics): void {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('‚ö° Performance Metrics:', metrics);\n    }\n    \n    // Send to performance monitoring services\n    // Example: Sentry, LogRocket, etc.\n  }\n\n  public getSessionId(): string {\n    return this.sessionId;\n  }\n\n  public getUserId(): string | undefined {\n    return this.userId;\n  }\n\n  public setUserId(userId: string): void {\n    this.userId = userId;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('prepflow_user_id', userId);\n    }\n  }\n\n  public getEvents(): AnalyticsEvent[] {\n    return [...this.events];\n  }\n\n  public getConversions(): ConversionEvent[] {\n    return [...this.conversions];\n  }\n\n  public getPerformance(): PerformanceMetrics[] {\n    return [...this.performance];\n  }\n\n  public exportData(): {\n    sessionId: string;\n    userId?: string;\n    events: AnalyticsEvent[];\n    conversions: ConversionEvent[];\n    performance: PerformanceMetrics[];\n  } {\n    return {\n      sessionId: this.sessionId,\n      userId: this.userId,\n      events: this.events,\n      conversions: this.conversions,\n      performance: this.performance\n    };\n  }\n}\n\n// Create singleton instance\nexport const analytics = new PrepFlowAnalytics();\n\n// Export individual functions for easy use\nexport const trackEvent = analytics.trackEvent.bind(analytics);\nexport const trackConversion = analytics.trackConversion.bind(analytics);\nexport const trackPerformance = analytics.trackPerformanceMetrics.bind(analytics);\nexport const getSessionId = analytics.getSessionId.bind(analytics);\nexport const setUserId = analytics.setUserId.bind(analytics);\n\n// Export A/B testing functions\nexport { \n  assignVariant, \n  getCurrentVariant, \n  trackConversion as trackABConversion, \n  trackEngagement,\n  getTestResults,\n  getActiveTests,\n  getVariantInfo,\n  getVariantAssignmentInfo\n} from './ab-testing-analytics';\n"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,6DAA6D;;;;;;;;;AAia7D,+BAA+B;AAC/B;AA9XA,MAAM;IACI,UAAkB;IAClB,OAAgB;IAChB,SAA2B,EAAE,CAAC;IAC9B,cAAiC,EAAE,CAAC;IACpC,cAAoC,EAAE,CAAC;IAE/C,aAAc;QACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB;QACvC,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,mBAAmB;IAC1B;IAEQ,oBAA4B;QAClC,OAAO,aAAa,KAAK,GAAG,KAAK,MAAM,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG;IAC9E;IAEQ,aAAmB;QACzB;;IAUF;IAEQ,uBAA+B;QACrC,0DAA0D;QAC1D,OAAO,UAAU,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,KAAK,MAAM,KAAK,GAAG,GAAG,QAAQ,CAAC;IACvF;IAEQ,sBAA4B;QAClC;;IAaF;IAEQ,gBAAsB;QAC5B,MAAM,QAAwB;YAC5B,QAAQ;YACR,UAAU;YACV,WAAW,KAAK,GAAG;YACnB,WAAW,IAAI,CAAC,SAAS;YACzB,QAAQ,IAAI,CAAC,MAAM;YACnB,MAAM,OAAO,QAAQ,CAAC,QAAQ;YAC9B,UAAU,SAAS,QAAQ;YAC3B,WAAW,UAAU,SAAS;QAChC;QAEA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,IAAI,CAAC,eAAe,CAAC;IACvB;IAEQ,mBAAyB;QAC/B,IAAI,iBAAiB,QAAQ;YAC3B,MAAM,WAAW,IAAI,oBAAoB,CAAC;gBACxC,KAAK,MAAM,SAAS,KAAK,UAAU,GAAI;oBACrC,IAAI,MAAM,SAAS,KAAK,cAAc;wBACpC,MAAM,WAAW;wBACjB,MAAM,UAA8B;4BAClC,cAAc,SAAS,YAAY,GAAG,SAAS,cAAc;4BAC7D,sBAAsB;4BACtB,wBAAwB;4BACxB,iBAAiB;4BACjB,uBAAuB;4BACvB,WAAW,KAAK,GAAG;4BACnB,MAAM,OAAO,QAAQ,CAAC,QAAQ;4BAC9B,WAAW,IAAI,CAAC,SAAS;wBAC3B;wBAEA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;wBACtB,IAAI,CAAC,sBAAsB,CAAC;oBAC9B;gBACF;YACF;YAEA,SAAS,OAAO,CAAC;gBAAE,YAAY;oBAAC;iBAAa;YAAC;QAChD;IACF;IAEQ,wBAA8B;QACpC,mBAAmB;QACnB,SAAS,gBAAgB,CAAC,SAAS,CAAC;YAClC,MAAM,SAAS,EAAE,MAAM;YACvB,MAAM,MAAM,OAAO,OAAO,CAAC;YAE3B,IAAI,KAAK;gBACP,MAAM,OAAO,IAAI,WAAW,EAAE,UAAU;gBACxC,MAAM,OAAO,AAAC,IAA0B,IAAI;gBAE5C,+BAA+B;gBAC/B,IAAI,QAAQ,KAAK,QAAQ,CAAC,2BAA2B;oBACnD,IAAI,CAAC,eAAe,CAAC;wBACnB,MAAM;wBACN,SAAS;wBACT,MAAM,OAAO,QAAQ,CAAC,QAAQ;wBAC9B,WAAW,KAAK,GAAG;wBACnB,WAAW,IAAI,CAAC,SAAS;wBACzB,QAAQ,IAAI,CAAC,MAAM;wBACnB,UAAU;4BAAE;4BAAM;4BAAM,QAAQ;wBAAiB;oBACnD;oBAEA,0BAA0B;oBAC1B;;gBAYF;gBAEA,2BAA2B;gBAC3B,IAAI,KAAK,QAAQ,CAAC,iBAAiB,KAAK,QAAQ,CAAC,SAAS;oBACxD,IAAI,CAAC,eAAe,CAAC;wBACnB,MAAM;wBACN,SAAS;wBACT,MAAM,OAAO,QAAQ,CAAC,QAAQ;wBAC9B,WAAW,KAAK,GAAG;wBACnB,WAAW,IAAI,CAAC,SAAS;wBACzB,QAAQ,IAAI,CAAC,MAAM;wBACnB,UAAU;4BAAE;4BAAM;4BAAM,QAAQ;wBAAa;oBAC/C;gBACF;gBAEA,2BAA2B;gBAC3B,IAAI,KAAK,QAAQ,CAAC,kBAAkB,KAAK,QAAQ,CAAC,UAAU;oBAC1D,IAAI,CAAC,eAAe,CAAC;wBACnB,MAAM;wBACN,SAAS;wBACT,MAAM,OAAO,QAAQ,CAAC,QAAQ;wBAC9B,WAAW,KAAK,GAAG;wBACnB,WAAW,IAAI,CAAC,SAAS;wBACzB,QAAQ,IAAI,CAAC,MAAM;wBACnB,UAAU;4BAAE;4BAAM;4BAAM,QAAQ;wBAAY;oBAC9C;gBACF;YACF;QACF;QAEA,sCAAsC;QACtC,IAAI,iBAAiB;QACrB,MAAM,cAAc;YAAC;YAAa;YAAS;YAAY;SAAO;QAE9D,OAAO,gBAAgB,CAAC,UAAU;YAChC,MAAM,cAAc,KAAK,KAAK,CAAC,AAAC,OAAO,OAAO,GAAG,CAAC,SAAS,eAAe,CAAC,YAAY,GAAG,OAAO,WAAW,IAAK;YACjH,IAAI,cAAc,gBAAgB;gBAChC,iBAAiB;gBACjB,IAAI,iBAAiB,OAAO,GAAG;oBAC7B,IAAI,CAAC,UAAU,CAAC,gBAAgB,cAAc,GAAG,eAAe,CAAC,CAAC;gBACpE;YACF;YAEA,+BAA+B;YAC/B,YAAY,OAAO,CAAC,CAAA;gBAClB,MAAM,UAAU,SAAS,aAAa,CAAC;gBACvC,IAAI,SAAS;oBACX,MAAM,OAAO,QAAQ,qBAAqB;oBAC1C,MAAM,YAAY,KAAK,GAAG,GAAG,OAAO,WAAW,IAAI,KAAK,MAAM,GAAG;oBAEjE,IAAI,aAAa,CAAC,QAAQ,YAAY,CAAC,iBAAiB;wBACtD,QAAQ,YAAY,CAAC,gBAAgB;wBACrC,MAAM,cAAc,UAAU,OAAO,CAAC,KAAK;wBAE3C,IAAI,CAAC,UAAU,CAAC,gBAAgB,cAAc;wBAE9C,2CAA2C;wBAC3C;;oBAaF;gBACF;YACF;QACF;IACF;IAEQ,mBAAyB;QAC/B,yBAAyB;QACzB,MAAM,YAAY,SAAS,aAAa,CAAC;QACzC,IAAI,WAAW;YACb,gEAAgE;YAChE,6DAA6D;YAC7D,MAAM,WAAW,IAAI,qBAAqB,CAAC;gBACzC,QAAQ,OAAO,CAAC,CAAC;oBACf,IAAI,MAAM,cAAc,EAAE;wBACxB,IAAI,CAAC,eAAe,CAAC;4BACnB,MAAM;4BACN,SAAS;4BACT,MAAM,OAAO,QAAQ,CAAC,QAAQ;4BAC9B,WAAW,KAAK,GAAG;4BACnB,WAAW,IAAI,CAAC,SAAS;4BACzB,QAAQ,IAAI,CAAC,MAAM;4BACnB,UAAU;gCAAE,SAAS;4BAAO;wBAC9B;wBACA,SAAS,UAAU;oBACrB;gBACF;YACF;YACA,SAAS,OAAO,CAAC;QACnB;IACF;IAEO,WAAW,MAAc,EAAE,QAAgB,EAAE,KAAc,EAAE,KAAc,EAAQ;QACxF,MAAM,QAAwB;YAC5B;YACA;YACA;YACA;YACA,WAAW,KAAK,GAAG;YACnB,WAAW,IAAI,CAAC,SAAS;YACzB,QAAQ,IAAI,CAAC,MAAM;YACnB,MAAM,sCAAgC,0BAA2B;YACjE,UAAU,sCAAgC,0BAAoB;YAC9D,WAAW,sCAAgC,0BAAsB;QACnE;QAEA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,IAAI,CAAC,eAAe,CAAC;IACvB;IAEO,gBAAgB,UAA2B,EAAQ;QACxD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,kBAAkB,CAAC;QAExB,gCAAgC;QAChC,IAAI,CAAC,UAAU,CAAC,cAAc,YAAY,WAAW,IAAI,EAAE;IAC7D;IAEO,wBAAwB,OAAoC,EAAQ;QACzE,MAAM,cAAkC;YACtC,cAAc;YACd,sBAAsB;YACtB,wBAAwB;YACxB,iBAAiB;YACjB,uBAAuB;YACvB,WAAW,KAAK,GAAG;YACnB,MAAM,sCAAgC,0BAA2B;YACjE,WAAW,IAAI,CAAC,SAAS;YACzB,GAAG,OAAO;QACZ;QAEA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,sBAAsB,CAAC;IAC9B;IAEQ,gBAAgB,KAAqB,EAAQ;QACnD,uCAAuC;QACvC,8CAA8C;QAC9C,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,uBAAuB;QACrC;QAEA,6BAA6B;QAC7B;;IAWF;IAEQ,mBAAmB,UAA2B,EAAQ;QAC5D,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,wBAAwB;QACtC;QAEA,6BAA6B;QAC7B;;IAaA,wCAAwC;IACxC,4CAA4C;IAC9C;IAEQ,uBAAuB,OAA2B,EAAQ;QAChE,wCAA4C;YAC1C,QAAQ,GAAG,CAAC,0BAA0B;QACxC;IAEA,0CAA0C;IAC1C,mCAAmC;IACrC;IAEO,eAAuB;QAC5B,OAAO,IAAI,CAAC,SAAS;IACvB;IAEO,YAAgC;QACrC,OAAO,IAAI,CAAC,MAAM;IACpB;IAEO,UAAU,MAAc,EAAQ;QACrC,IAAI,CAAC,MAAM,GAAG;QACd;;IAGF;IAEO,YAA8B;QACnC,OAAO;eAAI,IAAI,CAAC,MAAM;SAAC;IACzB;IAEO,iBAAoC;QACzC,OAAO;eAAI,IAAI,CAAC,WAAW;SAAC;IAC9B;IAEO,iBAAuC;QAC5C,OAAO;eAAI,IAAI,CAAC,WAAW;SAAC;IAC9B;IAEO,aAML;QACA,OAAO;YACL,WAAW,IAAI,CAAC,SAAS;YACzB,QAAQ,IAAI,CAAC,MAAM;YACnB,QAAQ,IAAI,CAAC,MAAM;YACnB,aAAa,IAAI,CAAC,WAAW;YAC7B,aAAa,IAAI,CAAC,WAAW;QAC/B;IACF;AACF;AAGO,MAAM,YAAY,IAAI;AAGtB,MAAM,aAAa,UAAU,UAAU,CAAC,IAAI,CAAC;AAC7C,MAAM,kBAAkB,UAAU,eAAe,CAAC,IAAI,CAAC;AACvD,MAAM,mBAAmB,UAAU,uBAAuB,CAAC,IAAI,CAAC;AAChE,MAAM,eAAe,UAAU,YAAY,CAAC,IAAI,CAAC;AACjD,MAAM,YAAY,UAAU,SAAS,CAAC,IAAI,CAAC","debugId":null}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/performance-budgets.ts"],"sourcesContent":["// Performance Budgets Implementation for PrepFlow\n// Automated performance budget enforcement with Lighthouse CI\n\n// Performance budget configuration\nexport const PERFORMANCE_BUDGETS = {\n  // Core Web Vitals budgets\n  coreWebVitals: {\n    lcp: 2500,        // Largest Contentful Paint (ms)\n    fid: 100,         // First Input Delay (ms)\n    cls: 0.1,         // Cumulative Layout Shift\n    fcp: 1800,        // First Contentful Paint (ms)\n    tti: 3800,        // Time to Interactive (ms)\n    si: 3000,         // Speed Index (ms)\n    tbt: 300,         // Total Blocking Time (ms)\n  },\n  \n  // Resource budgets\n  resources: {\n    totalSize: 500000,        // Total bundle size (bytes)\n    jsSize: 200000,           // JavaScript bundle size (bytes)\n    cssSize: 50000,           // CSS bundle size (bytes)\n    imageSize: 100000,        // Image bundle size (bytes)\n    fontSize: 30000,          // Font bundle size (bytes)\n    thirdPartySize: 100000,   // Third-party scripts (bytes)\n  },\n  \n  // Network budgets\n  network: {\n    totalRequests: 50,        // Total number of requests\n    jsRequests: 10,           // JavaScript requests\n    cssRequests: 3,           // CSS requests\n    imageRequests: 15,        // Image requests\n    fontRequests: 5,          // Font requests\n    thirdPartyRequests: 10,   // Third-party requests\n  },\n  \n  // Performance scores\n  scores: {\n    performance: 80,           // Lighthouse Performance score\n    accessibility: 90,         // Lighthouse Accessibility score\n    bestPractices: 80,         // Lighthouse Best Practices score\n    seo: 80,                   // Lighthouse SEO score\n  },\n  \n  // Page-specific budgets\n  pages: {\n    landing: {\n      lcp: 2000,\n      fid: 80,\n      cls: 0.08,\n      totalSize: 400000,\n      jsSize: 150000,\n    },\n    webapp: {\n      lcp: 3000,\n      fid: 100,\n      cls: 0.1,\n      totalSize: 600000,\n      jsSize: 250000,\n    },\n    auth: {\n      lcp: 1500,\n      fid: 60,\n      cls: 0.05,\n      totalSize: 200000,\n      jsSize: 100000,\n    },\n  },\n};\n\n// Performance budget manager\nexport class PerformanceBudgetManager {\n  private static instance: PerformanceBudgetManager;\n  private violations: PerformanceViolation[] = [];\n  private budgets = PERFORMANCE_BUDGETS;\n  \n  static getInstance(): PerformanceBudgetManager {\n    if (!PerformanceBudgetManager.instance) {\n      PerformanceBudgetManager.instance = new PerformanceBudgetManager();\n    }\n    return PerformanceBudgetManager.instance;\n  }\n  \n  // Check performance budget against metrics\n  checkBudget(metrics: PerformanceMetrics, pageType: string = 'landing'): PerformanceBudgetResult {\n    const violations: PerformanceViolation[] = [];\n    const pageBudgets = this.budgets.pages[pageType as keyof typeof this.budgets.pages] || this.budgets.pages.landing;\n    \n    // Check Core Web Vitals\n    if (metrics.lcp && metrics.lcp > pageBudgets.lcp) {\n      violations.push({\n        metric: 'lcp',\n        actual: metrics.lcp,\n        budget: pageBudgets.lcp,\n        severity: this.getSeverity(metrics.lcp, pageBudgets.lcp),\n        message: `LCP ${metrics.lcp}ms exceeds budget of ${pageBudgets.lcp}ms`,\n      });\n    }\n    \n    if (metrics.fid && metrics.fid > pageBudgets.fid) {\n      violations.push({\n        metric: 'fid',\n        actual: metrics.fid,\n        budget: pageBudgets.fid,\n        severity: this.getSeverity(metrics.fid, pageBudgets.fid),\n        message: `FID ${metrics.fid}ms exceeds budget of ${pageBudgets.fid}ms`,\n      });\n    }\n    \n    if (metrics.cls && metrics.cls > pageBudgets.cls) {\n      violations.push({\n        metric: 'cls',\n        actual: metrics.cls,\n        budget: pageBudgets.cls,\n        severity: this.getSeverity(metrics.cls, pageBudgets.cls),\n        message: `CLS ${metrics.cls} exceeds budget of ${pageBudgets.cls}`,\n      });\n    }\n    \n    // Check resource budgets\n    if (metrics.resources) {\n      if (metrics.resources.totalSize > pageBudgets.totalSize) {\n        violations.push({\n          metric: 'totalSize',\n          actual: metrics.resources.totalSize,\n          budget: pageBudgets.totalSize,\n          severity: this.getSeverity(metrics.resources.totalSize, pageBudgets.totalSize),\n          message: `Total size ${metrics.resources.totalSize} bytes exceeds budget of ${pageBudgets.totalSize} bytes`,\n        });\n      }\n      \n      if (metrics.resources.jsSize > pageBudgets.jsSize) {\n        violations.push({\n          metric: 'jsSize',\n          actual: metrics.resources.jsSize,\n          budget: pageBudgets.jsSize,\n          severity: this.getSeverity(metrics.resources.jsSize, pageBudgets.jsSize),\n          message: `JavaScript size ${metrics.resources.jsSize} bytes exceeds budget of ${pageBudgets.jsSize} bytes`,\n        });\n      }\n    }\n    \n    // Store violations\n    this.violations.push(...violations);\n    \n    return {\n      passed: violations.length === 0,\n      violations,\n      score: this.calculateScore(violations),\n      timestamp: Date.now(),\n      pageType,\n    };\n  }\n  \n  // Get severity level for violation\n  private getSeverity(actual: number, budget: number): 'low' | 'medium' | 'high' | 'critical' {\n    const ratio = actual / budget;\n    \n    if (ratio >= 2) return 'critical';\n    if (ratio >= 1.5) return 'high';\n    if (ratio >= 1.2) return 'medium';\n    return 'low';\n  }\n  \n  // Calculate performance score\n  private calculateScore(violations: PerformanceViolation[]): number {\n    if (violations.length === 0) return 100;\n    \n    const criticalViolations = violations.filter(v => v.severity === 'critical').length;\n    const highViolations = violations.filter(v => v.severity === 'high').length;\n    const mediumViolations = violations.filter(v => v.severity === 'medium').length;\n    const lowViolations = violations.filter(v => v.severity === 'low').length;\n    \n    // Calculate score based on violation severity\n    const score = Math.max(0, 100 - (\n      criticalViolations * 25 +\n      highViolations * 15 +\n      mediumViolations * 10 +\n      lowViolations * 5\n    ));\n    \n    return Math.round(score);\n  }\n  \n  // Get all violations\n  getViolations(): PerformanceViolation[] {\n    return [...this.violations];\n  }\n  \n  // Get violations by severity\n  getViolationsBySeverity(severity: 'low' | 'medium' | 'high' | 'critical'): PerformanceViolation[] {\n    return this.violations.filter(v => v.severity === severity);\n  }\n  \n  // Clear violations\n  clearViolations(): void {\n    this.violations = [];\n  }\n  \n  // Generate budget report\n  generateBudgetReport(): PerformanceBudgetReport {\n    const totalViolations = this.violations.length;\n    const criticalViolations = this.getViolationsBySeverity('critical').length;\n    const highViolations = this.getViolationsBySeverity('high').length;\n    const mediumViolations = this.getViolationsBySeverity('medium').length;\n    const lowViolations = this.getViolationsBySeverity('low').length;\n    \n    return {\n      totalViolations,\n      criticalViolations,\n      highViolations,\n      mediumViolations,\n      lowViolations,\n      score: this.calculateScore(this.violations),\n      violations: this.violations,\n      timestamp: Date.now(),\n    };\n  }\n  \n  // Check if budget is within acceptable limits\n  isWithinBudget(metrics: PerformanceMetrics, pageType: string = 'landing'): boolean {\n    const result = this.checkBudget(metrics, pageType);\n    return result.passed;\n  }\n  \n  // Get budget recommendations\n  getBudgetRecommendations(violations: PerformanceViolation[]): string[] {\n    const recommendations: string[] = [];\n    \n    violations.forEach(violation => {\n      switch (violation.metric) {\n        case 'lcp':\n          recommendations.push('Optimize images, reduce server response time, or eliminate render-blocking resources');\n          break;\n        case 'fid':\n          recommendations.push('Reduce JavaScript execution time or break up long tasks');\n          break;\n        case 'cls':\n          recommendations.push('Add size attributes to images and videos, avoid inserting content above existing content');\n          break;\n        case 'totalSize':\n          recommendations.push('Enable compression, remove unused code, or optimize images');\n          break;\n        case 'jsSize':\n          recommendations.push('Code splitting, tree shaking, or remove unused JavaScript');\n          break;\n        case 'cssSize':\n          recommendations.push('Remove unused CSS or inline critical CSS');\n          break;\n        case 'imageSize':\n          recommendations.push('Optimize images, use modern formats (WebP/AVIF), or implement lazy loading');\n          break;\n        case 'fontSize':\n          recommendations.push('Font subsetting, preloading, or use system fonts');\n          break;\n      }\n    });\n    \n    return [...new Set(recommendations)]; // Remove duplicates\n  }\n}\n\n// Performance violation interface\nexport interface PerformanceViolation {\n  metric: string;\n  actual: number;\n  budget: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp?: number;\n}\n\n// Performance budget result interface\nexport interface PerformanceBudgetResult {\n  passed: boolean;\n  violations: PerformanceViolation[];\n  score: number;\n  timestamp: number;\n  pageType: string;\n}\n\n// Performance budget report interface\nexport interface PerformanceBudgetReport {\n  totalViolations: number;\n  criticalViolations: number;\n  highViolations: number;\n  mediumViolations: number;\n  lowViolations: number;\n  score: number;\n  violations: PerformanceViolation[];\n  timestamp: number;\n}\n\n// Performance metrics interface\nexport interface PerformanceMetrics {\n  lcp?: number | null;\n  fid?: number | null;\n  cls?: number | null;\n  fcp?: number | null;\n  tti?: number | null;\n  si?: number | null;\n  tbt?: number | null;\n  resources?: {\n    totalSize: number;\n    jsSize: number;\n    cssSize: number;\n    imageSize: number;\n    fontSize: number;\n    thirdPartySize: number;\n  };\n  network?: {\n    totalRequests: number;\n    jsRequests: number;\n    cssRequests: number;\n    imageRequests: number;\n    fontRequests: number;\n    thirdPartyRequests: number;\n  };\n}\n\n// Export singleton instance\nexport const performanceBudgetManager = PerformanceBudgetManager.getInstance();\n\n// Performance budget monitoring\nexport function trackPerformanceBudget(metrics: PerformanceMetrics, pageType: string = 'landing'): void {\n  const result = performanceBudgetManager.checkBudget(metrics, pageType);\n  \n  if (!result.passed) {\n    console.warn('üö® Performance budget violations detected:', result.violations);\n    \n    // Send to analytics\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'performance_budget_violation', {\n        event_category: 'performance',\n        event_label: 'budget_violation',\n        value: result.score,\n        custom_parameter_violations: result.violations.length,\n        custom_parameter_page_type: pageType,\n        custom_parameter_score: result.score,\n      });\n    }\n  }\n}\n\n// Performance budget alerting\nexport function alertPerformanceBudgetViolations(violations: PerformanceViolation[]): void {\n  const criticalViolations = violations.filter(v => v.severity === 'critical');\n  const highViolations = violations.filter(v => v.severity === 'high');\n  \n  if (criticalViolations.length > 0) {\n    console.error('üö® CRITICAL performance budget violations:', criticalViolations);\n    \n    // Send critical alert\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'critical_performance_violation', {\n        event_category: 'performance',\n        event_label: 'critical_violation',\n        value: criticalViolations.length,\n        custom_parameter_violations: criticalViolations.map(v => v.metric),\n      });\n    }\n  }\n  \n  if (highViolations.length > 0) {\n    console.warn('‚ö†Ô∏è HIGH performance budget violations:', highViolations);\n    \n    // Send high priority alert\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'high_performance_violation', {\n        event_category: 'performance',\n        event_label: 'high_violation',\n        value: highViolations.length,\n        custom_parameter_violations: highViolations.map(v => v.metric),\n      });\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/advanced-rum.ts"],"sourcesContent":["// Advanced Real User Monitoring (RUM) for PrepFlow\n// Implements comprehensive performance monitoring with error tracking\n\n// RUM configuration\nexport const RUM_CONFIG = {\n  // Sampling rates\n  sampling: {\n    performance: 0.1,      // 10% of users for performance monitoring\n    errors: 1.0,           // 100% of users for error tracking\n    userInteractions: 0.05, // 5% of users for interaction tracking\n    resourceTiming: 0.2,   // 20% of users for resource timing\n  },\n  \n  // Performance thresholds\n  thresholds: {\n    lcp: 2500,             // Largest Contentful Paint (ms)\n    fid: 100,              // First Input Delay (ms)\n    cls: 0.1,              // Cumulative Layout Shift\n    fcp: 1800,             // First Contentful Paint (ms)\n    tti: 3800,             // Time to Interactive (ms)\n    si: 3000,              // Speed Index (ms)\n    tbt: 300,              // Total Blocking Time (ms)\n  },\n  \n  // Error tracking\n  errorTracking: {\n    enabled: true,\n    maxErrors: 100,        // Maximum errors to track per session\n    errorTimeout: 5000,    // Error timeout in ms\n  },\n  \n  // Session tracking\n  session: {\n    timeout: 30 * 60 * 1000, // 30 minutes\n    maxDuration: 24 * 60 * 60 * 1000, // 24 hours\n  },\n};\n\n// RUM data interfaces\nexport interface RUMData {\n  sessionId: string;\n  userId?: string;\n  page: string;\n  timestamp: number;\n  userAgent: string;\n  viewport: { width: number; height: number };\n  connection: {\n    effectiveType: string;\n    downlink: number;\n    rtt: number;\n  };\n  performance: PerformanceMetrics;\n  errors: ErrorData[];\n  interactions: InteractionData[];\n  resources: ResourceData[];\n  navigation: NavigationData;\n}\n\nexport interface PerformanceMetrics {\n  lcp?: number;\n  fid?: number;\n  cls?: number;\n  fcp?: number;\n  tti?: number;\n  si?: number;\n  tbt?: number;\n  memory?: {\n    usedJSHeapSize: number;\n    totalJSHeapSize: number;\n    jsHeapSizeLimit: number;\n  };\n}\n\nexport interface ErrorData {\n  message: string;\n  stack?: string;\n  filename?: string;\n  lineno?: number;\n  colno?: number;\n  timestamp: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  context?: Record<string, any>;\n}\n\nexport interface InteractionData {\n  type: 'click' | 'scroll' | 'keydown' | 'resize' | 'focus' | 'blur';\n  target: string;\n  timestamp: number;\n  x?: number;\n  y?: number;\n  key?: string;\n  deltaX?: number;\n  deltaY?: number;\n}\n\nexport interface ResourceData {\n  name: string;\n  type: string;\n  duration: number;\n  size: number;\n  startTime: number;\n  endTime: number;\n  success: boolean;\n  error?: string;\n}\n\nexport interface NavigationData {\n  type: 'navigate' | 'reload' | 'back_forward' | 'prerender';\n  startTime: number;\n  endTime: number;\n  duration: number;\n  redirectCount: number;\n  transferSize: number;\n  encodedBodySize: number;\n  decodedBodySize: number;\n}\n\n// Advanced RUM manager\nexport class AdvancedRUMManager {\n  private static instance: AdvancedRUMManager;\n  private sessionId: string;\n  private userId?: string;\n  private startTime: number;\n  private data: RUMData;\n  private observers: Map<string, PerformanceObserver> = new Map();\n  private errorCount = 0;\n  private isInitialized = false;\n  \n  static getInstance(): AdvancedRUMManager {\n    if (!AdvancedRUMManager.instance) {\n      AdvancedRUMManager.instance = new AdvancedRUMManager();\n    }\n    return AdvancedRUMManager.instance;\n  }\n  \n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.startTime = Date.now();\n    this.data = this.initializeRUMData();\n  }\n  \n  // Initialize RUM monitoring\n  initialize(): void {\n    if (this.isInitialized || typeof window === 'undefined') return;\n    \n    console.log('üîç Initializing Advanced RUM monitoring...');\n    \n    // Initialize performance monitoring\n    this.initializePerformanceMonitoring();\n    \n    // Initialize error tracking\n    this.initializeErrorTracking();\n    \n    // Initialize interaction tracking\n    this.initializeInteractionTracking();\n    \n    // Initialize resource monitoring\n    this.initializeResourceMonitoring();\n    \n    // Initialize navigation monitoring\n    this.initializeNavigationMonitoring();\n    \n    // Initialize session management\n    this.initializeSessionManagement();\n    \n    this.isInitialized = true;\n    console.log('‚úÖ Advanced RUM monitoring initialized');\n  }\n  \n  // Initialize performance monitoring\n  private initializePerformanceMonitoring(): void {\n    if (Math.random() > RUM_CONFIG.sampling.performance) return;\n    \n    // LCP Observer\n    if ('PerformanceObserver' in window) {\n      const lcpObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1] as PerformanceEntry;\n        if (lastEntry) {\n          this.data.performance.lcp = lastEntry.startTime;\n          this.trackPerformanceMetric('lcp', lastEntry.startTime);\n        }\n      });\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n      this.observers.set('lcp', lcpObserver);\n    }\n    \n    // FID Observer\n    if ('PerformanceObserver' in window) {\n      const fidObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry: any) => {\n          const fid = entry.processingStart - entry.startTime;\n          this.data.performance.fid = fid;\n          this.trackPerformanceMetric('fid', fid);\n        });\n      });\n      fidObserver.observe({ entryTypes: ['first-input'] });\n      this.observers.set('fid', fidObserver);\n    }\n    \n    // CLS Observer\n    if ('PerformanceObserver' in window) {\n      let clsValue = 0;\n      const clsObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry: any) => {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n          }\n        });\n      });\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\n      this.observers.set('cls', clsObserver);\n      \n      // Track CLS after a delay\n      setTimeout(() => {\n        this.data.performance.cls = clsValue;\n        this.trackPerformanceMetric('cls', clsValue);\n      }, 5000);\n    }\n    \n    // Memory monitoring\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      this.data.performance.memory = {\n        usedJSHeapSize: memory.usedJSHeapSize,\n        totalJSHeapSize: memory.totalJSHeapSize,\n        jsHeapSizeLimit: memory.jsHeapSizeLimit,\n      };\n    }\n  }\n  \n  // Initialize error tracking\n  private initializeErrorTracking(): void {\n    if (!RUM_CONFIG.errorTracking.enabled) return;\n    \n    // Global error handler\n    window.addEventListener('error', (event) => {\n      this.trackError({\n        message: event.message,\n        stack: event.error?.stack,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        timestamp: Date.now(),\n        severity: this.getErrorSeverity(event.error),\n        context: {\n          url: window.location.href,\n          userAgent: navigator.userAgent,\n          viewport: {\n            width: window.innerWidth,\n            height: window.innerHeight,\n          },\n        },\n      });\n    });\n    \n    // Unhandled promise rejection handler\n    window.addEventListener('unhandledrejection', (event) => {\n      this.trackError({\n        message: `Unhandled Promise Rejection: ${event.reason}`,\n        stack: event.reason?.stack,\n        timestamp: Date.now(),\n        severity: 'high',\n        context: {\n          url: window.location.href,\n          userAgent: navigator.userAgent,\n        },\n      });\n    });\n  }\n  \n  // Initialize interaction tracking\n  private initializeInteractionTracking(): void {\n    if (Math.random() > RUM_CONFIG.sampling.userInteractions) return;\n    \n    const interactionTypes = ['click', 'scroll', 'keydown', 'resize', 'focus', 'blur'];\n    \n    interactionTypes.forEach(type => {\n      window.addEventListener(type, (event) => {\n        this.trackInteraction({\n          type: type as any,\n          target: this.getElementSelector(event.target as Element),\n          timestamp: Date.now(),\n          x: (event as MouseEvent).clientX,\n          y: (event as MouseEvent).clientY,\n          key: (event as KeyboardEvent).key,\n          deltaX: (event as WheelEvent).deltaX,\n          deltaY: (event as WheelEvent).deltaY,\n        });\n      });\n    });\n  }\n  \n  // Initialize resource monitoring\n  private initializeResourceMonitoring(): void {\n    if (Math.random() > RUM_CONFIG.sampling.resourceTiming) return;\n    \n    if ('PerformanceObserver' in window) {\n      const resourceObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry: any) => {\n          if (entry.entryType === 'resource') {\n            this.trackResource({\n              name: entry.name,\n              type: entry.initiatorType,\n              duration: entry.duration,\n              size: entry.transferSize || 0,\n              startTime: entry.startTime,\n              endTime: entry.startTime + entry.duration,\n              success: entry.transferSize > 0,\n              error: entry.transferSize === 0 ? 'Failed to load' : undefined,\n            });\n          }\n        });\n      });\n      resourceObserver.observe({ entryTypes: ['resource'] });\n      this.observers.set('resource', resourceObserver);\n    }\n  }\n  \n  // Initialize navigation monitoring\n  private initializeNavigationMonitoring(): void {\n    if ('PerformanceObserver' in window) {\n      const navObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry: any) => {\n          if (entry.entryType === 'navigation') {\n            this.data.navigation = {\n              type: entry.type,\n              startTime: entry.startTime,\n              endTime: entry.loadEventEnd,\n              duration: entry.loadEventEnd - entry.startTime,\n              redirectCount: entry.redirectCount,\n              transferSize: entry.transferSize,\n              encodedBodySize: entry.encodedBodySize,\n              decodedBodySize: entry.decodedBodySize,\n            };\n          }\n        });\n      });\n      navObserver.observe({ entryTypes: ['navigation'] });\n      this.observers.set('navigation', navObserver);\n    }\n  }\n  \n  // Initialize session management\n  private initializeSessionManagement(): void {\n    // Session timeout\n    setTimeout(() => {\n      this.endSession();\n    }, RUM_CONFIG.session.timeout);\n    \n    // Page visibility change\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.pauseSession();\n      } else {\n        this.resumeSession();\n      }\n    });\n    \n    // Page unload\n    window.addEventListener('beforeunload', () => {\n      this.endSession();\n    });\n  }\n  \n  // Track performance metric\n  private trackPerformanceMetric(metric: string, value: number): void {\n    const threshold = RUM_CONFIG.thresholds[metric as keyof typeof RUM_CONFIG.thresholds];\n    const isViolation = threshold && value > threshold;\n    \n    if (isViolation) {\n      console.warn(`‚ö†Ô∏è Performance threshold exceeded: ${metric} = ${value}ms (threshold: ${threshold}ms)`);\n    }\n    \n    // Send to analytics\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'performance_metric', {\n        event_category: 'performance',\n        event_label: metric,\n        value: Math.round(value),\n        custom_parameter_metric: metric,\n        custom_parameter_value: Math.round(value),\n        custom_parameter_threshold: threshold,\n        custom_parameter_violation: isViolation,\n      });\n    }\n  }\n  \n  // Track error\n  private trackError(error: ErrorData): void {\n    if (this.errorCount >= RUM_CONFIG.errorTracking.maxErrors) return;\n    \n    this.data.errors.push(error);\n    this.errorCount++;\n    \n    console.error('üö® RUM Error tracked:', error);\n    \n    // Send to analytics\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'rum_error', {\n        event_category: 'error',\n        event_label: error.severity,\n        value: 1,\n        custom_parameter_error_message: error.message,\n        custom_parameter_error_severity: error.severity,\n        custom_parameter_error_filename: error.filename,\n        custom_parameter_error_line: error.lineno,\n      });\n    }\n  }\n  \n  // Track interaction\n  private trackInteraction(interaction: InteractionData): void {\n    this.data.interactions.push(interaction);\n    \n    // Send to analytics\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'user_interaction', {\n        event_category: 'interaction',\n        event_label: interaction.type,\n        value: 1,\n        custom_parameter_interaction_type: interaction.type,\n        custom_parameter_interaction_target: interaction.target,\n      });\n    }\n  }\n  \n  // Track resource\n  private trackResource(resource: ResourceData): void {\n    this.data.resources.push(resource);\n    \n    // Send to analytics\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'resource_load', {\n        event_category: 'performance',\n        event_label: resource.type,\n        value: Math.round(resource.duration),\n        custom_parameter_resource_name: resource.name,\n        custom_parameter_resource_type: resource.type,\n        custom_parameter_resource_duration: Math.round(resource.duration),\n        custom_parameter_resource_size: resource.size,\n        custom_parameter_resource_success: resource.success,\n      });\n    }\n  }\n  \n  // Get error severity\n  private getErrorSeverity(error: Error): 'low' | 'medium' | 'high' | 'critical' {\n    if (error.name === 'ChunkLoadError' || error.name === 'Loading chunk failed') {\n      return 'critical';\n    }\n    if (error.name === 'TypeError' || error.name === 'ReferenceError') {\n      return 'high';\n    }\n    if (error.name === 'SyntaxError') {\n      return 'medium';\n    }\n    return 'low';\n  }\n  \n  // Get element selector\n  private getElementSelector(element: Element): string {\n    if (element.id) return `#${element.id}`;\n    if (element.className) return `.${element.className.split(' ')[0]}`;\n    return element.tagName.toLowerCase();\n  }\n  \n  // Generate session ID\n  private generateSessionId(): string {\n    return 'rum_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  }\n  \n  // Initialize RUM data\n  private initializeRUMData(): RUMData {\n    if (typeof window === 'undefined') {\n      // Server-side fallback\n      return {\n        sessionId: this.sessionId,\n        userId: this.userId,\n        page: '/',\n        timestamp: Date.now(),\n        userAgent: 'Server',\n        viewport: { width: 0, height: 0 },\n        connection: {\n          effectiveType: 'unknown',\n          downlink: 0,\n          rtt: 0,\n        },\n        performance: {},\n        errors: [],\n        interactions: [],\n        resources: [],\n        navigation: {\n          type: 'navigate',\n          startTime: 0,\n          endTime: 0,\n          duration: 0,\n          redirectCount: 0,\n          transferSize: 0,\n          encodedBodySize: 0,\n          decodedBodySize: 0,\n        },\n      };\n    }\n    \n    return {\n      sessionId: this.sessionId,\n      userId: this.userId,\n      page: window.location.pathname,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n      connection: {\n        effectiveType: (navigator as any).connection?.effectiveType || 'unknown',\n        downlink: (navigator as any).connection?.downlink || 0,\n        rtt: (navigator as any).connection?.rtt || 0,\n      },\n      performance: {},\n      errors: [],\n      interactions: [],\n      resources: [],\n      navigation: {\n        type: 'navigate',\n        startTime: 0,\n        endTime: 0,\n        duration: 0,\n        redirectCount: 0,\n        transferSize: 0,\n        encodedBodySize: 0,\n        decodedBodySize: 0,\n      },\n    };\n  }\n  \n  // Pause session\n  private pauseSession(): void {\n    console.log('‚è∏Ô∏è RUM session paused');\n  }\n  \n  // Resume session\n  private resumeSession(): void {\n    console.log('‚ñ∂Ô∏è RUM session resumed');\n  }\n  \n  // End session\n  private endSession(): void {\n    console.log('üèÅ RUM session ended');\n    \n    // Send final data\n    this.sendRUMData();\n    \n    // Clean up observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n  }\n  \n  // Send RUM data\n  private sendRUMData(): void {\n    // Send to analytics\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'rum_session_end', {\n        event_category: 'performance',\n        event_label: 'session_end',\n        value: this.data.performance.lcp || 0,\n        custom_parameter_session_id: this.data.sessionId,\n        custom_parameter_page: this.data.page,\n        custom_parameter_errors: this.data.errors.length,\n        custom_parameter_interactions: this.data.interactions.length,\n        custom_parameter_resources: this.data.resources.length,\n        custom_parameter_lcp: this.data.performance.lcp,\n        custom_parameter_fid: this.data.performance.fid,\n        custom_parameter_cls: this.data.performance.cls,\n      });\n    }\n  }\n  \n  // Get RUM data\n  getRUMData(): RUMData {\n    return { ...this.data };\n  }\n  \n  // Set user ID\n  setUserId(userId: string): void {\n    this.userId = userId;\n    this.data.userId = userId;\n  }\n  \n  // Get session ID\n  getSessionId(): string {\n    return this.sessionId;\n  }\n}\n\n// Export singleton instance\nexport const advancedRUMManager = AdvancedRUMManager.getInstance();\n\n// Initialize RUM monitoring\nexport function initializeRUM(): void {\n  advancedRUMManager.initialize();\n}\n\n// Track custom error\nexport function trackCustomError(message: string, context?: Record<string, any>): void {\n  advancedRUMManager['trackError']({\n    message,\n    timestamp: Date.now(),\n    severity: 'medium',\n    context,\n  });\n}\n\n// Track custom interaction\nexport function trackCustomInteraction(type: string, target: string, data?: Record<string, any>): void {\n  advancedRUMManager['trackInteraction']({\n    type: type as any,\n    target,\n    timestamp: Date.now(),\n    ...data,\n  });\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1716, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/performance-ab-testing.ts"],"sourcesContent":["// Performance-Based A/B Testing for PrepFlow\n// Implements A/B testing with performance metrics as success criteria\n\n// A/B testing configuration\nexport const AB_TEST_CONFIG = {\n  // Test variants\n  variants: {\n    control: { name: 'Control', weight: 0.25 },\n    variant_a: { name: 'Variant A', weight: 0.25 },\n    variant_b: { name: 'Variant B', weight: 0.25 },\n    variant_c: { name: 'Variant C', weight: 0.25 },\n  },\n  \n  // Performance metrics to track\n  performanceMetrics: [\n    'lcp', 'fid', 'cls', 'fcp', 'tti', 'si', 'tbt'\n  ],\n  \n  // Success criteria\n  successCriteria: {\n    lcp: { threshold: 2500, weight: 0.3 },\n    fid: { threshold: 100, weight: 0.2 },\n    cls: { threshold: 0.1, weight: 0.2 },\n    fcp: { threshold: 1800, weight: 0.15 },\n    tti: { threshold: 3800, weight: 0.1 },\n    si: { threshold: 3000, weight: 0.05 },\n  },\n  \n  // Test duration and sample size\n  testDuration: 14 * 24 * 60 * 60 * 1000, // 14 days\n  minSampleSize: 100, // Minimum users per variant\n  maxSampleSize: 10000, // Maximum users per test\n  \n  // Statistical significance\n  confidenceLevel: 0.95, // 95% confidence\n  power: 0.8, // 80% power\n};\n\n// A/B test interfaces\nexport interface ABTest {\n  id: string;\n  name: string;\n  description: string;\n  variants: ABTestVariant[];\n  startDate: number;\n  endDate: number;\n  status: 'draft' | 'running' | 'paused' | 'completed';\n  successCriteria: SuccessCriteria;\n  results?: ABTestResults;\n}\n\nexport interface ABTestVariant {\n  id: string;\n  name: string;\n  weight: number;\n  config: Record<string, any>;\n  performance: PerformanceMetrics;\n  users: number;\n  conversions: number;\n  conversionRate: number;\n}\n\nexport interface PerformanceMetrics {\n  lcp?: number;\n  fid?: number;\n  cls?: number;\n  fcp?: number;\n  tti?: number;\n  si?: number;\n  tbt?: number;\n  score?: number;\n}\n\nexport interface SuccessCriteria {\n  primary: string; // Primary metric (e.g., 'lcp')\n  secondary: string[]; // Secondary metrics\n  threshold: number; // Success threshold\n  weight: number; // Weight in overall score\n}\n\nexport interface ABTestResults {\n  winner: string;\n  confidence: number;\n  pValue: number;\n  effectSize: number;\n  sampleSize: number;\n  duration: number;\n  recommendations: string[];\n}\n\n// Performance-based A/B testing manager\nexport class PerformanceABTestingManager {\n  private static instance: PerformanceABTestingManager;\n  private activeTests: Map<string, ABTest> = new Map();\n  private testData: Map<string, ABTestData[]> = new Map();\n  private currentVariant: string | null = null;\n  \n  static getInstance(): PerformanceABTestingManager {\n    if (!PerformanceABTestingManager.instance) {\n      PerformanceABTestingManager.instance = new PerformanceABTestingManager();\n    }\n    return PerformanceABTestingManager.instance;\n  }\n  \n  // Create new A/B test\n  createTest(test: Omit<ABTest, 'id' | 'startDate' | 'status' | 'results'>): string {\n    const id = this.generateTestId();\n    const newTest: ABTest = {\n      ...test,\n      id,\n      startDate: Date.now(),\n      status: 'draft',\n    };\n    \n    this.activeTests.set(id, newTest);\n    this.testData.set(id, []);\n    \n    console.log(`üß™ A/B test created: ${test.name} (${id})`);\n    return id;\n  }\n  \n  // Start A/B test\n  startTest(testId: string): boolean {\n    const test = this.activeTests.get(testId);\n    if (!test) return false;\n    \n    test.status = 'running';\n    test.startDate = Date.now();\n    test.endDate = test.startDate + AB_TEST_CONFIG.testDuration;\n    \n    console.log(`üöÄ A/B test started: ${test.name}`);\n    return true;\n  }\n  \n  // Assign user to variant\n  assignVariant(testId: string, userId: string): string | null {\n    const test = this.activeTests.get(testId);\n    if (!test || test.status !== 'running') return null;\n    \n    // Check if user already assigned\n    const existingAssignment = this.getUserAssignment(testId, userId);\n    if (existingAssignment) return existingAssignment;\n    \n    // Assign based on weights\n    const variant = this.selectVariant(test.variants);\n    if (!variant) return null;\n    \n    // Store assignment\n    this.storeUserAssignment(testId, userId, variant.id);\n    \n    // Track assignment\n    this.trackVariantAssignment(testId, variant.id, userId);\n    \n    return variant.id;\n  }\n  \n  // Track performance metrics for variant\n  trackPerformance(testId: string, variantId: string, metrics: PerformanceMetrics, userId: string): void {\n    const test = this.activeTests.get(testId);\n    if (!test || test.status !== 'running') return;\n    \n    // Store performance data\n    const data: ABTestData = {\n      testId,\n      variantId,\n      userId,\n      metrics,\n      timestamp: Date.now(),\n      sessionId: this.getSessionId(),\n    };\n    \n    this.testData.get(testId)?.push(data);\n    \n    // Update variant performance\n    this.updateVariantPerformance(testId, variantId, metrics);\n    \n    // Check if test should end\n    this.checkTestCompletion(testId);\n    \n    // Track performance\n    this.trackPerformanceMetric(testId, variantId, metrics, userId);\n  }\n  \n  // Get current variant for user\n  getCurrentVariant(testId: string, userId: string): string | null {\n    return this.getUserAssignment(testId, userId);\n  }\n  \n  // Get test results\n  getTestResults(testId: string): ABTestResults | null {\n    const test = this.activeTests.get(testId);\n    if (!test || !test.results) return null;\n    \n    return test.results;\n  }\n  \n  // Get all active tests\n  getActiveTests(): ABTest[] {\n    return Array.from(this.activeTests.values()).filter(test => test.status === 'running');\n  }\n  \n  // Select variant based on weights\n  private selectVariant(variants: ABTestVariant[]): ABTestVariant | null {\n    const random = Math.random();\n    let cumulative = 0;\n    \n    for (const variant of variants) {\n      cumulative += variant.weight;\n      if (random <= cumulative) {\n        return variant;\n      }\n    }\n    \n    return variants[0]; // Fallback to first variant\n  }\n  \n  // Update variant performance\n  private updateVariantPerformance(testId: string, variantId: string, metrics: PerformanceMetrics): void {\n    const test = this.activeTests.get(testId);\n    if (!test) return;\n    \n    const variant = test.variants.find(v => v.id === variantId);\n    if (!variant) return;\n    \n    // Update performance metrics\n    Object.keys(metrics).forEach(key => {\n      const value = metrics[key as keyof PerformanceMetrics];\n      if (typeof value === 'number') {\n        variant.performance[key as keyof PerformanceMetrics] = value;\n      }\n    });\n    \n    // Calculate performance score\n    variant.performance.score = this.calculatePerformanceScore(metrics);\n  }\n  \n  // Calculate performance score\n  private calculatePerformanceScore(metrics: PerformanceMetrics): number {\n    let score = 0;\n    let totalWeight = 0;\n    \n    Object.keys(AB_TEST_CONFIG.successCriteria).forEach(metric => {\n      const criteria = AB_TEST_CONFIG.successCriteria[metric as keyof typeof AB_TEST_CONFIG.successCriteria];\n      const value = metrics[metric as keyof PerformanceMetrics];\n      \n      if (typeof value === 'number') {\n        const normalizedValue = Math.min(value / criteria.threshold, 1);\n        score += normalizedValue * criteria.weight;\n        totalWeight += criteria.weight;\n      }\n    });\n    \n    return totalWeight > 0 ? (score / totalWeight) * 100 : 0;\n  }\n  \n  // Check if test should complete\n  private checkTestCompletion(testId: string): void {\n    const test = this.activeTests.get(testId);\n    if (!test) return;\n    \n    const data = this.testData.get(testId) || [];\n    const totalUsers = data.length;\n    \n    // Check if minimum sample size reached\n    if (totalUsers < AB_TEST_CONFIG.minSampleSize) return;\n    \n    // Check if test duration exceeded\n    if (Date.now() > test.endDate) {\n      this.completeTest(testId);\n      return;\n    }\n    \n    // Check if maximum sample size reached\n    if (totalUsers >= AB_TEST_CONFIG.maxSampleSize) {\n      this.completeTest(testId);\n      return;\n    }\n    \n    // Check if statistical significance reached\n    if (this.isStatisticallySignificant(testId)) {\n      this.completeTest(testId);\n      return;\n    }\n  }\n  \n  // Complete test and calculate results\n  private completeTest(testId: string): void {\n    const test = this.activeTests.get(testId);\n    if (!test) return;\n    \n    test.status = 'completed';\n    test.results = this.calculateTestResults(testId);\n    \n    console.log(`üèÅ A/B test completed: ${test.name}`);\n    console.log(`üèÜ Winner: ${test.results?.winner}`);\n    console.log(`üìä Confidence: ${test.results?.confidence}%`);\n  }\n  \n  // Calculate test results\n  private calculateTestResults(testId: string): ABTestResults {\n    const test = this.activeTests.get(testId);\n    if (!test) return {} as ABTestResults;\n    \n    const data = this.testData.get(testId) || [];\n    const variants = test.variants;\n    \n    // Calculate performance scores for each variant\n    const variantScores = variants.map(variant => {\n      const variantData = data.filter(d => d.variantId === variant.id);\n      const avgScore = variantData.length > 0 \n        ? variantData.reduce((sum, d) => sum + (d.metrics.score || 0), 0) / variantData.length\n        : 0;\n      \n      return {\n        variantId: variant.id,\n        score: avgScore,\n        sampleSize: variantData.length,\n      };\n    });\n    \n    // Find winner\n    const winner = variantScores.reduce((prev, current) => \n      current.score > prev.score ? current : prev\n    );\n    \n    // Calculate statistical significance\n    const confidence = this.calculateConfidence(variantScores);\n    const pValue = this.calculatePValue(variantScores);\n    const effectSize = this.calculateEffectSize(variantScores);\n    \n    // Generate recommendations\n    const recommendations = this.generateRecommendations(test, variantScores);\n    \n    return {\n      winner: winner.variantId,\n      confidence,\n      pValue,\n      effectSize,\n      sampleSize: data.length,\n      duration: Date.now() - test.startDate,\n      recommendations,\n    };\n  }\n  \n  // Calculate confidence level\n  private calculateConfidence(variantScores: Array<{ variantId: string; score: number; sampleSize: number }>): number {\n    // Simplified confidence calculation\n    // In a real implementation, you'd use proper statistical tests\n    const scores = variantScores.map(v => v.score);\n    const maxScore = Math.max(...scores);\n    const minScore = Math.min(...scores);\n    const range = maxScore - minScore;\n    \n    return range > 0 ? Math.min(95, (range / maxScore) * 100) : 50;\n  }\n  \n  // Calculate p-value\n  private calculatePValue(variantScores: Array<{ variantId: string; score: number; sampleSize: number }>): number {\n    // Simplified p-value calculation\n    // In a real implementation, you'd use proper statistical tests\n    const scores = variantScores.map(v => v.score);\n    const maxScore = Math.max(...scores);\n    const minScore = Math.min(...scores);\n    const range = maxScore - minScore;\n    \n    return range > 0 ? Math.max(0.01, 1 - (range / maxScore)) : 0.5;\n  }\n  \n  // Calculate effect size\n  private calculateEffectSize(variantScores: Array<{ variantId: string; score: number; sampleSize: number }>): number {\n    // Simplified effect size calculation\n    const scores = variantScores.map(v => v.score);\n    const mean = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n    const variance = scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / scores.length;\n    const stdDev = Math.sqrt(variance);\n    \n    return stdDev > 0 ? (Math.max(...scores) - Math.min(...scores)) / stdDev : 0;\n  }\n  \n  // Check if results are statistically significant\n  private isStatisticallySignificant(testId: string): boolean {\n    const test = this.activeTests.get(testId);\n    if (!test) return false;\n    \n    const data = this.testData.get(testId) || [];\n    const variants = test.variants;\n    \n    // Simplified significance check\n    // In a real implementation, you'd use proper statistical tests\n    const variantScores = variants.map(variant => {\n      const variantData = data.filter(d => d.variantId === variant.id);\n      return variantData.length > 0 \n        ? variantData.reduce((sum, d) => sum + (d.metrics.score || 0), 0) / variantData.length\n        : 0;\n    });\n    \n    const maxScore = Math.max(...variantScores);\n    const minScore = Math.min(...variantScores);\n    const range = maxScore - minScore;\n    \n    return range > 10 && data.length >= AB_TEST_CONFIG.minSampleSize;\n  }\n  \n  // Generate recommendations\n  private generateRecommendations(test: ABTest, variantScores: Array<{ variantId: string; score: number; sampleSize: number }>): string[] {\n    const recommendations: string[] = [];\n    \n    const winner = variantScores.reduce((prev, current) => \n      current.score > prev.score ? current : prev\n    );\n    \n    recommendations.push(`Winner: ${winner.variantId} with score ${winner.score.toFixed(2)}`);\n    \n    if (winner.score > 80) {\n      recommendations.push('Consider implementing the winning variant as the default');\n    } else if (winner.score < 60) {\n      recommendations.push('Consider running additional tests or refining the variants');\n    }\n    \n    const lowPerformingVariants = variantScores.filter(v => v.score < 50);\n    if (lowPerformingVariants.length > 0) {\n      recommendations.push(`Consider removing low-performing variants: ${lowPerformingVariants.map(v => v.variantId).join(', ')}`);\n    }\n    \n    return recommendations;\n  }\n  \n  // Track variant assignment\n  private trackVariantAssignment(testId: string, variantId: string, userId: string): void {\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'ab_test_assignment', {\n        event_category: 'ab_testing',\n        event_label: testId,\n        value: 1,\n        custom_parameter_test_id: testId,\n        custom_parameter_variant_id: variantId,\n        custom_parameter_user_id: userId,\n      });\n    }\n  }\n  \n  // Track performance metric\n  private trackPerformanceMetric(testId: string, variantId: string, metrics: PerformanceMetrics, userId: string): void {\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'ab_test_performance', {\n        event_category: 'ab_testing',\n        event_label: testId,\n        value: metrics.score || 0,\n        custom_parameter_test_id: testId,\n        custom_parameter_variant_id: variantId,\n        custom_parameter_user_id: userId,\n        custom_parameter_lcp: metrics.lcp,\n        custom_parameter_fid: metrics.fid,\n        custom_parameter_cls: metrics.cls,\n        custom_parameter_score: metrics.score,\n      });\n    }\n  }\n  \n  // Store user assignment\n  private storeUserAssignment(testId: string, userId: string, variantId: string): void {\n    const key = `ab_test_${testId}_${userId}`;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(key, variantId);\n    }\n  }\n  \n  // Get user assignment\n  private getUserAssignment(testId: string, userId: string): string | null {\n    const key = `ab_test_${testId}_${userId}`;\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem(key);\n    }\n    return null;\n  }\n  \n  // Get session ID\n  private getSessionId(): string {\n    return 'session_' + Math.random().toString(36).substr(2, 9);\n  }\n  \n  // Generate test ID\n  private generateTestId(): string {\n    return 'test_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  }\n}\n\n// A/B test data interface\ninterface ABTestData {\n  testId: string;\n  variantId: string;\n  userId: string;\n  metrics: PerformanceMetrics;\n  timestamp: number;\n  sessionId: string;\n}\n\n// Export singleton instance\nexport const performanceABTestingManager = PerformanceABTestingManager.getInstance();\n\n// Initialize performance-based A/B testing\nexport function initializePerformanceABTesting(): void {\n  console.log('üß™ Initializing Performance-based A/B Testing...');\n  \n  // Create example tests\n  const testId = performanceABTestingManager.createTest({\n    name: 'Landing Page Performance Optimization',\n    description: 'Test different landing page configurations for performance',\n    endDate: Date.now() + (14 * 24 * 60 * 60 * 1000), // 14 days from now\n    variants: [\n      { id: 'control', name: 'Control', weight: 0.25, config: {}, performance: {}, users: 0, conversions: 0, conversionRate: 0 },\n      { id: 'variant_a', name: 'Variant A', weight: 0.25, config: {}, performance: {}, users: 0, conversions: 0, conversionRate: 0 },\n      { id: 'variant_b', name: 'Variant B', weight: 0.25, config: {}, performance: {}, users: 0, conversions: 0, conversionRate: 0 },\n      { id: 'variant_c', name: 'Variant C', weight: 0.25, config: {}, performance: {}, users: 0, conversions: 0, conversionRate: 0 },\n    ],\n    successCriteria: {\n      primary: 'lcp',\n      secondary: ['fid', 'cls'],\n      threshold: 2500,\n      weight: 0.3,\n    },\n  });\n  \n  // Start the test\n  performanceABTestingManager.startTest(testId);\n  \n  console.log('‚úÖ Performance-based A/B Testing initialized');\n}\n\n// Track performance for A/B test\nexport function trackABTestPerformance(testId: string, variantId: string, metrics: PerformanceMetrics, userId: string): void {\n  performanceABTestingManager.trackPerformance(testId, variantId, metrics, userId);\n}\n\n// Get A/B test variant\nexport function getABTestVariant(testId: string, userId: string): string | null {\n  return performanceABTestingManager.getCurrentVariant(testId, userId);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2157, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/performance-alerts.ts"],"sourcesContent":["// Performance Regression Alerts for PrepFlow\n// Implements automated performance monitoring and alerting\n\n// Alert configuration\nexport const ALERT_CONFIG = {\n  // Alert thresholds\n  thresholds: {\n    lcp: { warning: 2000, critical: 3000 },\n    fid: { warning: 80, critical: 120 },\n    cls: { warning: 0.08, critical: 0.12 },\n    fcp: { warning: 1500, critical: 2000 },\n    tti: { warning: 3000, critical: 4000 },\n    si: { warning: 2500, critical: 3500 },\n    tbt: { warning: 200, critical: 300 },\n  },\n  \n  // Regression detection\n  regression: {\n    sensitivity: 0.15, // 15% change triggers regression alert\n    minSamples: 10, // Minimum samples for regression detection\n    timeWindow: 24 * 60 * 60 * 1000, // 24 hours\n  },\n  \n  // Alert channels\n  channels: {\n    console: true,\n    analytics: true,\n    webhook: false, // Set to true to enable webhook alerts\n    email: false, // Set to true to enable email alerts\n  },\n  \n  // Webhook configuration\n  webhook: {\n    url: process.env.PERFORMANCE_WEBHOOK_URL || '',\n    timeout: 5000,\n    retries: 3,\n  },\n  \n  // Email configuration\n  email: {\n    to: process.env.ALERT_EMAIL_TO || '',\n    from: process.env.ALERT_EMAIL_FROM || 'alerts@prepflow.org',\n    subject: 'PrepFlow Performance Alert',\n  },\n};\n\n// Alert interfaces\nexport interface PerformanceAlert {\n  id: string;\n  type: 'warning' | 'critical' | 'regression';\n  metric: string;\n  currentValue: number;\n  threshold: number;\n  previousValue?: number;\n  changePercent?: number;\n  message: string;\n  timestamp: number;\n  page: string;\n  userId?: string;\n  sessionId: string;\n  resolved: boolean;\n  resolvedAt?: number;\n}\n\nexport interface PerformanceRegression {\n  metric: string;\n  currentValue: number;\n  previousValue: number;\n  changePercent: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  trend: 'improving' | 'degrading' | 'stable';\n  confidence: number;\n}\n\nexport interface AlertRule {\n  id: string;\n  name: string;\n  metric: string;\n  condition: 'greater_than' | 'less_than' | 'equals' | 'not_equals';\n  threshold: number;\n  severity: 'warning' | 'critical';\n  enabled: boolean;\n  cooldown: number; // Cooldown period in ms\n  lastTriggered?: number;\n}\n\n// Performance alert manager\nexport class PerformanceAlertManager {\n  private static instance: PerformanceAlertManager;\n  private alerts: Map<string, PerformanceAlert> = new Map();\n  private alertRules: Map<string, AlertRule> = new Map();\n  private performanceHistory: Map<string, PerformanceData[]> = new Map();\n  private cooldowns: Map<string, number> = new Map();\n  \n  static getInstance(): PerformanceAlertManager {\n    if (!PerformanceAlertManager.instance) {\n      PerformanceAlertManager.instance = new PerformanceAlertManager();\n    }\n    return PerformanceAlertManager.instance;\n  }\n  \n  constructor() {\n    this.initializeDefaultRules();\n  }\n  \n  // Initialize default alert rules\n  private initializeDefaultRules(): void {\n    const defaultRules: AlertRule[] = [\n      {\n        id: 'lcp_critical',\n        name: 'LCP Critical Alert',\n        metric: 'lcp',\n        condition: 'greater_than',\n        threshold: ALERT_CONFIG.thresholds.lcp.critical,\n        severity: 'critical',\n        enabled: true,\n        cooldown: 30 * 60 * 1000, // 30 minutes\n      },\n      {\n        id: 'lcp_warning',\n        name: 'LCP Warning Alert',\n        metric: 'lcp',\n        condition: 'greater_than',\n        threshold: ALERT_CONFIG.thresholds.lcp.warning,\n        severity: 'warning',\n        enabled: true,\n        cooldown: 15 * 60 * 1000, // 15 minutes\n      },\n      {\n        id: 'fid_critical',\n        name: 'FID Critical Alert',\n        metric: 'fid',\n        condition: 'greater_than',\n        threshold: ALERT_CONFIG.thresholds.fid.critical,\n        severity: 'critical',\n        enabled: true,\n        cooldown: 30 * 60 * 1000,\n      },\n      {\n        id: 'cls_critical',\n        name: 'CLS Critical Alert',\n        metric: 'cls',\n        condition: 'greater_than',\n        threshold: ALERT_CONFIG.thresholds.cls.critical,\n        severity: 'critical',\n        enabled: true,\n        cooldown: 30 * 60 * 1000,\n      },\n    ];\n    \n    defaultRules.forEach(rule => {\n      this.alertRules.set(rule.id, rule);\n    });\n  }\n  \n  // Check performance metrics and trigger alerts\n  checkPerformance(metrics: PerformanceMetrics, page: string, userId?: string, sessionId?: string): void {\n    const currentTime = Date.now();\n    const actualSessionId = sessionId || this.generateSessionId();\n    \n    // Store performance data\n    this.storePerformanceData(page, metrics, currentTime);\n    \n    // Check alert rules\n    this.alertRules.forEach(rule => {\n      if (!rule.enabled) return;\n      \n      const value = metrics[rule.metric as keyof PerformanceMetrics];\n      if (typeof value !== 'number') return;\n      \n      // Check cooldown\n      if (this.isInCooldown(rule.id, currentTime)) return;\n      \n      // Check condition\n      if (this.evaluateCondition(value, rule.condition, rule.threshold)) {\n        this.triggerAlert(rule, value, page, userId, actualSessionId, currentTime);\n        this.setCooldown(rule.id, currentTime + rule.cooldown);\n      }\n    });\n    \n    // Check for regressions\n    this.checkRegressions(page, metrics, currentTime);\n  }\n  \n  // Check for performance regressions\n  private checkRegressions(page: string, metrics: PerformanceMetrics, timestamp: number): void {\n    const history = this.performanceHistory.get(page) || [];\n    const recentHistory = history.filter(data => \n      timestamp - data.timestamp < ALERT_CONFIG.regression.timeWindow\n    );\n    \n    if (recentHistory.length < ALERT_CONFIG.regression.minSamples) return;\n    \n    // Calculate baseline performance\n    const baseline = this.calculateBaseline(recentHistory);\n    \n    // Check each metric for regression\n    Object.keys(metrics).forEach(metric => {\n      const currentValue = metrics[metric as keyof PerformanceMetrics];\n      if (typeof currentValue !== 'number') return;\n      \n      const baselineValue = baseline[metric as keyof typeof baseline];\n      if (typeof baselineValue !== 'number') return;\n      \n      const changePercent = ((currentValue - baselineValue) / baselineValue) * 100;\n      \n      if (Math.abs(changePercent) >= ALERT_CONFIG.regression.sensitivity * 100) {\n        const regression: PerformanceRegression = {\n          metric,\n          currentValue,\n          previousValue: baselineValue,\n          changePercent,\n          severity: this.getRegressionSeverity(changePercent),\n          trend: changePercent > 0 ? 'degrading' : 'improving',\n          confidence: this.calculateRegressionConfidence(recentHistory, metric),\n        };\n        \n        this.triggerRegressionAlert(regression, page, timestamp);\n      }\n    });\n  }\n  \n  // Calculate baseline performance\n  private calculateBaseline(history: PerformanceData[]): Record<string, number> {\n    const baseline: Record<string, number> = {};\n    \n    // Group by metric\n    const metrics: Record<string, number[]> = {};\n    history.forEach(data => {\n      Object.keys(data.metrics).forEach(metric => {\n        const value = data.metrics[metric as keyof PerformanceMetrics];\n        if (typeof value === 'number') {\n          if (!metrics[metric]) metrics[metric] = [];\n          metrics[metric].push(value);\n        }\n      });\n    });\n    \n    // Calculate median for each metric\n    Object.keys(metrics).forEach(metric => {\n      const values = metrics[metric].sort((a, b) => a - b);\n      const mid = Math.floor(values.length / 2);\n      baseline[metric] = values.length % 2 === 0 \n        ? (values[mid - 1] + values[mid]) / 2 \n        : values[mid];\n    });\n    \n    return baseline;\n  }\n  \n  // Get regression severity\n  private getRegressionSeverity(changePercent: number): 'low' | 'medium' | 'high' | 'critical' {\n    const absChange = Math.abs(changePercent);\n    \n    if (absChange >= 50) return 'critical';\n    if (absChange >= 30) return 'high';\n    if (absChange >= 15) return 'medium';\n    return 'low';\n  }\n  \n  // Calculate regression confidence\n  private calculateRegressionConfidence(history: PerformanceData[], metric: string): number {\n    const values = history\n      .map(data => data.metrics[metric as keyof PerformanceMetrics])\n      .filter(value => typeof value === 'number') as number[];\n    \n    if (values.length < 3) return 0.5;\n    \n    // Calculate coefficient of variation\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n    const cv = stdDev / mean;\n    \n    // Higher confidence for lower variation\n    return Math.max(0.5, 1 - cv);\n  }\n  \n  // Trigger alert\n  private triggerAlert(rule: AlertRule, value: number, page: string, userId?: string, sessionId?: string, timestamp?: number): void {\n    const alertId = this.generateAlertId();\n    const actualTimestamp = timestamp || Date.now();\n    \n    const alert: PerformanceAlert = {\n      id: alertId,\n      type: rule.severity,\n      metric: rule.metric,\n      currentValue: value,\n      threshold: rule.threshold,\n      message: `${rule.name}: ${rule.metric} = ${value} (threshold: ${rule.threshold})`,\n      timestamp: actualTimestamp,\n      page,\n      userId,\n      sessionId: sessionId || this.generateSessionId(),\n      resolved: false,\n    };\n    \n    this.alerts.set(alertId, alert);\n    \n    // Send alert\n    this.sendAlert(alert);\n    \n    console.warn(`üö® Performance Alert: ${alert.message}`);\n  }\n  \n  // Trigger regression alert\n  private triggerRegressionAlert(regression: PerformanceRegression, page: string, timestamp: number): void {\n    const alertId = this.generateAlertId();\n    \n    const alert: PerformanceAlert = {\n      id: alertId,\n      type: 'regression',\n      metric: regression.metric,\n      currentValue: regression.currentValue,\n      threshold: regression.previousValue,\n      previousValue: regression.previousValue,\n      changePercent: regression.changePercent,\n      message: `Performance Regression: ${regression.metric} ${regression.trend} by ${regression.changePercent.toFixed(1)}% (${regression.currentValue} vs ${regression.previousValue})`,\n      timestamp,\n      page,\n      sessionId: this.generateSessionId(),\n      resolved: false,\n    };\n    \n    this.alerts.set(alertId, alert);\n    \n    // Send alert\n    this.sendAlert(alert);\n    \n    console.warn(`üìâ Performance Regression: ${alert.message}`);\n  }\n  \n  // Send alert through configured channels\n  private sendAlert(alert: PerformanceAlert): void {\n    // Console alert\n    if (ALERT_CONFIG.channels.console) {\n      this.sendConsoleAlert(alert);\n    }\n    \n    // Analytics alert\n    if (ALERT_CONFIG.channels.analytics) {\n      this.sendAnalyticsAlert(alert);\n    }\n    \n    // Webhook alert\n    if (ALERT_CONFIG.channels.webhook && ALERT_CONFIG.webhook.url) {\n      this.sendWebhookAlert(alert);\n    }\n    \n    // Email alert\n    if (ALERT_CONFIG.channels.email && ALERT_CONFIG.email.to) {\n      this.sendEmailAlert(alert);\n    }\n  }\n  \n  // Send console alert\n  private sendConsoleAlert(alert: PerformanceAlert): void {\n    const emoji = alert.type === 'critical' ? 'üö®' : alert.type === 'warning' ? '‚ö†Ô∏è' : 'üìâ';\n    console.error(`${emoji} ${alert.message} (${alert.page})`);\n  }\n  \n  // Send analytics alert\n  private sendAnalyticsAlert(alert: PerformanceAlert): void {\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'performance_alert', {\n        event_category: 'performance',\n        event_label: alert.type,\n        value: Math.round(alert.currentValue),\n        custom_parameter_alert_id: alert.id,\n        custom_parameter_metric: alert.metric,\n        custom_parameter_threshold: alert.threshold,\n        custom_parameter_page: alert.page,\n        custom_parameter_change_percent: alert.changePercent,\n      });\n    }\n  }\n  \n  // Send webhook alert\n  private sendWebhookAlert(alert: PerformanceAlert): void {\n    if (!ALERT_CONFIG.webhook.url) return;\n    \n    fetch(ALERT_CONFIG.webhook.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(alert),\n    }).catch(error => {\n      console.error('Failed to send webhook alert:', error);\n    });\n  }\n  \n  // Send email alert\n  private sendEmailAlert(alert: PerformanceAlert): void {\n    // In a real implementation, you'd use an email service\n    console.log(`üìß Email alert would be sent: ${alert.message}`);\n  }\n  \n  // Evaluate alert condition\n  private evaluateCondition(value: number, condition: string, threshold: number): boolean {\n    switch (condition) {\n      case 'greater_than':\n        return value > threshold;\n      case 'less_than':\n        return value < threshold;\n      case 'equals':\n        return value === threshold;\n      case 'not_equals':\n        return value !== threshold;\n      default:\n        return false;\n    }\n  }\n  \n  // Check if rule is in cooldown\n  private isInCooldown(ruleId: string, currentTime: number): boolean {\n    const cooldownEnd = this.cooldowns.get(ruleId);\n    return cooldownEnd ? currentTime < cooldownEnd : false;\n  }\n  \n  // Set cooldown for rule\n  private setCooldown(ruleId: string, cooldownEnd: number): void {\n    this.cooldowns.set(ruleId, cooldownEnd);\n  }\n  \n  // Store performance data\n  private storePerformanceData(page: string, metrics: PerformanceMetrics, timestamp: number): void {\n    const data: PerformanceData = {\n      metrics,\n      timestamp,\n    };\n    \n    const history = this.performanceHistory.get(page) || [];\n    history.push(data);\n    \n    // Keep only recent data\n    const cutoff = timestamp - ALERT_CONFIG.regression.timeWindow;\n    const recentHistory = history.filter(d => d.timestamp > cutoff);\n    \n    this.performanceHistory.set(page, recentHistory);\n  }\n  \n  // Generate alert ID\n  private generateAlertId(): string {\n    return 'alert_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  }\n  \n  // Generate session ID\n  private generateSessionId(): string {\n    return 'session_' + Math.random().toString(36).substr(2, 9);\n  }\n  \n  // Get all alerts\n  getAlerts(): PerformanceAlert[] {\n    return Array.from(this.alerts.values());\n  }\n  \n  // Get active alerts\n  getActiveAlerts(): PerformanceAlert[] {\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\n  }\n  \n  // Resolve alert\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) return false;\n    \n    alert.resolved = true;\n    alert.resolvedAt = Date.now();\n    \n    console.log(`‚úÖ Alert resolved: ${alert.message}`);\n    return true;\n  }\n  \n  // Add custom alert rule\n  addAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule);\n  }\n  \n  // Remove alert rule\n  removeAlertRule(ruleId: string): boolean {\n    return this.alertRules.delete(ruleId);\n  }\n  \n  // Get alert rules\n  getAlertRules(): AlertRule[] {\n    return Array.from(this.alertRules.values());\n  }\n  \n  // Get performance history\n  getPerformanceHistory(page: string): PerformanceData[] {\n    return this.performanceHistory.get(page) || [];\n  }\n  \n  // Clear old alerts\n  clearOldAlerts(maxAge: number = 7 * 24 * 60 * 60 * 1000): void {\n    const cutoff = Date.now() - maxAge;\n    \n    for (const [id, alert] of this.alerts) {\n      if (alert.timestamp < cutoff) {\n        this.alerts.delete(id);\n      }\n    }\n  }\n}\n\n// Performance data interface\ninterface PerformanceData {\n  metrics: PerformanceMetrics;\n  timestamp: number;\n}\n\n// Performance metrics interface\ninterface PerformanceMetrics {\n  lcp?: number | null;\n  fid?: number | null;\n  cls?: number | null;\n  fcp?: number | null;\n  tti?: number | null;\n  si?: number | null;\n  tbt?: number | null;\n  score?: number | null;\n}\n\n// Export singleton instance\nexport const performanceAlertManager = PerformanceAlertManager.getInstance();\n\n// Initialize performance alerts\nexport function initializePerformanceAlerts(): void {\n  console.log('üö® Initializing Performance Alerts...');\n  \n  // Clear old alerts on startup\n  performanceAlertManager.clearOldAlerts();\n  \n  console.log('‚úÖ Performance Alerts initialized');\n}\n\n// Check performance and trigger alerts\nexport function checkPerformanceAndAlert(metrics: PerformanceMetrics, page: string, userId?: string, sessionId?: string): void {\n  performanceAlertManager.checkPerformance(metrics, page, userId, sessionId);\n}\n\n// Get performance alerts\nexport function getPerformanceAlerts(): PerformanceAlert[] {\n  return performanceAlertManager.getAlerts();\n}\n\n// Resolve performance alert\nexport function resolvePerformanceAlert(alertId: string): boolean {\n  return performanceAlertManager.resolveAlert(alertId);\n}\n"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,2DAA2D;AAE3D,sBAAsB;;;;;;;;;;AACf,MAAM,eAAe;IAC1B,mBAAmB;IACnB,YAAY;QACV,KAAK;YAAE,SAAS;YAAM,UAAU;QAAK;QACrC,KAAK;YAAE,SAAS;YAAI,UAAU;QAAI;QAClC,KAAK;YAAE,SAAS;YAAM,UAAU;QAAK;QACrC,KAAK;YAAE,SAAS;YAAM,UAAU;QAAK;QACrC,KAAK;YAAE,SAAS;YAAM,UAAU;QAAK;QACrC,IAAI;YAAE,SAAS;YAAM,UAAU;QAAK;QACpC,KAAK;YAAE,SAAS;YAAK,UAAU;QAAI;IACrC;IAEA,uBAAuB;IACvB,YAAY;QACV,aAAa;QACb,YAAY;QACZ,YAAY,KAAK,KAAK,KAAK;IAC7B;IAEA,iBAAiB;IACjB,UAAU;QACR,SAAS;QACT,WAAW;QACX,SAAS;QACT,OAAO;IACT;IAEA,wBAAwB;IACxB,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,uBAAuB,IAAI;QAC5C,SAAS;QACT,SAAS;IACX;IAEA,sBAAsB;IACtB,OAAO;QACL,IAAI,QAAQ,GAAG,CAAC,cAAc,IAAI;QAClC,MAAM,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QACtC,SAAS;IACX;AACF;AA2CO,MAAM;IACX,OAAe,SAAkC;IACzC,SAAwC,IAAI,MAAM;IAClD,aAAqC,IAAI,MAAM;IAC/C,qBAAqD,IAAI,MAAM;IAC/D,YAAiC,IAAI,MAAM;IAEnD,OAAO,cAAuC;QAC5C,IAAI,CAAC,wBAAwB,QAAQ,EAAE;YACrC,wBAAwB,QAAQ,GAAG,IAAI;QACzC;QACA,OAAO,wBAAwB,QAAQ;IACzC;IAEA,aAAc;QACZ,IAAI,CAAC,sBAAsB;IAC7B;IAEA,iCAAiC;IACzB,yBAA+B;QACrC,MAAM,eAA4B;YAChC;gBACE,IAAI;gBACJ,MAAM;gBACN,QAAQ;gBACR,WAAW;gBACX,WAAW,aAAa,UAAU,CAAC,GAAG,CAAC,QAAQ;gBAC/C,UAAU;gBACV,SAAS;gBACT,UAAU,KAAK,KAAK;YACtB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,QAAQ;gBACR,WAAW;gBACX,WAAW,aAAa,UAAU,CAAC,GAAG,CAAC,OAAO;gBAC9C,UAAU;gBACV,SAAS;gBACT,UAAU,KAAK,KAAK;YACtB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,QAAQ;gBACR,WAAW;gBACX,WAAW,aAAa,UAAU,CAAC,GAAG,CAAC,QAAQ;gBAC/C,UAAU;gBACV,SAAS;gBACT,UAAU,KAAK,KAAK;YACtB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,QAAQ;gBACR,WAAW;gBACX,WAAW,aAAa,UAAU,CAAC,GAAG,CAAC,QAAQ;gBAC/C,UAAU;gBACV,SAAS;gBACT,UAAU,KAAK,KAAK;YACtB;SACD;QAED,aAAa,OAAO,CAAC,CAAA;YACnB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE;QAC/B;IACF;IAEA,+CAA+C;IAC/C,iBAAiB,OAA2B,EAAE,IAAY,EAAE,MAAe,EAAE,SAAkB,EAAQ;QACrG,MAAM,cAAc,KAAK,GAAG;QAC5B,MAAM,kBAAkB,aAAa,IAAI,CAAC,iBAAiB;QAE3D,yBAAyB;QACzB,IAAI,CAAC,oBAAoB,CAAC,MAAM,SAAS;QAEzC,oBAAoB;QACpB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;YACtB,IAAI,CAAC,KAAK,OAAO,EAAE;YAEnB,MAAM,QAAQ,OAAO,CAAC,KAAK,MAAM,CAA6B;YAC9D,IAAI,OAAO,UAAU,UAAU;YAE/B,iBAAiB;YACjB,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,cAAc;YAE7C,kBAAkB;YAClB,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,KAAK,SAAS,EAAE,KAAK,SAAS,GAAG;gBACjE,IAAI,CAAC,YAAY,CAAC,MAAM,OAAO,MAAM,QAAQ,iBAAiB;gBAC9D,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,cAAc,KAAK,QAAQ;YACvD;QACF;QAEA,wBAAwB;QACxB,IAAI,CAAC,gBAAgB,CAAC,MAAM,SAAS;IACvC;IAEA,oCAAoC;IAC5B,iBAAiB,IAAY,EAAE,OAA2B,EAAE,SAAiB,EAAQ;QAC3F,MAAM,UAAU,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,EAAE;QACvD,MAAM,gBAAgB,QAAQ,MAAM,CAAC,CAAA,OACnC,YAAY,KAAK,SAAS,GAAG,aAAa,UAAU,CAAC,UAAU;QAGjE,IAAI,cAAc,MAAM,GAAG,aAAa,UAAU,CAAC,UAAU,EAAE;QAE/D,iCAAiC;QACjC,MAAM,WAAW,IAAI,CAAC,iBAAiB,CAAC;QAExC,mCAAmC;QACnC,OAAO,IAAI,CAAC,SAAS,OAAO,CAAC,CAAA;YAC3B,MAAM,eAAe,OAAO,CAAC,OAAmC;YAChE,IAAI,OAAO,iBAAiB,UAAU;YAEtC,MAAM,gBAAgB,QAAQ,CAAC,OAAgC;YAC/D,IAAI,OAAO,kBAAkB,UAAU;YAEvC,MAAM,gBAAgB,AAAC,CAAC,eAAe,aAAa,IAAI,gBAAiB;YAEzE,IAAI,KAAK,GAAG,CAAC,kBAAkB,aAAa,UAAU,CAAC,WAAW,GAAG,KAAK;gBACxE,MAAM,aAAoC;oBACxC;oBACA;oBACA,eAAe;oBACf;oBACA,UAAU,IAAI,CAAC,qBAAqB,CAAC;oBACrC,OAAO,gBAAgB,IAAI,cAAc;oBACzC,YAAY,IAAI,CAAC,6BAA6B,CAAC,eAAe;gBAChE;gBAEA,IAAI,CAAC,sBAAsB,CAAC,YAAY,MAAM;YAChD;QACF;IACF;IAEA,iCAAiC;IACzB,kBAAkB,OAA0B,EAA0B;QAC5E,MAAM,WAAmC,CAAC;QAE1C,kBAAkB;QAClB,MAAM,UAAoC,CAAC;QAC3C,QAAQ,OAAO,CAAC,CAAA;YACd,OAAO,IAAI,CAAC,KAAK,OAAO,EAAE,OAAO,CAAC,CAAA;gBAChC,MAAM,QAAQ,KAAK,OAAO,CAAC,OAAmC;gBAC9D,IAAI,OAAO,UAAU,UAAU;oBAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,GAAG,EAAE;oBAC1C,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;gBACvB;YACF;QACF;QAEA,mCAAmC;QACnC,OAAO,IAAI,CAAC,SAAS,OAAO,CAAC,CAAA;YAC3B,MAAM,SAAS,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI;YAClD,MAAM,MAAM,KAAK,KAAK,CAAC,OAAO,MAAM,GAAG;YACvC,QAAQ,CAAC,OAAO,GAAG,OAAO,MAAM,GAAG,MAAM,IACrC,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,IAAI,IAClC,MAAM,CAAC,IAAI;QACjB;QAEA,OAAO;IACT;IAEA,0BAA0B;IAClB,sBAAsB,aAAqB,EAA0C;QAC3F,MAAM,YAAY,KAAK,GAAG,CAAC;QAE3B,IAAI,aAAa,IAAI,OAAO;QAC5B,IAAI,aAAa,IAAI,OAAO;QAC5B,IAAI,aAAa,IAAI,OAAO;QAC5B,OAAO;IACT;IAEA,kCAAkC;IAC1B,8BAA8B,OAA0B,EAAE,MAAc,EAAU;QACxF,MAAM,SAAS,QACZ,GAAG,CAAC,CAAA,OAAQ,KAAK,OAAO,CAAC,OAAmC,EAC5D,MAAM,CAAC,CAAA,QAAS,OAAO,UAAU;QAEpC,IAAI,OAAO,MAAM,GAAG,GAAG,OAAO;QAE9B,qCAAqC;QACrC,MAAM,OAAO,OAAO,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,KAAK,KAAK,OAAO,MAAM;QACtE,MAAM,WAAW,OAAO,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,KAAK,GAAG,CAAC,MAAM,MAAM,IAAI,KAAK,OAAO,MAAM;QAC9F,MAAM,SAAS,KAAK,IAAI,CAAC;QACzB,MAAM,KAAK,SAAS;QAEpB,wCAAwC;QACxC,OAAO,KAAK,GAAG,CAAC,KAAK,IAAI;IAC3B;IAEA,gBAAgB;IACR,aAAa,IAAe,EAAE,KAAa,EAAE,IAAY,EAAE,MAAe,EAAE,SAAkB,EAAE,SAAkB,EAAQ;QAChI,MAAM,UAAU,IAAI,CAAC,eAAe;QACpC,MAAM,kBAAkB,aAAa,KAAK,GAAG;QAE7C,MAAM,QAA0B;YAC9B,IAAI;YACJ,MAAM,KAAK,QAAQ;YACnB,QAAQ,KAAK,MAAM;YACnB,cAAc;YACd,WAAW,KAAK,SAAS;YACzB,SAAS,GAAG,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,GAAG,EAAE,MAAM,aAAa,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC;YACjF,WAAW;YACX;YACA;YACA,WAAW,aAAa,IAAI,CAAC,iBAAiB;YAC9C,UAAU;QACZ;QAEA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS;QAEzB,aAAa;QACb,IAAI,CAAC,SAAS,CAAC;QAEf,QAAQ,IAAI,CAAC,CAAC,sBAAsB,EAAE,MAAM,OAAO,EAAE;IACvD;IAEA,2BAA2B;IACnB,uBAAuB,UAAiC,EAAE,IAAY,EAAE,SAAiB,EAAQ;QACvG,MAAM,UAAU,IAAI,CAAC,eAAe;QAEpC,MAAM,QAA0B;YAC9B,IAAI;YACJ,MAAM;YACN,QAAQ,WAAW,MAAM;YACzB,cAAc,WAAW,YAAY;YACrC,WAAW,WAAW,aAAa;YACnC,eAAe,WAAW,aAAa;YACvC,eAAe,WAAW,aAAa;YACvC,SAAS,CAAC,wBAAwB,EAAE,WAAW,MAAM,CAAC,CAAC,EAAE,WAAW,KAAK,CAAC,IAAI,EAAE,WAAW,aAAa,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,WAAW,YAAY,CAAC,IAAI,EAAE,WAAW,aAAa,CAAC,CAAC,CAAC;YAClL;YACA;YACA,WAAW,IAAI,CAAC,iBAAiB;YACjC,UAAU;QACZ;QAEA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS;QAEzB,aAAa;QACb,IAAI,CAAC,SAAS,CAAC;QAEf,QAAQ,IAAI,CAAC,CAAC,2BAA2B,EAAE,MAAM,OAAO,EAAE;IAC5D;IAEA,yCAAyC;IACjC,UAAU,KAAuB,EAAQ;QAC/C,gBAAgB;QAChB,IAAI,aAAa,QAAQ,CAAC,OAAO,EAAE;YACjC,IAAI,CAAC,gBAAgB,CAAC;QACxB;QAEA,kBAAkB;QAClB,IAAI,aAAa,QAAQ,CAAC,SAAS,EAAE;YACnC,IAAI,CAAC,kBAAkB,CAAC;QAC1B;QAEA,gBAAgB;QAChB,IAAI,aAAa,QAAQ,CAAC,OAAO,IAAI,aAAa,OAAO,CAAC,GAAG,EAAE;YAC7D,IAAI,CAAC,gBAAgB,CAAC;QACxB;QAEA,cAAc;QACd,IAAI,aAAa,QAAQ,CAAC,KAAK,IAAI,aAAa,KAAK,CAAC,EAAE,EAAE;YACxD,IAAI,CAAC,cAAc,CAAC;QACtB;IACF;IAEA,qBAAqB;IACb,iBAAiB,KAAuB,EAAQ;QACtD,MAAM,QAAQ,MAAM,IAAI,KAAK,aAAa,OAAO,MAAM,IAAI,KAAK,YAAY,OAAO;QACnF,QAAQ,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE,MAAM,OAAO,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;IAC3D;IAEA,uBAAuB;IACf,mBAAmB,KAAuB,EAAQ;QACxD;;IAYF;IAEA,qBAAqB;IACb,iBAAiB,KAAuB,EAAQ;QACtD,IAAI,CAAC,aAAa,OAAO,CAAC,GAAG,EAAE;QAE/B,MAAM,aAAa,OAAO,CAAC,GAAG,EAAE;YAC9B,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB,GAAG,KAAK,CAAC,CAAA;YACP,QAAQ,KAAK,CAAC,iCAAiC;QACjD;IACF;IAEA,mBAAmB;IACX,eAAe,KAAuB,EAAQ;QACpD,uDAAuD;QACvD,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,MAAM,OAAO,EAAE;IAC9D;IAEA,2BAA2B;IACnB,kBAAkB,KAAa,EAAE,SAAiB,EAAE,SAAiB,EAAW;QACtF,OAAQ;YACN,KAAK;gBACH,OAAO,QAAQ;YACjB,KAAK;gBACH,OAAO,QAAQ;YACjB,KAAK;gBACH,OAAO,UAAU;YACnB,KAAK;gBACH,OAAO,UAAU;YACnB;gBACE,OAAO;QACX;IACF;IAEA,+BAA+B;IACvB,aAAa,MAAc,EAAE,WAAmB,EAAW;QACjE,MAAM,cAAc,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;QACvC,OAAO,cAAc,cAAc,cAAc;IACnD;IAEA,wBAAwB;IAChB,YAAY,MAAc,EAAE,WAAmB,EAAQ;QAC7D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ;IAC7B;IAEA,yBAAyB;IACjB,qBAAqB,IAAY,EAAE,OAA2B,EAAE,SAAiB,EAAQ;QAC/F,MAAM,OAAwB;YAC5B;YACA;QACF;QAEA,MAAM,UAAU,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,EAAE;QACvD,QAAQ,IAAI,CAAC;QAEb,wBAAwB;QACxB,MAAM,SAAS,YAAY,aAAa,UAAU,CAAC,UAAU;QAC7D,MAAM,gBAAgB,QAAQ,MAAM,CAAC,CAAA,IAAK,EAAE,SAAS,GAAG;QAExD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM;IACpC;IAEA,oBAAoB;IACZ,kBAA0B;QAChC,OAAO,WAAW,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,KAAK,MAAM,KAAK,GAAG;IAC5E;IAEA,sBAAsB;IACd,oBAA4B;QAClC,OAAO,aAAa,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG;IAC3D;IAEA,iBAAiB;IACjB,YAAgC;QAC9B,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;IACtC;IAEA,oBAAoB;IACpB,kBAAsC;QACpC,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAA,QAAS,CAAC,MAAM,QAAQ;IACzE;IAEA,gBAAgB;IAChB,aAAa,OAAe,EAAW;QACrC,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC9B,IAAI,CAAC,OAAO,OAAO;QAEnB,MAAM,QAAQ,GAAG;QACjB,MAAM,UAAU,GAAG,KAAK,GAAG;QAE3B,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,MAAM,OAAO,EAAE;QAChD,OAAO;IACT;IAEA,wBAAwB;IACxB,aAAa,IAAe,EAAQ;QAClC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE;IAC/B;IAEA,oBAAoB;IACpB,gBAAgB,MAAc,EAAW;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IAChC;IAEA,kBAAkB;IAClB,gBAA6B;QAC3B,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM;IAC1C;IAEA,0BAA0B;IAC1B,sBAAsB,IAAY,EAAqB;QACrD,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,EAAE;IAChD;IAEA,mBAAmB;IACnB,eAAe,SAAiB,IAAI,KAAK,KAAK,KAAK,IAAI,EAAQ;QAC7D,MAAM,SAAS,KAAK,GAAG,KAAK;QAE5B,KAAK,MAAM,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,CAAE;YACrC,IAAI,MAAM,SAAS,GAAG,QAAQ;gBAC5B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACrB;QACF;IACF;AACF;AAqBO,MAAM,0BAA0B,wBAAwB,WAAW;AAGnE,SAAS;IACd,QAAQ,GAAG,CAAC;IAEZ,8BAA8B;IAC9B,wBAAwB,cAAc;IAEtC,QAAQ,GAAG,CAAC;AACd;AAGO,SAAS,yBAAyB,OAA2B,EAAE,IAAY,EAAE,MAAe,EAAE,SAAkB;IACrH,wBAAwB,gBAAgB,CAAC,SAAS,MAAM,QAAQ;AAClE;AAGO,SAAS;IACd,OAAO,wBAAwB,SAAS;AAC1C;AAGO,SAAS,wBAAwB,OAAe;IACrD,OAAO,wBAAwB,YAAY,CAAC;AAC9C","debugId":null}},
    {"offset": {"line": 2581, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/components/AdvancedPerformanceTracker.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { trackEvent, trackPerformance } from '../lib/analytics';\nimport { performanceBudgetManager, trackPerformanceBudget } from '../lib/performance-budgets';\nimport { advancedRUMManager, initializeRUM } from '../lib/advanced-rum';\nimport { performanceABTestingManager, initializePerformanceABTesting } from '../lib/performance-ab-testing';\nimport { performanceAlertManager, initializePerformanceAlerts, checkPerformanceAndAlert } from '../lib/performance-alerts';\n\ninterface PerformanceMetrics {\n  // Core Web Vitals\n  lcp: number | null;\n  fid: number | null;\n  cls: number | null;\n  \n  // Navigation Timing\n  navigation: {\n    dns: number;\n    tcp: number;\n    request: number;\n    response: number;\n    dom: number;\n    load: number;\n    total: number;\n  };\n  \n  // Paint Timing\n  paint: {\n    fcp: number | null;\n    lcp: number | null;\n  };\n  \n  // Resource Performance\n  resources: {\n    slowResources: Array<{\n      name: string;\n      duration: number;\n      size: number;\n      type: string;\n    }>;\n    totalResources: number;\n    averageLoadTime: number;\n  };\n  \n  // User Experience\n  ux: {\n    timeToInteractive: number | null;\n    firstInputDelay: number | null;\n    cumulativeLayoutShift: number | null;\n  };\n  \n  // Network Information\n  network: {\n    effectiveType: string | null;\n    downlink: number | null;\n    rtt: number | null;\n  };\n  \n  // Memory Usage\n  memory: {\n    usedJSHeapSize: number | null;\n    totalJSHeapSize: number | null;\n    jsHeapSizeLimit: number | null;\n  };\n}\n\ninterface AdvancedPerformanceTrackerProps {\n  onMetrics?: (metrics: PerformanceMetrics) => void;\n  enabled?: boolean;\n  sampleRate?: number; // 0-1, percentage of users to track\n}\n\nexport default function AdvancedPerformanceTracker({ \n  onMetrics, \n  enabled = true,\n  sampleRate = 0.1 // Default to 10% sampling\n}: AdvancedPerformanceTrackerProps) {\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const hasTrackedInitial = useRef(false);\n  const hasTrackedLCP = useRef(false);\n  const hasTrackedFID = useRef(false);\n  const hasTrackedCLS = useRef(false);\n  const resourceObserver = useRef<PerformanceObserver | null>(null);\n  const lcpObserver = useRef<PerformanceObserver | null>(null);\n  const fidObserver = useRef<PerformanceObserver | null>(null);\n  const clsObserver = useRef<PerformanceObserver | null>(null);\n\n  useEffect(() => {\n    if (!enabled || typeof window === 'undefined') return;\n    \n    // Sample rate check\n    if (Math.random() > sampleRate) {\n      console.log('üìä PrepFlow Performance: User not sampled for performance tracking');\n      return;\n    }\n\n    console.log('üöÄ PrepFlow Performance: Starting advanced performance tracking');\n\n    // Initialize performance tracking\n    const initializeTracking = async () => {\n      try {\n        // Initialize advanced monitoring systems\n        initializeRUM();\n        initializePerformanceABTesting();\n        initializePerformanceAlerts();\n        \n        // Track initial page load performance\n        await trackInitialPerformance();\n        \n        // Track Core Web Vitals\n        trackCoreWebVitals();\n        \n        // Track resource performance\n        trackResourcePerformance();\n        \n        // Track user experience metrics\n        trackUserExperience();\n        \n        // Track network information\n        trackNetworkInfo();\n        \n        // Track memory usage\n        trackMemoryUsage();\n        \n        console.log('‚úÖ PrepFlow Performance: All tracking initialized');\n      } catch (error) {\n        console.error('‚ùå PrepFlow Performance: Initialization failed:', error);\n      }\n    };\n\n    if (document.readyState === 'complete') {\n      initializeTracking();\n    } else {\n      window.addEventListener('load', initializeTracking);\n    }\n\n    // Cleanup function\n    return () => {\n      if (resourceObserver.current) resourceObserver.current.disconnect();\n      if (lcpObserver.current) lcpObserver.current.disconnect();\n      if (fidObserver.current) fidObserver.current.disconnect();\n      if (clsObserver.current) clsObserver.current.disconnect();\n    };\n  }, [enabled, sampleRate]);\n\n  // Track initial page load performance\n  const trackInitialPerformance = async () => {\n    if (hasTrackedInitial.current) return;\n    hasTrackedInitial.current = true;\n\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n    \n    if (navigation) {\n      const navigationMetrics = {\n        dns: navigation.domainLookupEnd - navigation.domainLookupStart,\n        tcp: navigation.connectEnd - navigation.connectStart,\n        request: navigation.responseStart - navigation.requestStart,\n        response: navigation.responseEnd - navigation.responseStart,\n        dom: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n        load: navigation.loadEventEnd - navigation.loadEventStart,\n        total: navigation.loadEventEnd - navigation.fetchStart,\n      };\n\n      const paintMetrics = {\n        fcp: paint.find(p => p.name === 'first-contentful-paint')?.startTime || null,\n        lcp: null, // Will be set by LCP observer\n      };\n\n      // Update metrics\n      setMetrics(prev => ({\n        ...prev,\n        navigation: navigationMetrics,\n        paint: paintMetrics,\n        lcp: null,\n        fid: null,\n        cls: null,\n        resources: { slowResources: [], totalResources: 0, averageLoadTime: 0 },\n        ux: { timeToInteractive: null, firstInputDelay: null, cumulativeLayoutShift: null },\n        network: { effectiveType: null, downlink: null, rtt: null },\n        memory: { usedJSHeapSize: null, totalJSHeapSize: null, jsHeapSizeLimit: null }\n      }));\n\n      // Track performance metrics\n      trackPerformance({\n        pageLoadTime: navigationMetrics.total,\n        firstContentfulPaint: paintMetrics.fcp || 0,\n        largestContentfulPaint: 0, // Will be updated by LCP observer\n        firstInputDelay: 0, // Will be updated by FID observer\n        cumulativeLayoutShift: 0, // Will be updated by CLS observer\n        timestamp: Date.now(),\n        page: window.location.pathname,\n        sessionId: 'session_' + Math.random().toString(36).substr(2, 9),\n      });\n      \n      // Send to Google Analytics\n      if (typeof window !== 'undefined' && window.gtag) {\n        window.gtag('event', 'page_performance', {\n          event_category: 'performance',\n          event_label: 'initial_load',\n          value: Math.round(navigationMetrics.total),\n          custom_parameter_page_load_time: Math.round(navigationMetrics.total),\n          custom_parameter_dom_content_loaded: Math.round(navigationMetrics.dom),\n          custom_parameter_first_byte: Math.round(navigationMetrics.request),\n          custom_parameter_page: window.location.pathname,\n        });\n      }\n\n      if (onMetrics) {\n        onMetrics(metrics!);\n      }\n    }\n  };\n\n  // Track Core Web Vitals\n  const trackCoreWebVitals = () => {\n    // LCP Observer\n    if ('PerformanceObserver' in window && !hasTrackedLCP.current) {\n      lcpObserver.current = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1] as PerformanceEntry;\n        \n        if (lastEntry && !hasTrackedLCP.current) {\n          hasTrackedLCP.current = true;\n          const lcp = lastEntry.startTime;\n          \n          setMetrics(prev => ({\n            ...prev,\n            lcp,\n            paint: { ...prev?.paint, lcp }\n          } as PerformanceMetrics));\n          \n          trackEvent('lcp', 'performance', 'largest_contentful_paint', Math.round(lcp));\n          \n          if (typeof window !== 'undefined' && window.gtag) {\n            window.gtag('event', 'largest_contentful_paint', {\n              event_category: 'performance',\n              event_label: 'lcp_measured',\n              value: Math.round(lcp),\n              custom_parameter_lcp_value: Math.round(lcp),\n              custom_parameter_page: window.location.pathname,\n            });\n          }\n          \n          // Check performance budget and trigger alerts\n          const currentMetrics = {\n            lcp: Math.round(lcp),\n            fid: null,\n            cls: null,\n            fcp: null,\n            tti: null,\n          };\n          \n          trackPerformanceBudget(currentMetrics, 'landing');\n          checkPerformanceAndAlert(currentMetrics, window.location.pathname, undefined, `session_${Date.now()}`);\n        }\n      });\n      \n      lcpObserver.current.observe({ entryTypes: ['largest-contentful-paint'] });\n    }\n\n    // FID Observer\n    if ('PerformanceObserver' in window && !hasTrackedFID.current) {\n      fidObserver.current = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry: any) => {\n          if (!hasTrackedFID.current) {\n            hasTrackedFID.current = true;\n            const fid = entry.processingStart - entry.startTime;\n            \n            setMetrics(prev => ({\n              ...prev,\n              fid,\n              ux: { ...prev?.ux, firstInputDelay: fid }\n            } as PerformanceMetrics));\n            \n            trackEvent('fid', 'performance', 'first_input_delay', Math.round(fid));\n            \n            if (typeof window !== 'undefined' && window.gtag) {\n              window.gtag('event', 'first_input_delay', {\n                event_category: 'performance',\n                event_label: 'fid_measured',\n                value: Math.round(fid),\n                custom_parameter_fid_value: Math.round(fid),\n                custom_parameter_page: window.location.pathname,\n              });\n            }\n          }\n        });\n      });\n      \n      fidObserver.current.observe({ entryTypes: ['first-input'] });\n    }\n\n    // CLS Observer\n    if ('PerformanceObserver' in window && !hasTrackedCLS.current) {\n      let clsValue = 0;\n      clsObserver.current = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry: any) => {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n          }\n        });\n      });\n      \n      clsObserver.current.observe({ entryTypes: ['layout-shift'] });\n      \n      // Track CLS after a delay\n      setTimeout(() => {\n        if (!hasTrackedCLS.current && clsValue > 0) {\n          hasTrackedCLS.current = true;\n          \n          setMetrics(prev => ({\n            ...prev,\n            cls: clsValue,\n            ux: { ...prev?.ux, cumulativeLayoutShift: clsValue }\n          } as PerformanceMetrics));\n          \n          trackEvent('cls', 'performance', 'cumulative_layout_shift', Math.round(clsValue * 1000));\n          \n          if (typeof window !== 'undefined' && window.gtag) {\n            window.gtag('event', 'cumulative_layout_shift', {\n              event_category: 'performance',\n              event_label: 'cls_measured',\n              value: Math.round(clsValue * 1000),\n              custom_parameter_cls_value: Math.round(clsValue * 1000),\n              custom_parameter_page: window.location.pathname,\n            });\n          }\n        }\n      }, 5000);\n    }\n  };\n\n  // Track resource performance\n  const trackResourcePerformance = () => {\n    if ('PerformanceObserver' in window) {\n      const slowResources: Array<{name: string, duration: number, size: number, type: string}> = [];\n      let totalResources = 0;\n      let totalLoadTime = 0;\n\n      resourceObserver.current = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry: any) => {\n          if (entry.entryType === 'resource') {\n            totalResources++;\n            totalLoadTime += entry.duration;\n            \n            if (entry.duration > 1000) { // Slow resources > 1 second\n              slowResources.push({\n                name: entry.name,\n                duration: Math.round(entry.duration),\n                size: entry.transferSize || 0,\n                type: entry.initiatorType,\n              });\n            }\n          }\n        });\n\n        const averageLoadTime = totalResources > 0 ? totalLoadTime / totalResources : 0;\n\n        setMetrics(prev => ({\n          ...prev,\n          resources: {\n            slowResources,\n            totalResources,\n            averageLoadTime: Math.round(averageLoadTime)\n          }\n        } as PerformanceMetrics));\n\n        // Track slow resources\n        if (slowResources.length > 0) {\n          trackEvent('slow_resources', 'performance', 'slow_loading', slowResources.length);\n          \n          if (typeof window !== 'undefined' && window.gtag) {\n            window.gtag('event', 'slow_resources', {\n              event_category: 'performance',\n              event_label: 'slow_loading_detected',\n              value: slowResources.length,\n              custom_parameter_slow_resources_count: slowResources.length,\n              custom_parameter_page: window.location.pathname,\n            });\n          }\n        }\n      });\n      \n      resourceObserver.current.observe({ entryTypes: ['resource'] });\n    }\n  };\n\n  // Track user experience metrics\n  const trackUserExperience = () => {\n    // Time to Interactive (TTI) - simplified version\n    const tti = performance.now();\n    \n    setMetrics(prev => ({\n      ...prev,\n      ux: { ...prev?.ux, timeToInteractive: tti }\n    } as PerformanceMetrics));\n\n    // Track user interactions\n    const trackInteraction = () => {\n      const interactionTime = performance.now();\n      \n      trackEvent('user_interaction', 'performance', 'interaction_timing', Math.round(interactionTime));\n      \n      if (typeof window !== 'undefined' && window.gtag) {\n        window.gtag('event', 'user_interaction', {\n          event_category: 'performance',\n          event_label: 'interaction_timing',\n          value: Math.round(interactionTime),\n          custom_parameter_time_since_load: Math.round(interactionTime),\n          custom_parameter_page: window.location.pathname,\n        });\n      }\n    };\n\n    // Track first interaction\n    document.addEventListener('click', trackInteraction, { once: true });\n    document.addEventListener('scroll', trackInteraction, { once: true });\n  };\n\n  // Track network information\n  const trackNetworkInfo = () => {\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      \n      setMetrics(prev => ({\n        ...prev,\n        network: {\n          effectiveType: connection.effectiveType || null,\n          downlink: connection.downlink || null,\n          rtt: connection.rtt || null,\n        }\n      } as PerformanceMetrics));\n\n      // Track network quality\n      trackEvent('network_quality', 'performance', connection.effectiveType || 'unknown', 0);\n    }\n  };\n\n  // Track memory usage\n  const trackMemoryUsage = () => {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      \n      setMetrics(prev => ({\n        ...prev,\n        memory: {\n          usedJSHeapSize: memory.usedJSHeapSize || null,\n          totalJSHeapSize: memory.totalJSHeapSize || null,\n          jsHeapSizeLimit: memory.jsHeapSizeLimit || null,\n        }\n      } as PerformanceMetrics));\n\n      // Track memory usage\n      const memoryUsagePercent = memory.usedJSHeapSize / memory.jsHeapSizeLimit * 100;\n      trackEvent('memory_usage', 'performance', 'memory_usage', Math.round(memoryUsagePercent));\n    }\n  };\n\n  // This component doesn't render anything visible\n  return null;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2899, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/components/ClientPerformanceTracker.tsx"],"sourcesContent":["'use client';\n\nimport AdvancedPerformanceTracker from './AdvancedPerformanceTracker';\n\nexport default function ClientPerformanceTracker() {\n  return <AdvancedPerformanceTracker />;\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBAAO,8OAAC,yIAAA,CAAA,UAA0B;;;;;AACpC","debugId":null}}]
}