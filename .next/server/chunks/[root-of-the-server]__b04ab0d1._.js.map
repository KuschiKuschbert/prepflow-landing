{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/recipe-ingredients/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const recipeId = searchParams.get('recipe_id');\n\n    if (!recipeId) {\n      return NextResponse.json({ error: 'recipe_id parameter is required' }, { status: 400 });\n    }\n\n    const { data: recipeIngredients, error } = await supabaseAdmin\n      .from('recipe_ingredients')\n      .select(`\n        *,\n        ingredients (\n          id,\n          ingredient_name,\n          cost_per_unit,\n          unit,\n          trim_peel_waste_percentage,\n          yield_percentage\n        )\n      `)\n      .eq('recipe_id', recipeId);\n\n    if (error) {\n      console.error('Error fetching recipe ingredients:', error);\n      return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true, \n      recipeIngredients: recipeIngredients || [],\n      count: recipeIngredients?.length || 0\n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,WAAW,aAAa,GAAG,CAAC;QAElC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,MAAM,EAAE,MAAM,iBAAiB,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CAC3D,IAAI,CAAC,sBACL,MAAM,CAAC,CAAC;;;;;;;;;;MAUT,CAAC,EACA,EAAE,CAAC,aAAa;QAEnB,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,sCAAsC;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,mBAAmB,qBAAqB,EAAE;YAC1C,OAAO,mBAAmB,UAAU;QACtC;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}