{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/cleaning-tasks/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const areaId = searchParams.get('area_id');\n    const status = searchParams.get('status');\n    const date = searchParams.get('date');\n\n    let query = supabaseAdmin\n      .from('cleaning_tasks')\n      .select(`\n        *,\n        cleaning_areas (\n          id,\n          name,\n          description,\n          frequency_days\n        )\n      `)\n      .order('assigned_date', { ascending: false });\n\n    if (areaId) {\n      query = query.eq('area_id', areaId);\n    }\n    if (status) {\n      query = query.eq('status', status);\n    }\n    if (date) {\n      query = query.eq('assigned_date', date);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error fetching cleaning tasks:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch cleaning tasks',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Cleaning tasks fetch error:', error);\n    return NextResponse.json({ \n      error: 'Failed to fetch cleaning tasks',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { area_id, assigned_date, notes } = body;\n\n    if (!area_id || !assigned_date) {\n      return NextResponse.json({ \n        error: 'Required fields missing',\n        message: 'Please provide area_id and assigned_date'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('cleaning_tasks')\n      .insert({\n        area_id,\n        assigned_date,\n        notes: notes || null,\n        status: 'pending'\n      })\n      .select(`\n        *,\n        cleaning_areas (\n          id,\n          name,\n          description,\n          frequency_days\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error creating cleaning task:', error);\n      return NextResponse.json({ \n        error: 'Failed to create cleaning task',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Cleaning task created successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Cleaning task creation error:', error);\n    return NextResponse.json({ \n      error: 'Failed to create cleaning task',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { id, status, completed_date, notes, photo_url } = body;\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the cleaning task to update'\n      }, { status: 400 });\n    }\n\n    const updateData: any = {};\n    if (status !== undefined) updateData.status = status;\n    if (completed_date !== undefined) updateData.completed_date = completed_date;\n    if (notes !== undefined) updateData.notes = notes;\n    if (photo_url !== undefined) updateData.photo_url = photo_url;\n\n    // If marking as completed, set completed_date to now\n    if (status === 'completed' && !completed_date) {\n      updateData.completed_date = new Date().toISOString();\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('cleaning_tasks')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        *,\n        cleaning_areas (\n          id,\n          name,\n          description,\n          frequency_days\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error updating cleaning task:', error);\n      return NextResponse.json({ \n        error: 'Failed to update cleaning task',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Cleaning task updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Cleaning task update error:', error);\n    return NextResponse.json({ \n      error: 'Failed to update cleaning task',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the cleaning task to delete'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { error } = await supabaseAdmin\n      .from('cleaning_tasks')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting cleaning task:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete cleaning task',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Cleaning task deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Cleaning task deletion error:', error);\n    return NextResponse.json({ \n      error: 'Failed to delete cleaning task',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}