{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///workspace/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///workspace/app/api/ingredients/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createSupabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const supabaseAdmin = createSupabaseAdmin();\n    \n    const { data, error } = await supabaseAdmin\n      .from('ingredients')\n      .select('*')\n      .order('ingredient_name');\n\n    if (error) {\n      console.error('Error fetching ingredients:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch ingredients',\n        details: error.message \n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true, \n      ingredients: data \n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,gBAAgB,IAAA,wIAAmB;QAEzC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,cAC3B,IAAI,CAAC,eACL,MAAM,CAAC,KACP,KAAK,CAAC;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS,MAAM,OAAO;YACxB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,aAAa;QACf;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}