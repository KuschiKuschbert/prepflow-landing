{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/create-correct-rls-policies/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  try {\n    return NextResponse.json({\n      success: true,\n      message: 'Here are the correct SQL commands to run in Supabase SQL Editor',\n      sqlCommands: [\n        {\n          step: 1,\n          description: 'Enable RLS on ingredients table',\n          sql: 'ALTER TABLE ingredients ENABLE ROW LEVEL SECURITY;'\n        },\n        {\n          step: 2,\n          description: 'Create SELECT policy for public read access',\n          sql: `CREATE POLICY \"public can read ingredients\" \nON public.ingredients \nFOR SELECT \nTO anon \nUSING (true);`\n        },\n        {\n          step: 3,\n          description: 'Create INSERT policy for public insert access',\n          sql: `CREATE POLICY \"public can insert ingredients\" \nON public.ingredients \nFOR INSERT \nTO anon \nWITH CHECK (true);`\n        },\n        {\n          step: 4,\n          description: 'Create UPDATE policy for public update access',\n          sql: `CREATE POLICY \"public can update ingredients\" \nON public.ingredients \nFOR UPDATE \nTO anon \nUSING (true);`\n        },\n        {\n          step: 5,\n          description: 'Create DELETE policy for public delete access',\n          sql: `CREATE POLICY \"public can delete ingredients\" \nON public.ingredients \nFOR DELETE \nTO anon \nUSING (true);`\n        }\n      ],\n      instructions: `\n        1. Go to: https://supabase.com/dashboard/project/dulkrqgjfohsuxhsmofo\n        2. Navigate to: SQL Editor\n        3. Click \"New query\"\n        4. Copy and paste each SQL command above one by one\n        5. Click \"Run\" after each command\n        6. Refresh your webapp to see the changes\n      `\n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({\n      error: 'Internal server error',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,aAAa;gBACX;oBACE,MAAM;oBACN,aAAa;oBACb,KAAK;gBACP;gBACA;oBACE,MAAM;oBACN,aAAa;oBACb,KAAK,CAAC;;;;aAIH,CAAC;gBACN;gBACA;oBACE,MAAM;oBACN,aAAa;oBACb,KAAK,CAAC;;;;kBAIE,CAAC;gBACX;gBACA;oBACE,MAAM;oBACN,aAAa;oBACb,KAAK,CAAC;;;;aAIH,CAAC;gBACN;gBACA;oBACE,MAAM;oBACN,aAAa;oBACb,KAAK,CAAC;;;;aAIH,CAAC;gBACN;aACD;YACD,cAAc,CAAC;;;;;;;MAOf,CAAC;QACH;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}