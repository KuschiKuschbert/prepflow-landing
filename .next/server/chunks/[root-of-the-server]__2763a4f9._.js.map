{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/performance/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data: dishes, error: dishesError } = await supabaseAdmin\n      .from('menu_dishes')\n      .select(`\n        *,\n        sales_data (\n          id,\n          number_sold,\n          popularity_percentage,\n          date\n        )\n      `)\n      .order('created_at', { ascending: false });\n\n    if (dishesError) {\n      console.error('Error fetching dishes:', dishesError);\n      return NextResponse.json({ \n        error: 'Database error',\n        message: 'Could not retrieve menu dishes from database',\n        details: dishesError\n      }, { status: 500 });\n    }\n\n    // Filter dishes with sales data for analysis\n    const dishesWithSales = dishes?.filter(dish => dish.sales_data && dish.sales_data.length > 0) || [];\n\n    // Remove duplicates by keeping only the most recent entry for each dish name\n    const uniqueDishes = dishes?.reduce((acc: any[], dish: any) => {\n      const existingDish = acc.find((d: any) => d.name === dish.name);\n      if (!existingDish || new Date(dish.created_at) > new Date(existingDish.created_at)) {\n        // Remove existing entry if it exists\n        const filteredAcc = acc.filter((d: any) => d.name !== dish.name);\n        return [...filteredAcc, dish];\n      }\n      return acc;\n    }, [] as any[]) || [];\n\n    // PrepFlow COGS Methodology - Dynamic thresholds based on menu averages\n    // Calculate average profit margin across all unique dishes\n    const averageProfitMargin = uniqueDishes.length > 0\n      ? uniqueDishes.reduce((sum, dish) => sum + dish.profit_margin, 0) / uniqueDishes.length\n      : 70.0; // Default fallback average\n\n    // Calculate average popularity across all dishes with sales data\n    const averagePopularity = dishesWithSales.length > 0\n      ? dishesWithSales.reduce((sum, dish) => {\n          const latestSales = dish.sales_data?.[0];\n          return sum + (latestSales?.popularity_percentage || 0);\n        }, 0) / dishesWithSales.length\n      : 8.3; // Default fallback average\n\n    // Dynamic thresholds based on PrepFlow methodology\n    const profitThreshold = averageProfitMargin; // HIGH if above menu average\n    const popularityThreshold = averagePopularity * 0.8; // HIGH if ≥ 80% of average popularity\n\n    const performanceData = uniqueDishes.map(dish => {\n      const latestSales = dish.sales_data?.[0]; // Get most recent sales data\n      const numberSold = latestSales?.number_sold || 0;\n      const popularityPercentage = latestSales?.popularity_percentage || 0;\n      \n      // Calculate food cost and contribution margin (PrepFlow's key metric)\n      // In PrepFlow Excel: profit_margin is actually gross profit percentage\n      // Food cost = selling price * (100 - profit_margin) / 100\n      const foodCost = dish.selling_price * (100 - dish.profit_margin) / 100;\n      const contributionMargin = dish.selling_price - foodCost;\n      \n      // Calculate gross profit excluding GST (PrepFlow standard)\n      // Assuming 10% GST rate for Australia\n      const gstRate = 0.10;\n      const grossProfitExclGST = contributionMargin / (1 + gstRate);\n      \n      // Calculate Profit Category: HIGH if above menu average, LOW if below (PrepFlow standard)\n      const profitCategory = dish.profit_margin >= profitThreshold ? 'High' : 'Low';\n\n      // Calculate Popularity Category: HIGH if ≥ 80% of average popularity, LOW if below (PrepFlow standard)\n      const popularityCategory = popularityPercentage >= popularityThreshold ? 'High' : 'Low';\n\n      // Calculate Menu Item Class (combination of Profit Cat + Popularity Cat)\n      let menuItemClass: string;\n      if (profitCategory === 'High' && popularityCategory === 'High') {\n        menuItemClass = 'Chef\\'s Kiss';\n      } else if (profitCategory === 'High' && popularityCategory === 'Low') {\n        menuItemClass = 'Hidden Gem';\n      } else if (profitCategory === 'Low' && popularityCategory === 'High') {\n        menuItemClass = 'Bargain Bucket';\n      } else {\n        menuItemClass = 'Burnt Toast';\n      }\n\n      return {\n        ...dish,\n        number_sold: numberSold,\n        popularity_percentage: popularityPercentage,\n        profit_category: profitCategory,\n        popularity_category: popularityCategory,\n        menu_item_class: menuItemClass,\n        food_cost: foodCost,\n        contribution_margin: contributionMargin,\n        gross_profit: grossProfitExclGST, // Gross profit excluding GST\n        gross_profit_percentage: dish.profit_margin\n      };\n    })\n    // Filter out items with no sales (number_sold = 0 or null)\n    .filter(dish => dish.number_sold > 0) || [];\n\n    return NextResponse.json({\n      success: true,\n      data: performanceData,\n      message: 'Performance data retrieved successfully',\n      metadata: {\n        methodology: 'PrepFlow COGS Dynamic',\n        averageProfitMargin: averageProfitMargin,\n        averagePopularity: averagePopularity,\n        profitThreshold: profitThreshold,\n        popularityThreshold: popularityThreshold,\n        totalDishes: dishes?.length || 0,\n        uniqueDishes: uniqueDishes.length,\n        dishesWithSales: dishesWithSales.length\n      }\n    });\n\n  } catch (error) {\n    console.error('Error in performance API:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred',\n      details: error\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { dish_id, number_sold, popularity_percentage, date } = await request.json();\n\n    if (!dish_id || !number_sold || !popularity_percentage) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'dish_id, number_sold, and popularity_percentage are required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // Upsert sales data\n    const { data, error } = await supabaseAdmin\n      .from('sales_data')\n      .upsert({\n        dish_id: dish_id,\n        number_sold: number_sold,\n        popularity_percentage: popularity_percentage,\n        date: date || new Date().toISOString().split('T')[0]\n      }, {\n        onConflict: 'dish_id,date'\n      })\n      .select();\n\n    if (error) {\n      console.error('Error inserting sales data:', error);\n      return NextResponse.json({ \n        error: 'Database error',\n        message: 'Could not update sales data',\n        details: error\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: data,\n      message: 'Sales data updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Error in performance POST API:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred',\n      details: error\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}