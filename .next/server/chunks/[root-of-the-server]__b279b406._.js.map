{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/fix-rls-policies/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createSupabaseAdmin } from '@/lib/supabase';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabaseAdmin = createSupabaseAdmin();\n\n    // Create RLS policy to allow public read access to ingredients\n    const { data, error } = await supabaseAdmin.rpc('exec_sql', {\n      sql: `\n        -- Enable RLS on ingredients table\n        ALTER TABLE ingredients ENABLE ROW LEVEL SECURITY;\n        \n        -- Create policy to allow public read access\n        CREATE POLICY \"Allow public read access to ingredients\" ON ingredients\n        FOR SELECT USING (true);\n        \n        -- Create policy to allow public insert (for adding ingredients)\n        CREATE POLICY \"Allow public insert to ingredients\" ON ingredients\n        FOR INSERT WITH CHECK (true);\n        \n        -- Create policy to allow public update (for editing ingredients)\n        CREATE POLICY \"Allow public update to ingredients\" ON ingredients\n        FOR UPDATE USING (true);\n        \n        -- Create policy to allow public delete (for removing ingredients)\n        CREATE POLICY \"Allow public delete to ingredients\" ON ingredients\n        FOR DELETE USING (true);\n      `\n    });\n\n    if (error) {\n      console.error('Error creating RLS policies:', error);\n      return NextResponse.json({\n        error: 'Failed to create RLS policies',\n        message: 'The exec_sql function might not be available. Please create the policies manually in Supabase dashboard.',\n        instructions: `\n          1. Go to Supabase Dashboard → Authentication → Policies\n          2. Select the 'ingredients' table\n          3. Create these policies:\n             - SELECT: \"Allow public read access to ingredients\" (USING: true)\n             - INSERT: \"Allow public insert to ingredients\" (WITH CHECK: true)\n             - UPDATE: \"Allow public update to ingredients\" (USING: true)\n             - DELETE: \"Allow public delete to ingredients\" (USING: true)\n        `,\n        errorDetails: error\n      }, { status: 400 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'RLS policies created successfully!',\n      data: data\n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({\n      error: 'Internal server error',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iHAAA,CAAA,sBAAmB,AAAD;QAExC,+DAA+D;QAC/D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,cAAc,GAAG,CAAC,YAAY;YAC1D,KAAK,CAAC;;;;;;;;;;;;;;;;;;;MAmBN,CAAC;QACH;QAEA,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;gBACT,cAAc,CAAC;;;;;;;;QAQf,CAAC;gBACD,cAAc;YAChB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}