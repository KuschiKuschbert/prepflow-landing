{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/create-tables/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // For now, we'll create a simple response indicating that tables need to be created manually\n    // This is because Supabase requires SQL execution through their dashboard or CLI\n    return NextResponse.json({ \n      success: true, \n      message: 'Please create the database tables manually in Supabase dashboard',\n      instructions: {\n        step1: 'Go to your Supabase dashboard',\n        step2: 'Navigate to SQL Editor',\n        step3: 'Run the provided SQL script to create tables',\n        step4: 'Then run the setup-database API to populate data'\n      },\n      sqlScript: `\n-- Create ingredients table\nCREATE TABLE IF NOT EXISTS ingredients (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  brand VARCHAR(255),\n  pack_size DECIMAL(10,2),\n  unit VARCHAR(50),\n  cost_per_unit DECIMAL(10,4),\n  trim_peel_waste_percent DECIMAL(5,2),\n  yield_percent DECIMAL(5,2),\n  supplier VARCHAR(255),\n  storage VARCHAR(100),\n  product_code VARCHAR(100),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create recipes table\nCREATE TABLE IF NOT EXISTS recipes (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  yield_servings INTEGER,\n  instructions TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create recipe_ingredients table\nCREATE TABLE IF NOT EXISTS recipe_ingredients (\n  id SERIAL PRIMARY KEY,\n  recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE,\n  ingredient_id INTEGER REFERENCES ingredients(id) ON DELETE CASCADE,\n  quantity DECIMAL(10,3) NOT NULL,\n  unit VARCHAR(50) NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create menu_dishes table\nCREATE TABLE IF NOT EXISTS menu_dishes (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  recipe_id INTEGER REFERENCES recipes(id),\n  selling_price DECIMAL(10,2),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create users table (if not exists)\nCREATE TABLE IF NOT EXISTS users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255),\n  first_name VARCHAR(100),\n  last_name VARCHAR(100),\n  business_name VARCHAR(255),\n  subscription_status VARCHAR(50) DEFAULT 'trial',\n  subscription_expires TIMESTAMP WITH TIME ZONE,\n  stripe_customer_id VARCHAR(255),\n  email_verified BOOLEAN DEFAULT FALSE,\n  email_verification_token VARCHAR(255),\n  email_verification_expires TIMESTAMP WITH TIME ZONE,\n  password_reset_token VARCHAR(255),\n  password_reset_expires TIMESTAMP WITH TIME ZONE,\n  failed_login_attempts INTEGER DEFAULT 0,\n  locked_until TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n      `\n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,6FAA6F;QAC7F,iFAAiF;QACjF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,cAAc;gBACZ,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;YACT;YACA,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwEZ,CAAC;QACH;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}