{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/kitchen-sections/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json({ \n        error: 'User ID is required',\n        message: 'Please provide a valid user ID'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('kitchen_sections')\n      .select(`\n        *,\n        menu_dishes (\n          id,\n          name,\n          description,\n          selling_price,\n          category\n        )\n      `)\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching kitchen sections:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch kitchen sections',\n        message: 'Could not retrieve kitchen section data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Kitchen sections API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, name, description, color } = body;\n\n    if (!userId || !name) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'User ID and name are required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('kitchen_sections')\n      .insert({\n        user_id: userId,\n        name: name,\n        description: description,\n        color: color || '#29E7CD',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating kitchen section:', error);\n      return NextResponse.json({ \n        error: 'Failed to create kitchen section',\n        message: 'Could not save kitchen section data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Kitchen section created successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Kitchen sections API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { id, name, description, color } = body;\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'Kitchen section ID is required'\n      }, { status: 400 });\n    }\n\n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (name !== undefined) updateData.name = name;\n    if (description !== undefined) updateData.description = description;\n    if (color !== undefined) updateData.color = color;\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('kitchen_sections')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating kitchen section:', error);\n      return NextResponse.json({ \n        error: 'Failed to update kitchen section',\n        message: 'Could not update kitchen section data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Kitchen section updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Kitchen sections API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'Missing ID',\n        message: 'Kitchen section ID is required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // First, remove section assignment from all dishes\n    await supabaseAdmin\n      .from('menu_dishes')\n      .update({ kitchen_section_id: null })\n      .eq('kitchen_section_id', id);\n\n    // Then delete the kitchen section\n    const { error } = await supabaseAdmin\n      .from('kitchen_sections')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting kitchen section:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete kitchen section',\n        message: 'Could not remove kitchen section'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Kitchen section deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Kitchen sections API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACX,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,kIAAa,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAa,CACxC,IAAI,CAAC,oBACL,MAAM,CAAC,CAAC;;;;;;;;;MAST,CAAC,EACA,EAAE,CAAC,WAAW,QACd,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,QAAQ,EAAE;QAClB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG;QAE7C,IAAI,CAAC,UAAU,CAAC,MAAM;YACpB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,kIAAa,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAa,CACxC,IAAI,CAAC,oBACL,MAAM,CAAC;YACN,SAAS;YACT,MAAM;YACN,aAAa;YACb,OAAO,SAAS;YAChB,YAAY,IAAI,OAAO,WAAW;YAClC,YAAY,IAAI,OAAO,WAAW;QACpC,GACC,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG;QAEzC,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,aAAkB;YACtB,YAAY,IAAI,OAAO,WAAW;QACpC;QAEA,IAAI,SAAS,WAAW,WAAW,IAAI,GAAG;QAC1C,IAAI,gBAAgB,WAAW,WAAW,WAAW,GAAG;QACxD,IAAI,UAAU,WAAW,WAAW,KAAK,GAAG;QAE5C,IAAI,CAAC,kIAAa,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAa,CACxC,IAAI,CAAC,oBACL,MAAM,CAAC,YACP,EAAE,CAAC,MAAM,IACT,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,kIAAa,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,mDAAmD;QACnD,MAAM,kIAAa,CAChB,IAAI,CAAC,eACL,MAAM,CAAC;YAAE,oBAAoB;QAAK,GAClC,EAAE,CAAC,sBAAsB;QAE5B,kCAAkC;QAClC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAa,CAClC,IAAI,CAAC,oBACL,MAAM,GACN,EAAE,CAAC,MAAM;QAEZ,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}