{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///workspace/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///workspace/app/api/enable-rls-security/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function POST() {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // Enable RLS on all tables\n    const enableRLSQueries = [\n      'ALTER TABLE public.ingredients ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.recipes ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.recipe_ingredients ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.menu_dishes ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.sales_data ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.users ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.cleaning_areas ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.temperature_equipment ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.kitchen_sections ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.compliance_types ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.recipe_items ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.ai_specials_ingredients ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.admin_impersonation_logs ENABLE ROW LEVEL SECURITY',\n      'ALTER TABLE public.impersonation_logs ENABLE ROW LEVEL SECURITY'\n    ];\n\n    const results = [];\n    \n    for (const query of enableRLSQueries) {\n      try {\n        const { error } = await supabaseAdmin.rpc('exec_sql', { sql: query });\n        if (error) {\n          results.push({ query, status: 'error', error: error.message });\n        } else {\n          results.push({ query, status: 'success' });\n        }\n      } catch (err) {\n        results.push({ \n          query, \n          status: 'error', \n          error: err instanceof Error ? err.message : 'Unknown error' \n        });\n      }\n    }\n\n    // Create RLS policies for authenticated users\n    const policyQueries = [\n      // Core tables - allow authenticated users\n      `CREATE POLICY \"Allow authenticated users to manage ingredients\" ON public.ingredients FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage recipes\" ON public.recipes FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage recipe ingredients\" ON public.recipe_ingredients FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage menu dishes\" ON public.menu_dishes FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage sales data\" ON public.sales_data FOR ALL USING (auth.role() = 'authenticated')`,\n      \n      // User-specific tables\n      `CREATE POLICY \"Allow users to manage their own data\" ON public.users FOR ALL USING (auth.uid() = id)`,\n      `CREATE POLICY \"Allow users to manage their own subscriptions\" ON public.subscriptions FOR ALL USING (auth.uid() = user_id)`,\n      \n      // Restaurant management tables\n      `CREATE POLICY \"Allow authenticated users to manage suppliers\" ON public.suppliers FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage cleaning areas\" ON public.cleaning_areas FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage temperature equipment\" ON public.temperature_equipment FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage kitchen sections\" ON public.kitchen_sections FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage compliance types\" ON public.compliance_types FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage recipe items\" ON public.recipe_items FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage ai specials ingredients\" ON public.ai_specials_ingredients FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage admin impersonation logs\" ON public.admin_impersonation_logs FOR ALL USING (auth.role() = 'authenticated')`,\n      `CREATE POLICY \"Allow authenticated users to manage impersonation logs\" ON public.impersonation_logs FOR ALL USING (auth.role() = 'authenticated')`,\n      \n      // Service role policies for API operations\n      `CREATE POLICY \"Service role can manage all ingredients\" ON public.ingredients FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all recipes\" ON public.recipes FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all recipe ingredients\" ON public.recipe_ingredients FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all menu dishes\" ON public.menu_dishes FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all sales data\" ON public.sales_data FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all users\" ON public.users FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all subscriptions\" ON public.subscriptions FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all suppliers\" ON public.suppliers FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all cleaning areas\" ON public.cleaning_areas FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all temperature equipment\" ON public.temperature_equipment FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all kitchen sections\" ON public.kitchen_sections FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all compliance types\" ON public.compliance_types FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all recipe items\" ON public.recipe_items FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all ai specials ingredients\" ON public.ai_specials_ingredients FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all admin impersonation logs\" ON public.admin_impersonation_logs FOR ALL USING (auth.role() = 'service_role')`,\n      `CREATE POLICY \"Service role can manage all impersonation logs\" ON public.impersonation_logs FOR ALL USING (auth.role() = 'service_role')`\n    ];\n\n    for (const query of policyQueries) {\n      try {\n        const { error } = await supabaseAdmin.rpc('exec_sql', { sql: query });\n        if (error) {\n          results.push({ query, status: 'error', error: error.message });\n        } else {\n          results.push({ query, status: 'success' });\n        }\n      } catch (err) {\n        results.push({ \n          query, \n          status: 'error', \n          error: err instanceof Error ? err.message : 'Unknown error' \n        });\n      }\n    }\n\n    const successCount = results.filter(r => r.status === 'success').length;\n    const errorCount = results.filter(r => r.status === 'error').length;\n\n    return NextResponse.json({\n      success: true,\n      message: `RLS Security enabled successfully! ${successCount} operations completed, ${errorCount} errors`,\n      results: results,\n      summary: {\n        total: results.length,\n        successful: successCount,\n        errors: errorCount\n      }\n    });\n\n  } catch (err) {\n    console.error('RLS Security setup error:', err);\n    return NextResponse.json({ \n      error: 'Failed to enable RLS security',\n      message: 'An error occurred while setting up Row Level Security',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}