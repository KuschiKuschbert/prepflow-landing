{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/order-lists/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json({ \n        error: 'User ID is required',\n        message: 'Please provide a valid user ID'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('order_lists')\n      .select(`\n        *,\n        suppliers (\n          id,\n          name,\n          contact_person,\n          phone,\n          email\n        ),\n        order_list_items (\n          id,\n          ingredient_id,\n          quantity,\n          unit,\n          notes,\n          ingredients (\n            id,\n            name,\n            unit,\n            category\n          )\n        )\n      `)\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching order lists:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch order lists',\n        message: 'Could not retrieve order list data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Order lists API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, supplierId, name, notes, items } = body;\n\n    if (!userId || !supplierId || !name) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'User ID, supplier ID, and name are required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // Create the order list\n    const { data: orderList, error: orderError } = await supabaseAdmin\n      .from('order_lists')\n      .insert({\n        user_id: userId,\n        supplier_id: supplierId,\n        name: name,\n        notes: notes,\n        status: 'draft',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n\n    if (orderError) {\n      console.error('Error creating order list:', orderError);\n      return NextResponse.json({ \n        error: 'Failed to create order list',\n        message: 'Could not save order list data'\n      }, { status: 500 });\n    }\n\n    // Add items if provided\n    if (items && items.length > 0) {\n      const orderItems = items.map((item: any) => ({\n        order_list_id: orderList.id,\n        ingredient_id: item.ingredientId,\n        quantity: item.quantity,\n        unit: item.unit,\n        notes: item.notes\n      }));\n\n      const { error: itemsError } = await supabaseAdmin\n        .from('order_list_items')\n        .insert(orderItems);\n\n      if (itemsError) {\n        console.error('Error creating order list items:', itemsError);\n        // Don't fail the entire request, just log the error\n      }\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Order list created successfully',\n      data: orderList\n    });\n\n  } catch (error) {\n    console.error('Order lists API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { id, supplierId, name, notes, status, items } = body;\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'Order list ID is required'\n      }, { status: 400 });\n    }\n\n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (supplierId !== undefined) updateData.supplier_id = supplierId;\n    if (name !== undefined) updateData.name = name;\n    if (notes !== undefined) updateData.notes = notes;\n    if (status !== undefined) updateData.status = status;\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('order_lists')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating order list:', error);\n      return NextResponse.json({ \n        error: 'Failed to update order list',\n        message: 'Could not update order list data'\n      }, { status: 500 });\n    }\n\n    // Update items if provided\n    if (items !== undefined) {\n      // Delete existing items\n      await supabaseAdmin\n        .from('order_list_items')\n        .delete()\n        .eq('order_list_id', id);\n\n      // Add new items\n      if (items.length > 0) {\n        const orderItems = items.map((item: any) => ({\n          order_list_id: id,\n          ingredient_id: item.ingredientId,\n          quantity: item.quantity,\n          unit: item.unit,\n          notes: item.notes\n        }));\n\n        await supabaseAdmin\n          .from('order_list_items')\n          .insert(orderItems);\n      }\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Order list updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Order lists API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'Missing ID',\n        message: 'Order list ID is required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // Delete order list items first (foreign key constraint)\n    await supabaseAdmin\n      .from('order_list_items')\n      .delete()\n      .eq('order_list_id', id);\n\n    // Delete the order list\n    const { error } = await supabaseAdmin\n      .from('order_lists')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting order list:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete order list',\n        message: 'Could not remove order list'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Order list deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Order lists API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}