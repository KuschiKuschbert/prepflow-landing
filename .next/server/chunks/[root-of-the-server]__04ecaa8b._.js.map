{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/create-rls-policies/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n    if (!supabaseUrl || !serviceRoleKey) {\n      return NextResponse.json({\n        error: 'Missing Supabase configuration',\n        message: 'Please check your environment variables'\n      }, { status: 400 });\n    }\n\n    // Use Supabase REST API to create policies\n    const policies = [\n      {\n        name: 'Allow public read access to ingredients',\n        operation: 'SELECT',\n        using: 'true'\n      },\n      {\n        name: 'Allow public insert to ingredients',\n        operation: 'INSERT',\n        with_check: 'true'\n      },\n      {\n        name: 'Allow public update to ingredients',\n        operation: 'UPDATE',\n        using: 'true'\n      },\n      {\n        name: 'Allow public delete to ingredients',\n        operation: 'DELETE',\n        using: 'true'\n      }\n    ];\n\n    const results = [];\n\n    for (const policy of policies) {\n      try {\n        // First enable RLS on the table\n        const enableRLSResponse = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${serviceRoleKey}`,\n            'apikey': serviceRoleKey\n          },\n          body: JSON.stringify({\n            sql: 'ALTER TABLE ingredients ENABLE ROW LEVEL SECURITY;'\n          })\n        });\n\n        // Create the policy\n        const createPolicyResponse = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${serviceRoleKey}`,\n            'apikey': serviceRoleKey\n          },\n          body: JSON.stringify({\n            sql: `\n              CREATE POLICY \"${policy.name}\" ON ingredients\n              FOR ${policy.operation}\n              ${policy.using ? `USING (${policy.using})` : ''}\n              ${policy.with_check ? `WITH CHECK (${policy.with_check})` : ''};\n            `\n          })\n        });\n\n        const policyResult = await createPolicyResponse.json();\n\n        if (createPolicyResponse.ok) {\n          results.push({\n            policy: policy.name,\n            status: 'created',\n            message: 'Policy created successfully'\n          });\n        } else {\n          if (policyResult.message?.includes('already exists')) {\n            results.push({\n              policy: policy.name,\n              status: 'already_exists',\n              message: 'Policy already exists'\n            });\n          } else {\n            results.push({\n              policy: policy.name,\n              status: 'error',\n              error: policyResult.message || 'Unknown error'\n            });\n          }\n        }\n      } catch (err) {\n        results.push({\n          policy: policy.name,\n          status: 'error',\n          error: err instanceof Error ? err.message : 'Unknown error'\n        });\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'RLS policy creation completed',\n      results: results,\n      instructions: 'If automatic creation failed, create policies manually in Supabase dashboard: Authentication → Policies → ingredients table'\n    });\n\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return NextResponse.json({\n      error: 'Internal server error',\n      details: err instanceof Error ? err.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM;QACN,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;QAE5D,IAAI,CAAC,eAAe,CAAC,gBAAgB;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,2CAA2C;QAC3C,MAAM,WAAW;YACf;gBACE,MAAM;gBACN,WAAW;gBACX,OAAO;YACT;YACA;gBACE,MAAM;gBACN,WAAW;gBACX,YAAY;YACd;YACA;gBACE,MAAM;gBACN,WAAW;gBACX,OAAO;YACT;YACA;gBACE,MAAM;gBACN,WAAW;gBACX,OAAO;YACT;SACD;QAED,MAAM,UAAU,EAAE;QAElB,KAAK,MAAM,UAAU,SAAU;YAC7B,IAAI;gBACF,gCAAgC;gBAChC,MAAM,oBAAoB,MAAM,MAAM,GAAG,YAAY,iBAAiB,CAAC,EAAE;oBACvE,QAAQ;oBACR,SAAS;wBACP,gBAAgB;wBAChB,iBAAiB,CAAC,OAAO,EAAE,gBAAgB;wBAC3C,UAAU;oBACZ;oBACA,MAAM,KAAK,SAAS,CAAC;wBACnB,KAAK;oBACP;gBACF;gBAEA,oBAAoB;gBACpB,MAAM,uBAAuB,MAAM,MAAM,GAAG,YAAY,iBAAiB,CAAC,EAAE;oBAC1E,QAAQ;oBACR,SAAS;wBACP,gBAAgB;wBAChB,iBAAiB,CAAC,OAAO,EAAE,gBAAgB;wBAC3C,UAAU;oBACZ;oBACA,MAAM,KAAK,SAAS,CAAC;wBACnB,KAAK,CAAC;6BACW,EAAE,OAAO,IAAI,CAAC;kBACzB,EAAE,OAAO,SAAS,CAAC;cACvB,EAAE,OAAO,KAAK,GAAG,CAAC,OAAO,EAAE,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;cAChD,EAAE,OAAO,UAAU,GAAG,CAAC,YAAY,EAAE,OAAO,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;YACjE,CAAC;oBACH;gBACF;gBAEA,MAAM,eAAe,MAAM,qBAAqB,IAAI;gBAEpD,IAAI,qBAAqB,EAAE,EAAE;oBAC3B,QAAQ,IAAI,CAAC;wBACX,QAAQ,OAAO,IAAI;wBACnB,QAAQ;wBACR,SAAS;oBACX;gBACF,OAAO;oBACL,IAAI,aAAa,OAAO,EAAE,SAAS,mBAAmB;wBACpD,QAAQ,IAAI,CAAC;4BACX,QAAQ,OAAO,IAAI;4BACnB,QAAQ;4BACR,SAAS;wBACX;oBACF,OAAO;wBACL,QAAQ,IAAI,CAAC;4BACX,QAAQ,OAAO,IAAI;4BACnB,QAAQ;4BACR,OAAO,aAAa,OAAO,IAAI;wBACjC;oBACF;gBACF;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,IAAI,CAAC;oBACX,QAAQ,OAAO,IAAI;oBACnB,QAAQ;oBACR,OAAO,eAAe,QAAQ,IAAI,OAAO,GAAG;gBAC9C;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,SAAS;YACT,cAAc;QAChB;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}