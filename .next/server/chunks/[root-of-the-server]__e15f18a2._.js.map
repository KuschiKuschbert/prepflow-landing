{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/temperature-thresholds/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET() {\n  try {\n    const { data, error } = await supabaseAdmin\n      .from('temperature_thresholds')\n      .select('*')\n      .order('temperature_type', { ascending: true });\n    \n    if (error) {\n      console.error('Error fetching temperature thresholds:', error);\n      \n      // Return default thresholds if table doesn't exist\n      const defaultThresholds = [\n        { id: 1, temperature_type: 'fridge', min_temp_celsius: 0, max_temp_celsius: 5, alert_enabled: true },\n        { id: 2, temperature_type: 'freezer', min_temp_celsius: -23, max_temp_celsius: -18, alert_enabled: true },\n        { id: 3, temperature_type: 'food_cooking', min_temp_celsius: 75, max_temp_celsius: null, alert_enabled: true },\n        { id: 4, temperature_type: 'food_hot_holding', min_temp_celsius: 60, max_temp_celsius: null, alert_enabled: true },\n        { id: 5, temperature_type: 'food_cold_holding', min_temp_celsius: null, max_temp_celsius: 5, alert_enabled: true },\n        { id: 6, temperature_type: 'storage', min_temp_celsius: 10, max_temp_celsius: 21, alert_enabled: false }\n      ];\n      \n      return NextResponse.json({ success: true, data: defaultThresholds });\n    }\n    \n    return NextResponse.json({ success: true, data: data || [] });\n  } catch (error) {\n    console.error('Server error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { id, ...updateData } = body;\n    \n    if (!id) {\n      return NextResponse.json(\n        { success: false, error: 'Threshold ID is required' },\n        { status: 400 }\n      );\n    }\n    \n    const { data, error } = await supabaseAdmin\n      .from('temperature_thresholds')\n      .update({\n        ...updateData,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating temperature threshold:', error);\n      return NextResponse.json(\n        { success: false, error: 'Failed to update temperature threshold' },\n        { status: 500 }\n      );\n    }\n    \n    return NextResponse.json({ success: true, data });\n  } catch (error) {\n    console.error('Server error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CACxC,IAAI,CAAC,0BACL,MAAM,CAAC,KACP,KAAK,CAAC,oBAAoB;YAAE,WAAW;QAAK;QAE/C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,0CAA0C;YAExD,mDAAmD;YACnD,MAAM,oBAAoB;gBACxB;oBAAE,IAAI;oBAAG,kBAAkB;oBAAU,kBAAkB;oBAAG,kBAAkB;oBAAG,eAAe;gBAAK;gBACnG;oBAAE,IAAI;oBAAG,kBAAkB;oBAAW,kBAAkB,CAAC;oBAAI,kBAAkB,CAAC;oBAAI,eAAe;gBAAK;gBACxG;oBAAE,IAAI;oBAAG,kBAAkB;oBAAgB,kBAAkB;oBAAI,kBAAkB;oBAAM,eAAe;gBAAK;gBAC7G;oBAAE,IAAI;oBAAG,kBAAkB;oBAAoB,kBAAkB;oBAAI,kBAAkB;oBAAM,eAAe;gBAAK;gBACjH;oBAAE,IAAI;oBAAG,kBAAkB;oBAAqB,kBAAkB;oBAAM,kBAAkB;oBAAG,eAAe;gBAAK;gBACjH;oBAAE,IAAI;oBAAG,kBAAkB;oBAAW,kBAAkB;oBAAI,kBAAkB;oBAAI,eAAe;gBAAM;aACxG;YAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,MAAM;YAAkB;QACpE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM,QAAQ,EAAE;QAAC;IAC7D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,EAAE,EAAE,GAAG,YAAY,GAAG;QAE9B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA2B,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CACxC,IAAI,CAAC,0BACL,MAAM,CAAC;YACN,GAAG,UAAU;YACb,YAAY,IAAI,OAAO,WAAW;QACpC,GACC,EAAE,CAAC,MAAM,IACT,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,yCAAyC;YACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAyC,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAK;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}