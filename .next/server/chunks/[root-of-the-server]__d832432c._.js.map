{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/par-levels/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json({ \n        error: 'User ID is required',\n        message: 'Please provide a valid user ID'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('par_levels')\n      .select(`\n        *,\n        ingredients (\n          id,\n          name,\n          unit,\n          category\n        )\n      `)\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching par levels:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch par levels',\n        message: 'Could not retrieve par level data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Par levels API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, ingredientId, parLevel, reorderPoint, unit, notes } = body;\n\n    if (!userId || !ingredientId || parLevel === undefined) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'User ID, ingredient ID, and par level are required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    // Check if par level already exists for this ingredient\n    const { data: existing } = await supabaseAdmin\n      .from('par_levels')\n      .select('id')\n      .eq('user_id', userId)\n      .eq('ingredient_id', ingredientId)\n      .single();\n\n    if (existing) {\n      return NextResponse.json({ \n        error: 'Par level already exists',\n        message: 'This ingredient already has a par level set'\n      }, { status: 409 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('par_levels')\n      .insert({\n        user_id: userId,\n        ingredient_id: ingredientId,\n        par_level: parLevel,\n        reorder_point: reorderPoint || parLevel * 0.5, // Default to 50% of par level\n        unit: unit,\n        notes: notes,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating par level:', error);\n      return NextResponse.json({ \n        error: 'Failed to create par level',\n        message: 'Could not save par level data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Par level created successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Par levels API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { id, parLevel, reorderPoint, unit, notes } = body;\n\n    if (!id || parLevel === undefined) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'ID and par level are required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('par_levels')\n      .update({\n        par_level: parLevel,\n        reorder_point: reorderPoint,\n        unit: unit,\n        notes: notes,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating par level:', error);\n      return NextResponse.json({ \n        error: 'Failed to update par level',\n        message: 'Could not update par level data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Par level updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Par levels API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'Missing ID',\n        message: 'Par level ID is required'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { error } = await supabaseAdmin\n      .from('par_levels')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting par level:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete par level',\n        message: 'Could not remove par level'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Par level deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Par levels API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,iHAAA,CAAA,gBAAa,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CACxC,IAAI,CAAC,cACL,MAAM,CAAC,CAAC;;;;;;;;MAQT,CAAC,EACA,EAAE,CAAC,WAAW,QACd,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,QAAQ,EAAE;QAClB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;QAEtE,IAAI,CAAC,UAAU,CAAC,gBAAgB,aAAa,WAAW;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,iHAAA,CAAA,gBAAa,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,wDAAwD;QACxD,MAAM,EAAE,MAAM,QAAQ,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CAC3C,IAAI,CAAC,cACL,MAAM,CAAC,MACP,EAAE,CAAC,WAAW,QACd,EAAE,CAAC,iBAAiB,cACpB,MAAM;QAET,IAAI,UAAU;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CACxC,IAAI,CAAC,cACL,MAAM,CAAC;YACN,SAAS;YACT,eAAe;YACf,WAAW;YACX,eAAe,gBAAgB,WAAW;YAC1C,MAAM;YACN,OAAO;YACP,YAAY,IAAI,OAAO,WAAW;YAClC,YAAY,IAAI,OAAO,WAAW;QACpC,GACC,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;QAEpD,IAAI,CAAC,MAAM,aAAa,WAAW;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,iHAAA,CAAA,gBAAa,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CACxC,IAAI,CAAC,cACL,MAAM,CAAC;YACN,WAAW;YACX,eAAe;YACf,MAAM;YACN,OAAO;YACP,YAAY,IAAI,OAAO,WAAW;QACpC,GACC,EAAE,CAAC,MAAM,IACT,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,iHAAA,CAAA,gBAAa,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,iHAAA,CAAA,gBAAa,CAClC,IAAI,CAAC,cACL,MAAM,GACN,EAAE,CAAC,MAAM;QAEZ,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}