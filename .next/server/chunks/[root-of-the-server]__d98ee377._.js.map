{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,IAAA,yMAAY,EAAC,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/ai-specials/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, imageData, prompt } = body;\n\n    if (!userId || !imageData) {\n      return NextResponse.json({ \n        error: 'Missing required fields',\n        message: 'User ID and image data are required'\n      }, { status: 400 });\n    }\n\n    // For now, we'll simulate AI processing\n    // In a real implementation, you would integrate with OpenAI Vision API or similar\n    const aiResponse = await processImageWithAI(imageData, prompt);\n\n    // Save the AI analysis to database\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data: aiRecord, error: aiError } = await supabaseAdmin\n      .from('ai_specials_ingredients')\n      .insert({\n        user_id: userId,\n        image_data: imageData,\n        prompt: prompt,\n        ai_response: aiResponse,\n        status: 'completed',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n\n    if (aiError) {\n      console.error('Error saving AI analysis:', aiError);\n      return NextResponse.json({ \n        error: 'Failed to save AI analysis',\n        message: 'Could not save AI processing results'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'AI specials generated successfully',\n      data: {\n        aiRecord,\n        suggestions: aiResponse.suggestions,\n        ingredients: aiResponse.ingredients\n      }\n    });\n\n  } catch (error) {\n    console.error('AI specials API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n\nasync function processImageWithAI(imageData: string, prompt?: string) {\n  // Simulate AI processing delay\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // Mock AI response - in real implementation, this would call OpenAI Vision API\n  const mockIngredients = [\n    'Fresh tomatoes',\n    'Basil leaves',\n    'Mozzarella cheese',\n    'Olive oil',\n    'Garlic',\n    'Red onions',\n    'Bell peppers',\n    'Fresh herbs'\n  ];\n\n  const mockSuggestions = [\n    'Caprese Salad - Perfect for showcasing fresh tomatoes and mozzarella',\n    'Mediterranean Bruschetta - Great use of tomatoes, basil, and garlic',\n    'Grilled Vegetable Platter - Highlight the bell peppers and onions',\n    'Herb-Infused Oil - Feature the fresh herbs and olive oil'\n  ];\n\n  return {\n    ingredients: mockIngredients,\n    suggestions: mockSuggestions,\n    confidence: 0.85,\n    processing_time: 2.1\n  };\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json({ \n        error: 'User ID is required',\n        message: 'Please provide a valid user ID'\n      }, { status: 400 });\n    }\n\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('ai_specials_ingredients')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching AI specials:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch AI specials',\n        message: 'Could not retrieve AI analysis data'\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('AI specials API error:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}