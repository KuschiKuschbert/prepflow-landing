{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Client-side Supabase client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (only available on server)\nexport function createSupabaseAdmin() {\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!serviceRoleKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable.')\n  }\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable.')\n  }\n\n  return createClient(supabaseUrl, serviceRoleKey)\n}\n\n// For backward compatibility, create admin client only on server-side\nexport const supabaseAdmin = typeof window === 'undefined' ? createSupabaseAdmin() : null\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,SAAS;IACd,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;IAE5D,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA;;IAIA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACnC;AAGO,MAAM,gBAAgB,uCAAgC,wBAAwB","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/api/suppliers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({ \n        error: 'Database connection not available' \n      }, { status: 500 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const active = searchParams.get('active');\n\n    let query = supabaseAdmin\n      .from('suppliers')\n      .select('*')\n      .order('name');\n\n    if (active !== null) {\n      query = query.eq('is_active', active === 'true');\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error fetching suppliers:', error);\n      return NextResponse.json({ \n        error: 'Failed to fetch suppliers',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: data || []\n    });\n\n  } catch (error) {\n    console.error('Suppliers fetch error:', error);\n    return NextResponse.json({ \n      error: 'Failed to fetch suppliers',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({\n        error: 'Database connection not available'\n      }, { status: 500 });\n    }\n\n    const body = await request.json();\n    const { \n      name, \n      contact_person, \n      email, \n      phone, \n      address, \n      website, \n      payment_terms, \n      delivery_schedule, \n      minimum_order_amount, \n      notes \n    } = body;\n\n    if (!name) {\n      return NextResponse.json({ \n        error: 'Name is required',\n        message: 'Please provide a supplier name'\n      }, { status: 400 });\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('suppliers')\n      .insert({\n        name,\n        contact_person: contact_person || null,\n        email: email || null,\n        phone: phone || null,\n        address: address || null,\n        website: website || null,\n        payment_terms: payment_terms || null,\n        delivery_schedule: delivery_schedule || null,\n        minimum_order_amount: minimum_order_amount ? parseFloat(minimum_order_amount) : null,\n        notes: notes || null,\n        is_active: true\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating supplier:', error);\n      return NextResponse.json({ \n        error: 'Failed to create supplier',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Supplier created successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Supplier creation error:', error);\n    return NextResponse.json({ \n      error: 'Failed to create supplier',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({\n        error: 'Database connection not available'\n      }, { status: 500 });\n    }\n\n    const body = await request.json();\n    const { \n      id, \n      name, \n      contact_person, \n      email, \n      phone, \n      address, \n      website, \n      payment_terms, \n      delivery_schedule, \n      minimum_order_amount, \n      notes, \n      is_active \n    } = body;\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the supplier to update'\n      }, { status: 400 });\n    }\n\n    const updateData: any = {};\n    if (name !== undefined) updateData.name = name;\n    if (contact_person !== undefined) updateData.contact_person = contact_person;\n    if (email !== undefined) updateData.email = email;\n    if (phone !== undefined) updateData.phone = phone;\n    if (address !== undefined) updateData.address = address;\n    if (website !== undefined) updateData.website = website;\n    if (payment_terms !== undefined) updateData.payment_terms = payment_terms;\n    if (delivery_schedule !== undefined) updateData.delivery_schedule = delivery_schedule;\n    if (minimum_order_amount !== undefined) updateData.minimum_order_amount = minimum_order_amount ? parseFloat(minimum_order_amount) : null;\n    if (notes !== undefined) updateData.notes = notes;\n    if (is_active !== undefined) updateData.is_active = is_active;\n\n    const { data, error } = await supabaseAdmin\n      .from('suppliers')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating supplier:', error);\n      return NextResponse.json({ \n        error: 'Failed to update supplier',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Supplier updated successfully',\n      data\n    });\n\n  } catch (error) {\n    console.error('Supplier update error:', error);\n    return NextResponse.json({ \n      error: 'Failed to update supplier',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    if (!supabaseAdmin) {\n      return NextResponse.json({\n        error: 'Database connection not available'\n      }, { status: 500 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json({ \n        error: 'ID is required',\n        message: 'Please provide an ID for the supplier to delete'\n      }, { status: 400 });\n    }\n\n    const { error } = await supabaseAdmin\n      .from('suppliers')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting supplier:', error);\n      return NextResponse.json({ \n        error: 'Failed to delete supplier',\n        message: error.message\n      }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Supplier deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Supplier deletion error:', error);\n    return NextResponse.json({ \n      error: 'Failed to delete supplier',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}