{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-DNS-Prefetch-Control",
          "value": "on"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "origin-when-cross-origin"
        },
        {
          "key": "Permissions-Policy",
          "value": "camera=(), microphone=(), geolocation=()"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    },
    {
      "source": "/images/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        },
        {
          "key": "Vary",
          "value": "Accept"
        }
      ],
      "regex": "^/images(?:/(.*))(?:/)?$"
    },
    {
      "source": "/_next/static/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/_next/static(?:/(.*))(?:/)?$"
    },
    {
      "source": "/sw.js",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=0, must-revalidate"
        },
        {
          "key": "Service-Worker-Allowed",
          "value": "/"
        }
      ],
      "regex": "^/sw\\.js(?:/)?$"
    },
    {
      "source": "/manifest.json",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=86400"
        }
      ],
      "regex": "^/manifest\\.json(?:/)?$"
    }
  ],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/cancelled",
      "regex": "^/cancelled(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cancelled(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/privacy-policy",
      "regex": "^/privacy\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy\\-policy(?:/)?$"
    },
    {
      "page": "/terms-of-service",
      "regex": "^/terms\\-of\\-service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms\\-of\\-service(?:/)?$"
    },
    {
      "page": "/thank-you",
      "regex": "^/thank\\-you(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/thank\\-you(?:/)?$"
    },
    {
      "page": "/webapp",
      "regex": "^/webapp(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp(?:/)?$"
    },
    {
      "page": "/webapp/ai-specials",
      "regex": "^/webapp/ai\\-specials(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/ai\\-specials(?:/)?$"
    },
    {
      "page": "/webapp/cleaning",
      "regex": "^/webapp/cleaning(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/cleaning(?:/)?$"
    },
    {
      "page": "/webapp/cogs",
      "regex": "^/webapp/cogs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/cogs(?:/)?$"
    },
    {
      "page": "/webapp/compliance",
      "regex": "^/webapp/compliance(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/compliance(?:/)?$"
    },
    {
      "page": "/webapp/dish-sections",
      "regex": "^/webapp/dish\\-sections(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/dish\\-sections(?:/)?$"
    },
    {
      "page": "/webapp/ingredients",
      "regex": "^/webapp/ingredients(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/ingredients(?:/)?$"
    },
    {
      "page": "/webapp/order-lists",
      "regex": "^/webapp/order\\-lists(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/order\\-lists(?:/)?$"
    },
    {
      "page": "/webapp/par-levels",
      "regex": "^/webapp/par\\-levels(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/par\\-levels(?:/)?$"
    },
    {
      "page": "/webapp/performance",
      "regex": "^/webapp/performance(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/performance(?:/)?$"
    },
    {
      "page": "/webapp/prep-lists",
      "regex": "^/webapp/prep\\-lists(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/prep\\-lists(?:/)?$"
    },
    {
      "page": "/webapp/recipe-sharing",
      "regex": "^/webapp/recipe\\-sharing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/recipe\\-sharing(?:/)?$"
    },
    {
      "page": "/webapp/recipes",
      "regex": "^/webapp/recipes(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/recipes(?:/)?$"
    },
    {
      "page": "/webapp/setup",
      "regex": "^/webapp/setup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/setup(?:/)?$"
    },
    {
      "page": "/webapp/suppliers",
      "regex": "^/webapp/suppliers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/suppliers(?:/)?$"
    },
    {
      "page": "/webapp/temperature",
      "regex": "^/webapp/temperature(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/webapp/temperature(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}