{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielkuschmierz/prepflow-landing/app/webapp/temperature/components/SynchronizedChart.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useEffect, useState, memo } from 'react';\n\ninterface TemperatureLog {\n  id: number;\n  log_date: string;\n  log_time: string;\n  temperature_celsius: number;\n  location: string | null;\n  temperature_type: string;\n}\n\ninterface SynchronizedChartProps {\n  logs: TemperatureLog[];\n  equipment: {\n    id: string;\n    name: string;\n    equipment_type: string;\n    min_temp_celsius: number | null;\n    max_temp_celsius: number | null;\n  };\n  formatDateString: (date: string) => string;\n  formatTime: (time: string) => string;\n  getTypeIcon: (type: string) => string;\n}\n\nconst SynchronizedChart = memo(({ \n  logs, \n  equipment, \n  formatDateString, \n  formatTime,\n  getTypeIcon \n}: SynchronizedChartProps) => {\n  const chartScrollRef = useRef<HTMLDivElement>(null);\n  const xAxisScrollRef = useRef<HTMLDivElement>(null);\n  \n  // Calculate chart dimensions and data\n  const chartWidth = Math.max(800, logs.length * 12);\n  const uniqueDates = [...new Set(logs.map(l => l.log_date))].sort();\n  const dayCount = uniqueDates.length;\n  const dayWidth = chartWidth / dayCount;\n  \n  // Calculate temperature range\n  const temps = logs.map(log => log.temperature_celsius);\n  const minTemp = Math.min(...temps);\n  const maxTemp = Math.max(...temps);\n  const tempRange = maxTemp - minTemp;\n  const padding = tempRange * 0.1;\n  const chartMinTemp = minTemp - padding;\n  const chartMaxTemp = maxTemp + padding;\n  const chartTempRange = chartMaxTemp - chartMinTemp;\n  \n  // Synchronize scrolling between chart and x-axis\n  useEffect(() => {\n    const chartScroll = chartScrollRef.current;\n    const xAxisScroll = xAxisScrollRef.current;\n    \n    if (!chartScroll || !xAxisScroll) return;\n    \n    let isSyncing = false;\n    \n    const syncScroll = (source: HTMLElement, target: HTMLElement) => {\n      if (!isSyncing) {\n        isSyncing = true;\n        target.scrollLeft = source.scrollLeft;\n        // Use requestAnimationFrame to ensure the sync happens after the scroll\n        requestAnimationFrame(() => {\n          isSyncing = false;\n        });\n      }\n    };\n    \n    const handleChartScroll = () => {\n      syncScroll(chartScroll, xAxisScroll);\n    };\n    \n    const handleXAxisScroll = () => {\n      syncScroll(xAxisScroll, chartScroll);\n    };\n    \n    chartScroll.addEventListener('scroll', handleChartScroll, { passive: true });\n    xAxisScroll.addEventListener('scroll', handleXAxisScroll, { passive: true });\n    \n    return () => {\n      chartScroll.removeEventListener('scroll', handleChartScroll);\n      xAxisScroll.removeEventListener('scroll', handleXAxisScroll);\n    };\n  }, []);\n  \n  // Generate Y-axis scale steps\n  const scaleSteps = 5;\n  const stepSize = (chartMaxTemp - chartMinTemp) / (scaleSteps - 1);\n  const yAxisLabels = Array.from({ length: scaleSteps }, (_, i) => {\n    const temp = chartMaxTemp - (i * stepSize);\n    return temp.toFixed(1);\n  });\n  \n  if (logs.length === 0) {\n    return (\n      <div className=\"bg-[#0a0a0a] p-6 rounded-2xl border border-[#2a2a2a] flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"text-4xl mb-2\">ðŸ“Š</div>\n          <p className=\"text-gray-400\">No temperature data available</p>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"bg-[#0a0a0a] p-6 rounded-2xl border border-[#2a2a2a] relative\">\n      {/* Chart Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-14 h-14 rounded-xl bg-gradient-to-br from-[#29E7CD]/20 to-[#29E7CD]/10 flex items-center justify-center\">\n            <span className=\"text-2xl\">{getTypeIcon(equipment.equipment_type)}</span>\n          </div>\n          <div>\n            <h3 className=\"text-xl font-semibold text-white\">{equipment.name}</h3>\n            <p className=\"text-sm text-gray-400\">Temperature Trend</p>\n          </div>\n        </div>\n        \n        {/* Stats */}\n        <div className=\"flex space-x-6 text-center\">\n          <div>\n            <div className=\"text-2xl font-bold text-[#29E7CD]\">\n              {logs[0]?.temperature_celsius || '--'}Â°C\n            </div>\n            <div className=\"text-xs text-gray-400\">Latest</div>\n          </div>\n          <div>\n            <div className=\"text-lg font-semibold text-white\">\n              {(temps.reduce((sum, t) => sum + t, 0) / temps.length).toFixed(1)}Â°C\n            </div>\n            <div className=\"text-xs text-gray-400\">Average</div>\n          </div>\n          <div>\n            <div className=\"text-lg font-semibold text-white\">{logs.length}</div>\n            <div className=\"text-xs text-gray-400\">Readings</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart Container with Fixed Y-axis */}\n      <div className=\"relative bg-[#111111] rounded-xl overflow-hidden\">\n        <div className=\"flex h-64\">\n          {/* Fixed Left Y-axis */}\n          <div className=\"flex-shrink-0 w-16 flex flex-col justify-between py-2.5 px-2 bg-[#111111] border-r border-[#2a2a2a] z-10\">\n            {yAxisLabels.map((label, i) => (\n              <div key={i} className=\"text-xs text-gray-400 text-right\">\n                {label}Â°C\n              </div>\n            ))}\n          </div>\n          \n          {/* Scrollable Chart Area */}\n          <div \n            ref={chartScrollRef}\n            className=\"flex-1 overflow-x-auto\"\n            style={{ \n              scrollbarWidth: 'thin',\n              scrollbarColor: '#4a5568 #1a202c'\n            }}\n          >\n            <div style={{ width: `${chartWidth}px`, height: '100%' }}>\n              <svg width={chartWidth} height=\"256\" className=\"w-full h-full\">\n                {/* Grid and Chart Content */}\n                <defs>\n                  <pattern id={`grid-${equipment.id}`} width=\"40\" height=\"40\" patternUnits=\"userSpaceOnUse\">\n                    <path d=\"M 40 0 L 0 0 0 40\" fill=\"none\" stroke=\"#2a2a2a\" strokeWidth=\"0.5\"/>\n                  </pattern>\n                </defs>\n                <rect width=\"100%\" height=\"100%\" fill={`url(#grid-${equipment.id})`} />\n                \n                {/* Temperature Range Background */}\n                {equipment.min_temp_celsius && equipment.max_temp_celsius && (\n                  <rect \n                    x=\"0\" \n                    y={((chartMaxTemp - equipment.max_temp_celsius) / chartTempRange) * 240 + 8}\n                    width=\"100%\" \n                    height={((equipment.max_temp_celsius - equipment.min_temp_celsius) / chartTempRange) * 240}\n                    fill=\"#29E7CD\" \n                    opacity=\"0.1\"\n                  />\n                )}\n                \n                {/* Reference Lines */}\n                {equipment.min_temp_celsius && (\n                  <line \n                    x1=\"0\" \n                    y1={248 - (((equipment.min_temp_celsius - chartMinTemp) / chartTempRange) * 240)}\n                    x2={chartWidth}\n                    y2={248 - (((equipment.min_temp_celsius - chartMinTemp) / chartTempRange) * 240)}\n                    stroke=\"#29E7CD\" \n                    strokeWidth=\"2\" \n                    strokeDasharray=\"5,5\"\n                    opacity=\"0.7\"\n                  />\n                )}\n                \n                {equipment.max_temp_celsius && (\n                  <line \n                    x1=\"0\" \n                    y1={248 - (((equipment.max_temp_celsius - chartMinTemp) / chartTempRange) * 240)}\n                    x2={chartWidth}\n                    y2={248 - (((equipment.max_temp_celsius - chartMinTemp) / chartTempRange) * 240)}\n                    stroke=\"#29E7CD\" \n                    strokeWidth=\"2\" \n                    strokeDasharray=\"5,5\"\n                    opacity=\"0.7\"\n                  />\n                )}\n                \n                {/* Temperature Line Path */}\n                <path\n                  fill=\"none\"\n                  stroke=\"#29E7CD\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d={(() => {\n                    const points = logs.map((log) => {\n                      // Calculate time-based X position\n                      const timeParts = log.log_time.split(':');\n                      const hours = parseInt(timeParts[0]);\n                      const minutes = parseInt(timeParts[1]);\n                      const timeOfDay = (hours * 60 + minutes) / (24 * 60);\n                      \n                      const dateIndex = uniqueDates.indexOf(log.log_date);\n                      const dayStartX = (dateIndex * dayWidth) + 10;\n                      const timeOffsetX = timeOfDay * (dayWidth - 20);\n                      const x = dayStartX + timeOffsetX;\n                      \n                      const y = 248 - (((log.temperature_celsius - chartMinTemp) / chartTempRange) * 240);\n                      return `${x},${y}`;\n                    });\n                    \n                    if (points.length < 2) return '';\n                    \n                    // Create smooth curve\n                    let path = `M ${points[0]}`;\n                    for (let i = 1; i < points.length; i++) {\n                      const [x1, y1] = points[i - 1].split(',').map(Number);\n                      const [x2, y2] = points[i].split(',').map(Number);\n                      const cp1x = x1 + (x2 - x1) * 0.5;\n                      const cp1y = y1;\n                      const cp2x = x2 - (x2 - x1) * 0.5;\n                      const cp2y = y2;\n                      path += ` C ${cp1x},${cp1y} ${cp2x},${cp2y} ${x2},${y2}`;\n                    }\n                    return path;\n                  })()}\n                />\n                \n                {/* Data Points */}\n                {logs.map((log, index) => {\n                  const timeParts = log.log_time.split(':');\n                  const hours = parseInt(timeParts[0]);\n                  const minutes = parseInt(timeParts[1]);\n                  const timeOfDay = (hours * 60 + minutes) / (24 * 60);\n                  \n                  const dateIndex = uniqueDates.indexOf(log.log_date);\n                  const dayStartX = (dateIndex * dayWidth) + 10;\n                  const timeOffsetX = timeOfDay * (dayWidth - 20);\n                  const x = dayStartX + timeOffsetX;\n                  \n                  const y = 248 - (((log.temperature_celsius - chartMinTemp) / chartTempRange) * 240);\n                  const isInRange = equipment.min_temp_celsius && equipment.max_temp_celsius \n                    ? log.temperature_celsius >= equipment.min_temp_celsius && log.temperature_celsius <= equipment.max_temp_celsius\n                    : true;\n                  \n                  return (\n                    <g key={log.id}>\n                      <circle\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill={isInRange ? \"#29E7CD\" : \"#ef4444\"}\n                        stroke=\"white\"\n                        strokeWidth=\"2\"\n                      />\n                      <title>\n                        {formatDateString(log.log_date)} {formatTime(log.log_time)} - {log.temperature_celsius}Â°C\n                      </title>\n                    </g>\n                  );\n                })}\n                \n                {/* Day Dividers */}\n                {uniqueDates.slice(1).map((date, index) => {\n                  const x = ((index + 1) * dayWidth);\n                  return (\n                    <line\n                      key={date}\n                      x1={x}\n                      y1=\"8\"\n                      x2={x}\n                      y2=\"248\"\n                      stroke=\"#29E7CD\"\n                      strokeWidth=\"1\"\n                      opacity=\"0.3\"\n                    />\n                  );\n                })}\n              </svg>\n            </div>\n          </div>\n          \n          {/* Fixed Right Y-axis */}\n          <div className=\"flex-shrink-0 w-16 flex flex-col justify-between py-2.5 px-2 bg-[#111111] border-l border-[#2a2a2a] z-10\">\n            {yAxisLabels.map((label, i) => (\n              <div key={i} className=\"text-xs text-gray-400 text-left\">\n                {label}Â°C\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Synchronized X-axis Labels */}\n        <div className=\"flex border-t border-[#2a2a2a]\">\n          <div className=\"w-16 flex-shrink-0 bg-[#111111]\"></div>\n          <div \n            ref={xAxisScrollRef}\n            className=\"flex-1 overflow-x-auto\"\n            style={{ \n              scrollbarWidth: 'thin',\n              scrollbarColor: '#4a5568 #1a202c'\n            }}\n          >\n            <div style={{ width: `${chartWidth}px` }} className=\"px-2 py-2 bg-[#111111]\">\n              <div className=\"flex\">\n                {uniqueDates.map((date, index) => (\n                  <div \n                    key={date} \n                    className=\"text-center flex-shrink-0\" \n                    style={{ width: `${dayWidth}px` }}\n                  >\n                    <div className=\"text-xs font-medium text-white\">\n                      {formatDateString(date)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"w-16 flex-shrink-0 bg-[#111111]\"></div>\n        </div>\n      </div>\n      \n      {/* Legend */}\n      <div className=\"flex items-center justify-between mt-4\">\n        <div className=\"flex items-center space-x-4 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 rounded-full bg-[#29E7CD]\"></div>\n            <span className=\"text-gray-300\">In Range</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n            <span className=\"text-gray-300\">Out of Range</span>\n          </div>\n        </div>\n        {equipment.min_temp_celsius && equipment.max_temp_celsius && (\n          <div className=\"text-sm text-gray-400\">\n            Safe Range: {equipment.min_temp_celsius}Â°C - {equipment.max_temp_celsius}Â°C\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nSynchronizedChart.displayName = 'SynchronizedChart';\n\nexport default SynchronizedChart;\n"],"names":[],"mappings":"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","debugId":null}}]
}